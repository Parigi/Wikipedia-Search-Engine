<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <dbname>enwiki</dbname>
    <base>https://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.35.0-wmf.36</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Fortran</title>
    <ns>0</ns>
    <id>11168</id>
    <revision>
      <id>962070839</id>
      <parentid>961959080</parentid>
      <timestamp>2020-06-11T23:21:19Z</timestamp>
      <contributor>
        <username>InternetArchiveBot</username>
        <id>27015025</id>
      </contributor>
      <comment>Bluelink 1 book for [[Wikipedia:Verifiability|verifiability]] (refca)) #IABot (v2.0.1) ([[User:GreenC bot|GreenC bot]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="88698" xml:space="preserve">{{short description|General-purpose programming language}}
{{Use dmy dates|date=January 2012}}
{{Infobox programming language
| name = Fortran
| logo = [[File:Fortran acs cover.jpeg|150px]]
| logo caption = ''The Fortran Automatic Coding System for the [[IBM 704]]'' (15 October 1956), the first programmer's reference manual for Fortran
| paradigm = [[Multi-paradigm programming language|multi-paradigm]]: [[Structured programming|structured]], [[Imperative programming|imperative]] ([[Procedural programming|procedural]], [[Object-oriented programming|object-oriented]]), [[Generic programming|generic]], [[Array programming|array]]
| year = {{Start date and age|1957}}
| designer = [[John Backus]]
| developer = [[John Backus]] and [[IBM]]
| latest release version = Fortran 2018 (ISO/IEC 1539-1:2018)
| latest release date = {{Start date and age|2018|11|28}}
| typing = [[Strong and weak typing|strong]], [[Type system|static]], [[Manifest typing|manifest]]
| implementations = [[Absoft Fortran Compilers|Absoft]], [[Cray]], [[GNU Fortran|GFortran]], [[G95]], [[IBM]] XL Fortran, [[Intel Fortran Compiler|Intel]], [[Hitachi]], Lahey/Fujitsu, [[Numerical Algorithms Group]], [[Watcom C compiler|Open Watcom]], [[PathScale]], [[PGI compiler|PGI]], [[Silverfrost FTN95|Silverfrost]], [[Oracle Solaris Studio]], Visual Fortran, others
| dialects = 
| influenced_by = [[Speedcoding]]
| influenced = [[ALGOL 58]], [[BASIC]], [[C (programming language)|C]], [[Chapel (programming language)|Chapel]],&lt;ref name="chplspec"&gt;{{cite web|title=Chapel spec (Acknowledgements)|url=http://chapel.cray.com/spec/spec-0.98.pdf|date=2015-10-01|accessdate=2016-01-14|publisher=Cray Inc}}&lt;/ref&gt; [[CMS-2 (programming language)|CMS-2]], [[Fortress (programming language)|Fortress]], [[PL/I]], [[PACT I]], [[MUMPS]], [[IDL (programming language)|IDL]], [[Ratfor]]
| operating_system = 
| license = 
| file_ext = {{code|.f}}, {{code|.for}}, {{code|.f90}}
| website = 
}}

'''Fortran''' ({{IPAc-en|ˈ|f|ɔr|t|r|æ|n}}; formerly '''FORTRAN''', derived from ''Formula Translation''&lt;ref&gt;{{cite web
 | url = http://www.thefreedictionary.com/FORTRAN
 | title = FORTRAN
 | work = American Heritage Dictionary of the English Language
 | publisher = The Free Dictionary
 | edition = 5
 | year = 2011
 | accessdate = 2016-02-08
 }}&lt;/ref&gt;) is a general-purpose, [[compiled language|compiled]] [[imperative programming|imperative]] [[programming language]] that is especially suited to [[numerical analysis|numeric computation]] and [[computational science|scientific computing]].

Originally developed by [[IBM]]&lt;ref name="Where"&gt;{{cite web |url= http://www.softwarepreservation.org/projects/FORTRAN/paper/p25-backus.pdf |author=John Backus |title=The history of FORTRAN I, II and III |publisher= Softwarepreservation.org |accessdate=19 November 2014}}&lt;/ref&gt; in the 1950s for scientific and engineering applications, FORTRAN came to dominate this area of programming early on and has been in continuous use for over six decades in computationally intensive areas such as [[numerical weather prediction]], [[finite element method|finite element analysis]], [[computational fluid dynamics]], [[geophysics]], [[computational physics]], [[crystallography]] and [[computational chemistry]]. It is a popular language for [[high-performance computing]]&lt;ref name="hpc"&gt;{{cite journal |url= http://queue.acm.org/detail.cfm?id=1820518 |author=Eugene Loh |title=The Ideal HPC Programming Language |journal=Queue |date=18 June 2010 |volume=8 |issue=6}}&lt;/ref&gt; and is used for programs that benchmark and rank the world's [[TOP500|fastest supercomputers]].&lt;ref&gt;{{cite web|title = HPL – &lt;!--ndash ok here as substitute for hyphen?--&gt; A Portable Implementation of the High-Performance Linpack Benchmark for Distributed-Memory Computers | accessdate = 2015-02-21 | url = http://www.netlib.org/benchmark/hpl}}&lt;/ref&gt;&lt;ref&gt;{{cite web|title = Q13. What are the benchmarks? | work = Overview - CPU 2017 | publisher = [[SPEC]] | accessdate = 2019-11-13 | url = http://www.spec.org/cpu2017/Docs/overview.html#benchmarks}}&lt;/ref&gt;

Fortran encompasses a lineage of versions, each of which evolved to add extensions to the language while usually retaining compatibility with prior versions.  Successive versions have added support for [[structured programming]]
and processing of character-based data (FORTRAN 77), [[array programming]], [[modular programming]] and [[generic programming]] (Fortran 90), [[High Performance Fortran|high performance Fortran]] (Fortran 95), [[object-oriented programming]] (Fortran 2003), [[concurrent programming]] (Fortran 2008), and native [[parallel computing]] capabilities (Coarray Fortran 2008/2018).

Fortran's design was the basis for many other programming languages. Amongst the better-known is [[BASIC]], which is based on FORTRAN II with a number of [[Syntax (programming languages)|syntax]] cleanups, notably better logical structures,&lt;ref&gt;{{cite magazine |url=http://time.com/69316/basic/ |magazine=Time |title=Fifty Years of BASIC |date=29 April 2014}}&lt;/ref&gt; and other changes to work more easily in an interactive environment.&lt;ref&gt;{{cite web |url=https://www.gamasutra.com/view/news/216469/A_basic_history_of_BASIC_on_its_50th_birthday.php |title=A basic history of BASIC on its 50th birthday |website=Gamasutra |date=1 May 2014 |first=John |last=Szczepaniak}}&lt;/ref&gt;

== Naming ==
The names of earlier versions of the language through FORTRAN 77 were conventionally spelled in all-capitals (FORTRAN 77 was the last version in which the use of lowercase letters in keywords was strictly non-standard).{{citation needed|date=May 2020}} The capitalization has been dropped in referring to newer versions beginning with Fortran 90. The official language [[international standard|standards]] now refer to the language as "Fortran" rather than all-caps "FORTRAN".

==History==
[[File:IBM 704 mainframe.gif|right|thumb|320px|An [[IBM 704]] [[mainframe computer]]]]
In late 1953, [[John Backus|John W. Backus]] submitted a proposal to his superiors at [[IBM]] to develop a more practical alternative to [[assembly language]] for programming their [[IBM 704]] [[mainframe computer]].&lt;ref name="history-fortran-i-ii-333"&gt;{{cite journal|title=The History of Fortran I, II, and III|author=John Backus|authorlink=John Backus|journal=IEEE Annals of the History of Computing|volume=20|issue=4|pages=68–78|date=October-December 1998|doi=10.1109/85.728232}}&lt;/ref&gt;{{rp|69}} Backus' historic FORTRAN team consisted of programmers Richard Goldberg, Sheldon F. Best, Harlan Herrick, Peter Sheridan, [[Roy Nutt]], Robert Nelson, Irving Ziller, Harold Stern, [[Lois Haibt]], and [[David Sayre]].&lt;ref name="Backus57"&gt;{{cite conference|url=http://www.softwarepreservation.org/projects/FORTRAN/paper/BackusEtAl-FortranAutomaticCodingSystem-1957.pdf|title=The FORTRAN Automatic Coding System|conference=Western Joint Computer Conference|pages=188–198|date=February 1957|doi=10.1145/1455567.1455599|author1=J. W. Backus|authorlink1=John Backus|author2=R. J. Beeber|author3=S. Best|author4=R. Goldberg|author5=L. M. Haibt|authorlink5=Lois Haibt|author6=H. L. Herrick|author7=R. A. Nelson|author8=D. Sayre|authorlink8=David Sayre|author9=P. B. Sheridan|author10=H. Stern|author11=L. Ziller|author12=R. A. Hughes|author13=R. Nutt|authorlink13=Roy Nutt}}&lt;/ref&gt;  Its concepts included easier entry of equations into a computer, an idea developed by [[J. Halcombe Laning]] and demonstrated in the [[Laning and Zierler system]] of 1952.&lt;ref&gt;Mindell, David, Digital Apollo, MIT Press, Cambridge MA, 2008, p.99&lt;/ref&gt; Some of these programmers were chess players and were chosen to work at IBM with the thought being they had logical minds.&lt;ref&gt;{{cite web |title=IBM and Chess |url=http://www.chessmaniac.com/ibm-and-chess/ |website=Chess Maniac |publisher=Online Chess LLC |accessdate=30 April 2020}}&lt;/ref&gt;

A draft specification for ''The IBM Mathematical Formula Translating System'' was completed by November 1954.&lt;ref name="history-fortran-i-ii-333"/&gt;{{rp|71}} The first manual for FORTRAN appeared in October 1956,&lt;ref name="history-fortran-i-ii-333"/&gt;{{rp|72}} with the first FORTRAN [[compiler]] delivered in April 1957.&lt;ref name="history-fortran-i-ii-333"/&gt;{{rp|75}} This was the first [[optimizing compiler]], because customers were reluctant to use a [[high-level programming language]] unless its compiler could generate code with performance approaching that of hand-coded assembly language.&lt;ref&gt;[http://polaris.cs.uiuc.edu/publications/c1070.pdf The Fortran I Compiler] "The Fortran I compiler was the first major project in code optimization. It tackled problems of crucial importance whose general solution was an important research focus in compiler technology for several decades. Many classical techniques for compiler analysis and optimization can trace their origins and inspiration to the Fortran I compiler."&lt;/ref&gt;

While the community was skeptical that this new method could possibly outperform hand-coding, it reduced the number of programming [[Statement (programming)|statements]] necessary to operate a machine by a factor of 20, and quickly gained acceptance.  John Backus said during a 1979 interview with ''Think'', the IBM employee magazine, "Much of my work has come from being lazy. I didn't like writing programs, and so, when I was working on the [[IBM 701]], writing programs for computing missile trajectories, I started work on a programming system to make it easier to write programs."&lt;ref&gt;{{cite news|url=http://www.nbcnews.com/id/17704662/ns/technology_and_science-tech_and_gadgets/t/fortran-creator-john-backus-dies|title=Fortran creator John Backus dies|publisher=[[MSNBC]]|author=Brian Bergstein|date=May 20, 2007|accessdate=29 October 2018}}&lt;/ref&gt;

The language was widely adopted by scientists for writing numerically intensive programs, which encouraged compiler writers to produce compilers that could generate faster and more efficient code.  The inclusion of a [[complex data type|complex number data type]] in the language made Fortran especially suited to technical applications such as electrical engineering.{{citation needed|date=June 2018}}

By 1960, versions of FORTRAN were available for the [[IBM 709]], [[IBM 650|650]], [[IBM 1620|1620]], and [[IBM 7090|7090]] computers.  Significantly, the increasing popularity of FORTRAN spurred competing computer manufacturers to provide FORTRAN compilers for their machines, so that by 1963 over 40 FORTRAN compilers existed.  For these reasons, FORTRAN is considered to be the first widely used [[Cross-platform software|cross-platform]] programming language.

The development of Fortran paralleled the [[History of compiler writing|early evolution of compiler technology]], and many advances in the theory and design of [[compiler]]s were specifically motivated by the need to generate efficient code for Fortran programs.

The most comprehensive account of Fortran history in a single document is given by Lorenzo in the book listed below.

===FORTRAN===
The initial release of FORTRAN for the IBM 704 contained 32 [[Statement (programming)|statements]], including:

* {{code|DIMENSION}} and {{code|EQUIVALENCE}} statements
* Assignment statements
* Three-way [[Arithmetic IF|''arithmetic'' {{code|IF}}]] statement, which passed control to one of three locations in the program depending on whether the result of the arithmetic statement was negative, zero, or positive
* {{code|IF}} statements for checking exceptions ({{code|ACCUMULATOR OVERFLOW}}, {{code|QUOTIENT OVERFLOW}}, and {{code|DIVIDE CHECK}}); and {{code|IF}} statements for manipulating [[front panel|sense switches and sense lights]]
* {{code|GO TO}}, computed {{code|GO TO}}, {{code|ASSIGN}}, and assigned {{code|GO TO}}
* {{code|DO}} loops
* Formatted I/O: {{code|FORMAT}}, {{code|READ}}, {{code|READ INPUT TAPE}}, {{code|WRITE}}, {{code|WRITE OUTPUT TAPE}}, {{code|PRINT}}, and {{code|PUNCH}}
* Unformatted I/O: {{code|READ TAPE}}, {{code|READ DRUM}}, {{code|WRITE TAPE}}, and {{code|WRITE DRUM}}
* Other I/O: {{code|END FILE}}, {{code|REWIND}}, and {{code|BACKSPACE}}
* {{code|PAUSE}}, {{code|STOP}}, and {{code|CONTINUE}}
* {{code|FREQUENCY}} statement (for providing [[optimization (computer science)|optimization]] hints to the compiler).

The arithmetic {{code|IF}} statement was reminiscent of (but not readily implementable by) a three-way comparison instruction (CAS—Compare Accumulator with Storage) available on the 704. The statement provided the only way to compare numbers—by testing their difference, with an attendant risk of overflow. This deficiency was later overcome by "logical" facilities introduced in FORTRAN IV.

The {{code|FREQUENCY}} statement was used originally (and optionally) to give branch probabilities for the three branch cases of the arithmetic IF statement. The first FORTRAN compiler used this weighting to perform ''at compile time'' a [[Monte Carlo method|Monte Carlo simulation]] of the generated code, the results of which were used to optimize the placement of basic blocks in memory—a very sophisticated optimization for its time. The Monte Carlo technique is documented in Backus et al.'s paper on this original implementation, ''The FORTRAN Automatic Coding System'':

&lt;blockquote&gt;
The fundamental unit of program is the [[basic block]]; a basic block is a stretch of program which has one entry point and one exit point. The purpose of section 4 is to prepare for section 5 a table of predecessors (PRED table) which enumerates the basic blocks and lists for every basic block each of the basic blocks which can be its immediate predecessor in flow, together with the absolute frequency of each such basic block link. This table is obtained by running the program once in Monte-Carlo fashion, in which the outcome of conditional transfers arising out of IF-type statements and computed GO TO's is determined by a random number generator suitably weighted according to whatever FREQUENCY statements have been provided.&lt;ref name="Backus57" /&gt;&lt;/blockquote&gt;

Many years later, the {{code|FREQUENCY}} statement had no effect on the code, and was treated as a comment statement, since the compilers no longer did this kind of compile-time simulation. A similar fate has befallen ''compiler hints'' in several other programming languages, e.g. the  {{code|register|lang=c}} keyword in [[C (programming language)|C]].{{citation needed|date=September 2013}}

The first FORTRAN compiler reported diagnostic information by halting the program when an error was found and outputting an error code on its console. That code could be looked up by the programmer in an error messages table in the operator's manual, providing them with a brief description of the problem.&lt;ref&gt;{{cite book|last1=Applied Science Division and Programming Research Department, International Business Machines Corporation|title=The FORTRAN Automatic Coding System for the IBM 704 EDPM : Programmer's Reference Manual|date=October 15, 1956|pages=19–20|url=http://archive.computerhistory.org/resources/text/Fortran/102649787.05.01.acc.pdf}}&lt;/ref&gt;&lt;ref&gt;{{cite book|last1=Programming Research Department, International Business Machines Corporation|title=The FORTRAN Automatic Coding System for the IBM 704 EDPM : Preliminary Operator's Manual|date=April 8, 1957|pages=6–37|url=http://www.softwarepreservation.org/projects/FORTRAN/manual/Prelim_Oper_Man-1957_04_07.pdf}}&lt;/ref&gt; Later, an error-handling subroutine to handle user errors such as division by zero, developed by NASA,&lt;ref&gt;{{cite web|author=Betty Jo Armstead|date=January 21, 2015|url=https://spaceodyssey.dmns.org/media/62497/myyearsatnasa-_bettyjoarmstead.pdf|title=My Years at NASA|website=Denver Museum of Nature &amp; Science|access-date=June 15, 2019}}&lt;/ref&gt; was incorporated, informing users of which line of code contained the error.

==== Fixed layout and punched cards ====
[[File:FortranCardPROJ039.agr.jpg|thumb|FORTRAN code on a [[punched card]], showing the specialized uses of columns 1–5, 6 and 73–80]]
{{see|Computer programming in the punched card era}}
Before the development of disk files, text editors and terminals, programs were most often entered on a [[keypunch]] keyboard onto 80-column [[punched card]]s, one line to a card. The resulting deck of cards would be fed into a card reader to be compiled. Punched card codes included no lower-case letters or many special characters, and special versions of the IBM 026 [[keypunch]] were offered that would correctly print the re-purposed special characters used in FORTRAN.

Reflecting punched card input practice, Fortran programs were originally written in a fixed-column format, with the first 72 columns read into twelve 36-bit words.

A letter "C" in column 1 caused the entire card to be treated as a comment and ignored by the compiler. Otherwise, the columns of the card were divided into four fields:
* 1 to 5 were the label field: a sequence of digits here was taken as a label for use in DO or control statements such as GO TO and IF, or to identify a FORMAT statement referred to in a WRITE or READ statement. Leading zeros are ignored and 0 is not a valid label number. 
* 6 was a continuation field: a character other than a blank or a zero here caused the card to be taken as a continuation of the statement on the prior card. The continuation cards were usually numbered 1, 2, ''etc.'' and the starting card might therefore have zero in its continuation column—which is not a continuation of its preceding card.
* 7 to 72 served as the statement field. 
* 73 to 80 were ignored (the IBM 704's [[IBM 711|card reader]] only used 72 columns).&lt;ref&gt;[http://www.mirrorservice.org/sites/www.bitsavers.org/pdf/ibm/7090/22-6528-4_7090Manual.pdf Reference Manual, IBM 7090 Data Processing System], 1961, IBM A22-6528-3.&lt;/ref&gt;

Columns 73 to 80 could therefore be used for identification information, such as punching a sequence number or text, which could be used to re-order cards if a stack of cards was dropped; though in practice this was reserved for stable, production programs. An [[IBM 519]] could be used to copy a program deck and add sequence numbers. Some early compilers, e.g., the IBM 650's, had additional restrictions due to limitations on their card readers.&lt;ref&gt;{{cite web |url= http://www.bitsavers.org/pdf/ibm/fortran/F28-8074-3_FORTRANII_GenInf.pdf |publisher=Bitsavers.org |title=Fortran II User Manual |accessdate=19 November 2014}}&lt;/ref&gt; [[Keypunch]]es could be programmed to tab to column 7 and skip out after column 72. Later compilers relaxed most fixed-format restrictions, and the requirement was eliminated in the Fortran 90 standard.

Within the statement field, [[whitespace character]]s (blanks) were ignored outside a text literal. This allowed omitting spaces between tokens for brevity or including spaces within identifiers for clarity. For example, {{code|AVG OF X}} was a valid identifier, equivalent to {{code|AVGOFX}}, and &lt;syntaxhighlight lang="fortran" inline&gt;101010DO101I=1,101&lt;/syntaxhighlight&gt; was a valid statement, equivalent to 
&lt;syntaxhighlight lang="fortranfixed" inline&gt;10101    DO 101   I = 1, 101&lt;/syntaxhighlight&gt; because the zero in column 6 is treated as if it were a space (!), while &lt;syntaxhighlight lang="fortran" inline&gt;101010DO101I=1.101&lt;/syntaxhighlight&gt; was instead &lt;syntaxhighlight lang="fortranfixed" inline&gt;10101    DO101I = 1.101&lt;/syntaxhighlight&gt;, the assignment of 1.101 to a variable called &lt;syntaxhighlight lang="fortran" inline&gt;DO101I&lt;/syntaxhighlight&gt;. Note the slight visual difference between a comma and a period.

[[Hollerith constant|Hollerith strings]], originally allowed only in FORMAT and DATA statements, were prefixed by a character count and the letter H (e.g., {{code|26HTHIS IS ALPHANUMERIC DATA.}}), allowing blanks to be retained within the character string. Miscounts were a problem.

===FORTRAN II===
IBM's ''FORTRAN II'' appeared in 1958.  The main enhancement was to support [[procedural programming]] by allowing user-written subroutines and functions which returned values with parameters passed by [[Call by reference#Call by reference|reference]].  The COMMON statement provided a way for subroutines to access common (or [[global variable|global]]) variables. Six new statements were introduced:&lt;ref&gt;{{cite manual|url=http://bitsavers.org/pdf/ibm/704/C28-6000-2_704_FORTRANII.pdf|title=Reference Manual, FORTRAN II for the IBM 704 Data Processing System|year=1958|id=C28-6000-2}}&lt;/ref&gt;

* {{code|SUBROUTINE}}, {{code|FUNCTION}}, and {{code|END}}
* {{code|CALL}} and {{code|RETURN}}
* {{code|COMMON}}

Over the next few years, FORTRAN II would also add support for the {{code|DOUBLE PRECISION}} and {{code|COMPLEX}} data types.

Early FORTRAN compilers supported no [[Recursion (computer science)|recursion]] in subroutines. Early computer architectures supported no concept of a stack, and when they did directly support subroutine calls, the return location was often stored in one fixed location adjacent to the subroutine code (e.g. the [[IBM 1130]]) or a specific machine register ([[IBM 360]] ''et seq''), which only allows recursion if a stack is maintained by software and the return address is stored on the stack before the call is made and restored after the call returns. Although not specified in FORTRAN 77, many F77 compilers supported recursion as an option, and the [[Burroughs large systems|Burroughs mainframes]], designed with recursion built-in, did so by default. It became a standard in Fortran 90 via the new keyword RECURSIVE.&lt;ref&gt;{{cite web |url= http://www.ibiblio.org/pub/languages/fortran/ch1-12.html |title=Ibibilio.org |publisher=Ibiblio.org |accessdate=15 September 2014}}&lt;/ref&gt;

====Simple FORTRAN II program====
This program, for [[Heron's formula]], reads data on a tape reel containing three 5-digit integers A, B, and C as input. There are no "type" declarations available: variables whose name starts with I, J, K, L, M, or N are "fixed-point" (i.e. integers), otherwise floating-point. Since integers are to be processed in this example, the names of the variables start with the letter "I". The name of a variable must start with a letter and can continue with both letters and digits, up to a limit of six characters in FORTRAN II.  If A, B, and C cannot represent the sides of a triangle in plane geometry, then the program's execution will end with an error code of "STOP 1".  Otherwise, an output line will be printed showing the input values for A, B, and C, followed by the computed AREA of the triangle as a floating-point number occupying ten spaces along the line of output and showing 2 digits after the decimal point, the .2 in F10.2 of the FORMAT statement with label 601.

&lt;syntaxhighlight lang="fortranfixed"&gt;
C AREA OF A TRIANGLE WITH A STANDARD SQUARE ROOT FUNCTION
C INPUT - TAPE READER UNIT 5, INTEGER INPUT
C OUTPUT - LINE PRINTER UNIT 6, REAL OUTPUT
C INPUT ERROR DISPLAY ERROR OUTPUT CODE 1 IN JOB CONTROL LISTING
      READ INPUT TAPE 5, 501, IA, IB, IC
  501 FORMAT (3I5)
C IA, IB, AND IC MAY NOT BE NEGATIVE OR ZERO
C FURTHERMORE, THE SUM OF TWO SIDES OF A TRIANGLE
C MUST BE GREATER THAN THE THIRD SIDE, SO WE CHECK FOR THAT, TOO
      IF (IA) 777, 777, 701
  701 IF (IB) 777, 777, 702
  702 IF (IC) 777, 777, 703
  703 IF (IA+IB-IC) 777, 777, 704
  704 IF (IA+IC-IB) 777, 777, 705
  705 IF (IB+IC-IA) 777, 777, 799
  777 STOP 1
C USING HERON'S FORMULA WE CALCULATE THE
C AREA OF THE TRIANGLE
  799 S = FLOATF (IA + IB + IC) / 2.0
      AREA = SQRTF( S * (S - FLOATF(IA)) * (S - FLOATF(IB)) *
     +     (S - FLOATF(IC)))
      WRITE OUTPUT TAPE 6, 601, IA, IB, IC, AREA
  601 FORMAT (4H A= ,I5,5H  B= ,I5,5H  C= ,I5,8H  AREA= ,F10.2,
     +        13H SQUARE UNITS)
      STOP
      END
&lt;/syntaxhighlight&gt;

===FORTRAN III===
[[File:FortranCodingForm.png|thumb|right|300px|A reproduction of a FORTRAN coding form, printed on paper and intended to be used by programmers to prepare programs for punching onto cards by [[keypunch]] operators. Now obsolete.]]
IBM also developed a ''FORTRAN III'' in 1958 that allowed for [[inline assembler|inline assembly]] code among other features; however, this version was never released as a product.  Like the 704 FORTRAN and FORTRAN II, FORTRAN III included machine-dependent features that made code written in it unportable from machine to machine.&lt;ref name="history-fortran-i-ii-333"/&gt;{{rp|76}}  Early versions of FORTRAN provided by other vendors suffered from the same disadvantage.

===IBM 1401 FORTRAN===
FORTRAN was provided for the [[IBM 1401]] computer by an innovative 63-phase compiler that ran entirely in its [[Magnetic core memory|core memory]] of only 8000 (six-bit) characters.  The compiler could be run from tape, or from a 2200-card deck; it used no further tape or disk storage.  It kept the program in memory and loaded [[Overlay (programming)|overlays]] that gradually transformed it, in place, into executable form, as described by Haines.&lt;ref&gt;{{cite journal
| first = L. H.
| last = Haines
| title = Serial compilation and the 1401 FORTRAN compiler
| journal = IBM Systems Journal
| volume = 4
| issue = 1
| year = 1965
| pages = 73–80
| url = http://domino.research.IBM.com/tchjr/journalindex.nsf/495f80c9d0f539778525681e00724804/cde711e5ad6786e485256bfa00685a03?OpenDocument
| doi = 10.1147/sj.41.0073
}}&lt;/ref&gt; 
This article was reprinted, edited, in both editions of ''Anatomy of a Compiler'' &lt;ref&gt;{{cite book | first = John A. N. | last = Lee | title = Anatomy of a Compiler | publisher = Van Nostrand Reinhold | date = 1967}}&lt;/ref&gt; and in the IBM manual "Fortran Specifications and Operating Procedures, IBM 1401".&lt;ref&gt;{{cite book|title=Fortran Specifications and Operating Procedures, IBM 1401|url=http://bitsavers.org/pdf/ibm/1401/C24-1455-2_Fortran_Specifications_and_Operating_Procedures_Apr65.pdf|publisher=IBM|id=C24-1455-2}}&lt;/ref&gt;  The executable form was not entirely [[machine language]]; rather, floating-point arithmetic, sub-scripting, input/output, and function references were interpreted, preceding [[UCSD Pascal]] [[P-code machine#UCSD p-Machine|P-code]] by two decades.

IBM later provided a FORTRAN IV compiler for the 1400 series of computers.&lt;ref&gt;{{cite book|title=Fortran IV Language Specifications, Program Specifications, and Operating Procedures, IBM 1401, 1440, and 1460|url=http://bitsavers.org/pdf/ibm/1401/C24-3322-2_Fortran_IV_Language_Specifications_IBM_1401_1440_1460_Apr66.pdf|date=April 1966|publisher=IBM|id=C24-3322-2}}&lt;/ref&gt;

===FORTRAN IV===
IBM began development of FORTRAN IV starting in 1961, as a result of customer demands. ''FORTRAN IV'' removed the machine-dependent features of FORTRAN II (such as {{code|READ INPUT TAPE}}), while adding new features such as a [[Boolean data type|{{code|LOGICAL}} data type]], logical [[Boolean expression]]s and the ''logical IF statement'' as an alternative to the ''arithmetic IF statement.''  FORTRAN IV was eventually released in 1962, first for the [[IBM 7030 Stretch|IBM 7030]] ("Stretch") computer, followed by versions for the [[IBM 7090]], [[IBM 7090|IBM 7094]], and later for the [[IBM 1401]] in 1966.

By 1965, FORTRAN IV was supposed to be compliant with the ''standard'' being developed by the [[American National Standards Institute|American Standards Association]] X3.4.3 FORTRAN Working Group.&lt;ref name="McCracken"&gt;{{cite book|last=McCracken|first=Daniel D.|title=A Guide to FORTRAN IV Programming|chapter-url=https://archive.org/details/guidetofortraniv00mccr|chapter-url-access=registration|year=1965|publisher=Wiley|location=New York|isbn=978-0-471-58281-6|page=v|chapter=Preface}}&lt;/ref&gt;

Between 1966 and 1968, IBM offered several FORTRAN IV compilers for its  [[IBM System/360|System/360]], each named by letters that indicated the minimum amount of memory the complier needed to run.
&lt;ref&gt;{{cite web
| url = http://www.fortran.bcs.org/2007/jubilee/implementations.php 
| title = List of FORTRAN Implementations 1957 - 1967
| publisher = IEEE Annals
| year = 2017
| accessdate = 2017-10-17
}}&lt;/ref&gt;
The letters (F, G, H) matched the codes used with System/360 model numbers to indicate memory size, each letter increment being a factor of two larger:&lt;ref&gt;{{cite book|url=http://bitsavers.org/pdf/ibm/360/funcChar/A22-6898-1_360-50_funcChar_1967.pdf|title=IBM System/360 Model 50 Functional Characteristics|publisher=IBM|year=1967|id=A22-6898-1}}&lt;/ref&gt;{{rp|p. 5}}
* 1966 : FORTRAN IV F for DOS/360 (64K bytes)
* 1966 : FORTRAN IV G for OS/360 (128K bytes)
* 1968 : FORTRAN IV H for OS/360 (256K bytes)

At about this time FORTRAN IV had started to become an important educational tool and implementations such as the University of Waterloo's WATFOR and [[WATFIV]] were created to simplify the complex compile and link processes of earlier compilers.

===FORTRAN 66===
Perhaps the most significant development in the early history of FORTRAN was the decision by the ''American Standards Association'' (now [[American National Standards Institute]] (ANSI)) to form a committee sponsored by BEMA, the Business Equipment Manufacturers Association, to develop an ''American Standard Fortran''.  The resulting two standards, approved in March 1966, defined two languages, ''FORTRAN'' (based on FORTRAN IV, which had served as a de facto standard), and ''Basic FORTRAN'' (based on FORTRAN II, but stripped of its machine-dependent features).  The FORTRAN defined by the first standard, officially denoted X3.9-1966, became known as ''FORTRAN 66'' (although many continued to term it FORTRAN IV, the language on which the standard was largely based).  FORTRAN 66 effectively became the first industry-standard version of FORTRAN. FORTRAN 66 included:

* Main program, {{code|SUBROUTINE}}, {{code|FUNCTION}}, and {{code|BLOCK DATA}} program units
* {{code|INTEGER}}, {{code|REAL}}, {{code|DOUBLE PRECISION}}, {{code|COMPLEX}}, and {{code|LOGICAL}} [[data type]]s
* {{code|COMMON}}, {{code|DIMENSION}}, and {{code|EQUIVALENCE}} statements
* {{code|DATA}} statement for specifying initial values
* [[Intrinsic function|Intrinsic]] and {{code|EXTERNAL}} (e.g., library) functions
* Assignment statement
* {{code|GO TO}}, computed {{code|GO TO}}, assigned {{code|GO TO}}, and {{code|ASSIGN}} statements
* Logical {{code|IF}} and arithmetic (three-way) {{code|IF}} statements
* {{code|DO}} loop statement
* {{code|READ}}, {{code|WRITE}}, {{code|BACKSPACE}}, {{code|REWIND}}, and {{code|ENDFILE}} statements for sequential I/O
* {{code|FORMAT}} statement and assigned format
* {{code|CALL}}, {{code|RETURN}}, {{code|PAUSE}}, and {{code|STOP}} statements
* [[Hollerith constant]]s in {{code|DATA}} and {{code|FORMAT}} statements, and as arguments to procedures
* Identifiers of up to six characters in length
* Comment lines
* {{code|END}} line

===FORTRAN 77===
[[File:Ftn-elim-1240x1709.jpg|thumb|FORTRAN-77 program with compiler output, written on a
[[Control Data Corporation|CDC]] [[CDC Cyber|175]] at [[RWTH Aachen University]], Germany, in 1987]]
[[File:4.3 BSD UWisc VAX Emulation f77 Manual.png|thumb|[[4.3BSD|4.3 BSD]] for the [[Digital Equipment Corporation]] (DEC) [[VAX]], displaying the [[man page|manual]] for FORTRAN 77 (f77) compiler]]
After the release of the FORTRAN 66 standard, compiler vendors introduced several extensions to ''Standard Fortran'', prompting ANSI committee X3J3 in 1969 to begin work on revising the 1966 standard, under sponsorship of [[CBEMA]], the Computer Business Equipment Manufacturers Association (formerly BEMA).  Final drafts of this revised standard circulated in 1977, leading to formal approval of the new FORTRAN standard in April 1978.  The new standard, called ''FORTRAN 77'' and officially denoted X3.9-1978, added a number of significant features to address many of the shortcomings of FORTRAN 66:

* Block {{code|IF}} and {{code|END IF}} statements, with optional {{code|ELSE}} and {{code|ELSE IF}} clauses, to provide improved language support for [[structured programming]]
* {{code|DO}} loop extensions, including parameter expressions, negative increments, and zero trip counts
* {{code|OPEN}}, {{code|CLOSE}}, and {{code|INQUIRE}} statements for improved I/O capability
* Direct-access file I/O
* {{code|IMPLICIT}} statement, to override implicit conventions that undeclared variables are INTEGER if their name begins with I, J, K, L, M, or N (and REAL otherwise)
* {{code|CHARACTER}} data type, replacing Hollerith strings with vastly expanded facilities for character input and output and processing of character-based data
* {{code|PARAMETER}} statement for specifying constants
* {{code|SAVE}} statement for persistent local variables
* Generic names for intrinsic functions (e.g. {{code|SQRT}} also accepts arguments of other types, such as {{code|COMPLEX}} or {{code|REAL*16}}).
* A set of intrinsics ({{code|LGE, LGT, LLE, LLT}}) for &lt;U&gt;lexical&lt;/U&gt; comparison of strings, based upon the [[ASCII]] [[collating sequence]]. (These ASCII functions were demanded by the [[United States Department of Defense|U.S. Department of Defense]], in their conditional approval vote.{{Citation needed|date=October 2011}})

In this revision of the standard, a number of features were removed or altered in a manner that might invalidate formerly standard-conforming programs.
''(Removal was the only allowable alternative to X3J3 at that time, since the concept of "[[deprecation]]" was not yet available for ANSI standards.)''
While most of the 24 items in the conflict list (see Appendix A2 of X3.9-1978) addressed loopholes or pathological cases permitted by the prior standard but rarely used, a small number of specific capabilities were deliberately removed, such as:

* [[Hollerith constant]]s and [[Herman Hollerith|Hollerith]] data, such as &lt;syntaxhighlight lang="fortran" inline&gt;      GREET = 12HHELLO THERE!&lt;/syntaxhighlight&gt;
* Reading into an H edit (Hollerith field) descriptor in a FORMAT specification
* Overindexing of array bounds by subscripts &lt;syntaxhighlight lang="fortranfixed"&gt;
      DIMENSION A(10,5)
      Y=  A(11,1)
&lt;/syntaxhighlight&gt;
* Transfer of control out of and back into the range of a DO loop (also known as "Extended Range")

====Variants: Minnesota FORTRAN====
[[Control Data Corporation]] computers had another version of FORTRAN 77, called Minnesota FORTRAN (MNF), designed especially for student use, with variations in output constructs, special uses of COMMON and DATA statements, optimization code levels for compiling, detailed error listings, extensive warning messages, and debugging features.&lt;ref&gt;{{cite web|url=http://www.chilton-computing.org.uk/acd/literature/reports/p008.htm|title=FORTRAN Compilers and Loaders|publisher=Chilton-programming.org.uk|accessdate=19 November 2014}}&lt;/ref&gt;  MNF was developed by people (Liddiard &amp; Mundstock) at the [[University of Minnesota]]. &lt;ref&gt;{{cite journal|journal=Communications of the ACM|last=Frisch|first=Michael|title=Remarks on Algorithms|date=Dec 1972|volume=15|issue=12|page=1074|doi=10.1145/361598.361914}}&lt;/ref&gt;  MNF was available basically for free.

===Transition to ANSI Standard Fortran===
The development of a revised standard to succeed FORTRAN 77 would be repeatedly delayed as the standardization process struggled to keep up with rapid changes in computing and programming practice.  In the meantime, as the "Standard FORTRAN" for nearly fifteen years, FORTRAN 77 would become the historically most important dialect.

An important practical extension to FORTRAN 77 was the release of MIL-STD-1753 in 1978.&lt;ref&gt;{{cite book
  | last = Mil-std-1753
  | title = DoD Supplement to X3.9-1978
  | publisher = [[United States Government Printing Office]]
  | url = http://www.fortran.com/fortran/mil_std_1753.html
  | access-date = 13 December 2007
  | archive-url = https://web.archive.org/web/20071109170658/http://www.fortran.com/fortran/mil_std_1753.html
  | archive-date = 9 November 2007
  | url-status = dead
  }}&lt;/ref&gt; This specification, developed by the [[United States Department of Defense|U.S. Department of Defense]], standardized a number of features implemented by most FORTRAN 77 compilers but not included in the ANSI FORTRAN 77 standard. These features would eventually be incorporated into the Fortran 90 standard.

* {{code|DO WHILE}}, {{code|EXIT}}, {{code|CYCLE}},  and {{code|END DO}} statements
* {{code|INCLUDE}} statement
* {{code|IMPLICIT NONE}} variant of the {{code|IMPLICIT}} statement
* [[Bit manipulation]] intrinsic functions, based on similar functions included in [[Industrial Real-Time Fortran|Industrial Real-Time Fortran (ANSI/ISA S61.1 (1976))]]

The [[Institute of Electrical and Electronics Engineers|IEEE]] 1003.9 [[POSIX]] Standard, released in 1991, provided a simple means for FORTRAN 77 programmers to issue POSIX system calls.&lt;ref&gt;{{cite book
 |title        = IEEE 1003.9-1992 - IEEE Standard for InformationTechnology - POSIX(R) FORTRAN 77 Language Interfaces - Part 1: Binding for System Application Program Interface (API)
 |url          = https://standards.ieee.org/standard/1003_9-1992.html
 |publisher    = [[IEEE]]
 |accessdate   = 24 November 2018
}}&lt;/ref&gt; Over 100 calls were defined in the document{{snd}} allowing access to POSIX-compatible process control, signal handling, file system control, device control, procedure pointing, and stream I/O in a portable manner.

===Fortran 90===
The much-delayed successor to FORTRAN 77, informally known as ''Fortran 90'' (and prior to that, ''Fortran 8X''), was finally released as ISO/IEC standard 1539:1991 in 1991 and an ANSI Standard in 1992.  In addition to changing the official spelling from FORTRAN to Fortran, this major revision added many new features to reflect the significant changes in programming practice that had evolved since the 1978 standard:

* [[free-form language|Free-form source input]], also with lowercase Fortran keywords
* Identifiers up to 31 characters in length (In the previous standard, it was only six characters).
* Inline comments
* Ability to operate on arrays (or array sections) as a whole, thus greatly simplifying math and engineering computations.
** whole, partial and masked array assignment statements and array expressions, such as &lt;syntaxhighlight lang="fortran" inline&gt;X(1:N)=R(1:N)*COS(A(1:N))&lt;/syntaxhighlight&gt;
** {{code|WHERE}} statement for selective array assignment
** array-valued constants and expressions,
** user-defined array-valued functions and array constructors.
* [[recursion (computer science)|{{code|RECURSIVE}}]] procedures
* [[Modular programming|Modules]], to group related [[Subroutine|procedures]] and data together, and make them available to other program units, including the capability to limit the accessibility to only specific parts of the module.
* A vastly improved argument-passing mechanism, allowing [[type signature|interfaces]] to be checked at compile time
* User-written interfaces for generic procedures
* [[Operator overloading]]
* Derived (structured) data types
* New data type declaration syntax, to specify the data type and other attributes of variables
* [[Dynamic memory allocation]] by means of the {{code|ALLOCATABLE}} attribute and the {{code|ALLOCATE}} and {{code|DEALLOCATE}} statements
* [[Pointer (computer programming)|{{code|POINTER}}]] attribute, pointer assignment, and {{code|NULLIFY}} statement to facilitate the creation and manipulation of dynamic [[data structure]]s
* Structured looping constructs, with an {{code|END DO}} statement for loop termination, and {{code|EXIT}} and {{code|CYCLE}} statements for terminating normal {{code|DO}} loop iterations in an orderly way
* {{code|SELECT}} . . . {{code|CASE}} construct for multi-way selection
* Portable specification of numerical precision under the user's control
* New and enhanced intrinsic procedures.

====Obsolescence and deletions====
Unlike the prior revision, Fortran 90 removed no features.&lt;ref&gt;Appendix B.1&lt;/ref&gt; Any standard-conforming FORTRAN 77 program is also standard-conforming under Fortran 90, and either standard should be usable to define its behavior.

A small set of features were identified as "obsolescent" and expected to be removed in a future standard.  All of the functionalities of these early version features are performed by new Fortran 95 features.  Some are kept to simplify porting of old programs but may eventually be deleted.
{| class="wikitable"
|-
! Obsolescent feature
! Example
! Status/fate in Fortran 95
|-
| Arithmetic IF-statement
| &lt;syntaxhighlight lang="fortranfixed"&gt;
      IF (X) 10, 20, 30
&lt;/syntaxhighlight&gt;
| Deprecated
|-
| Non-integer DO parameters or control variables
| &lt;syntaxhighlight lang="fortranfixed"&gt;
      DO 9 X= 1.7, 1.6, -0.1
&lt;/syntaxhighlight&gt;
| Deleted
|-
| Shared DO-loop termination or &lt;br /&gt;termination with a statement &lt;br /&gt;other than END DO or CONTINUE &amp;nbsp;
| &lt;syntaxhighlight lang="fortranfixed"&gt;
      DO 9 J= 1, 10
          DO 9 K= 1, 10
  9       L=  J + K
&lt;/syntaxhighlight&gt;
| Deprecated
|-
| Branching to END IF &lt;br /&gt;
from outside a block
| &lt;syntaxhighlight lang="fortranfixed"&gt;
 66   GO TO 77 ; . . .
      IF (E) THEN ;     . . .
 77   END IF
&lt;/syntaxhighlight&gt;
| Deleted
|-
| Alternate return
| &lt;syntaxhighlight lang="fortranfixed"&gt;
      CALL SUBR( X, Y, *100, *200 )
&lt;/syntaxhighlight&gt;
| Deprecated
|-
|    PAUSE statement
| &lt;syntaxhighlight lang="fortranfixed"&gt;
      PAUSE 600
&lt;/syntaxhighlight&gt;
| Deleted
|-
|    ASSIGN statement &lt;br /&gt; &amp;nbsp; and assigned GO TO statement
| &lt;syntaxhighlight lang="fortranfixed"&gt;
 100   . . .
      ASSIGN 100 TO H
       . . .
      GO TO H . . .
&lt;/syntaxhighlight&gt;
| Deleted
|-
| Assigned statement numbers and FORMAT specifiers
| &lt;syntaxhighlight lang="fortranfixed"&gt;
      ASSIGN 606 TO F ... WRITE ( 6, F )...
&lt;/syntaxhighlight&gt;
| Deleted
|-
| H edit descriptors
| &lt;syntaxhighlight lang="fortranfixed"&gt;
 606  FORMAT ( 9H1GOODBYE. )
&lt;/syntaxhighlight&gt;
| Deleted
|-
| Computed GO TO statement
| &lt;syntaxhighlight lang="fortranfixed"&gt;
      GO TO (10, 20, 30, 40), index
&lt;/syntaxhighlight&gt;
| (obsolete)
|-
| Statement functions
| &lt;syntaxhighlight lang="fortranfixed"&gt;
      FOIL( X, Y )=  X**2 + 2*X*Y + Y**2
&lt;/syntaxhighlight&gt;
| (obsolete)
|-
| DATA statements &lt;br /&gt; &amp;nbsp; among executable statements
| &lt;syntaxhighlight lang="fortranfixed"&gt;
      X= 27.3
      DATA  A, B, C  / 5.0, 12.0, 13.0 /
      . . .
&lt;/syntaxhighlight&gt;
| (obsolete)
|-
| CHARACTER* form of CHARACTER declaration
| &lt;syntaxhighlight lang="fortranfixed"&gt;
      CHARACTER*8 STRING   ! Use CHARACTER(8)
&lt;/syntaxhighlight&gt;
| (obsolete)
|-
| Assumed character length functions
| &lt;syntaxhighlight lang="fortranfixed"&gt;
      CHARACTER*(*) STRING
&lt;/syntaxhighlight&gt;
| (obsolete)&lt;ref name="assume"&gt;{{cite web|title=Declaration Statements for Character Types|url=http://h30266.www3.hpe.com/odl/unix/progtool/cf95au56/lrm0085.htm|work=Compaq Fortran Language Reference Manual|publisher=Compaq Computer Corporation|location=Texas, Huston, US|year=1999|quote=The form CHARACTER*(*) is an obsolescent feature in Fortran 95.|accessdate=17 September 2018}}&lt;/ref&gt;
|-
| Fixed form source code
| Column 1 contains C or * or ! for comments.&lt;br /&gt; Columns 1 through 5 for statement numbers&lt;br /&gt; Any character in column 6 for continuation.&lt;br /&gt; Columns 73 and up ignored
| (obsolete)
|}

===="Hello, World!" example====
&lt;syntaxhighlight lang="fortran"&gt;
program helloworld
     print *, "Hello, World!"
end program helloworld 
&lt;/syntaxhighlight&gt;

===Fortran 95===
{{Redirect|F95|the Düsseldorf-based football club|Fortuna Düsseldorf}}
{{main|Fortran 95 language features}}
''Fortran 95'', published officially as ISO/IEC 1539-1:1997, was a minor revision, mostly to resolve some outstanding issues from the Fortran 90 standard.  Nevertheless, Fortran 95 also added a number of extensions, notably from the [[High Performance Fortran]] specification:

* {{code|FORALL}} and nested {{code|WHERE}} constructs to aid vectorization
* User-defined {{code|PURE}} and {{code|ELEMENTAL}} procedures
* Default initialization of derived type components, including pointer initialization
* Expanded the ability to use initialization expressions for data objects
* Initialization of pointers to {{code|NULL()}}
* Clearly defined that {{code|ALLOCATABLE}} arrays are automatically deallocated when they go out of scope.

A number of intrinsic functions were extended (for example a {{code|dim}} argument was added to the {{code|maxloc}} intrinsic).

Several features noted in Fortran 90 to be "obsolescent" were removed from Fortran 95:

* {{code|DO}} statements using {{code|REAL}} and {{code|DOUBLE PRECISION}} index variables
* Branching to an {{code|END IF}} statement from outside its block
* {{code|PAUSE}} statement
* {{code|ASSIGN}} and assigned {{code|GO TO}} statement, and assigned format specifiers
* {{code|H}} Hollerith edit descriptor.

An important supplement to Fortran 95 was the [[International Organization for Standardization|ISO technical report]] ''TR-15581: Enhanced Data Type Facilities'', informally known as the ''Allocatable TR.''  This specification defined enhanced use of {{code|ALLOCATABLE}} arrays, prior to the availability of fully Fortran 2003-compliant Fortran compilers.  Such uses include {{code|ALLOCATABLE}} arrays as derived type components, in procedure dummy argument lists, and as function return values.  ({{code|ALLOCATABLE}} arrays are preferable to {{code|POINTER}}-based arrays because {{code|ALLOCATABLE}} arrays are guaranteed by Fortran 95 to be deallocated automatically when they go out of scope, eliminating the possibility of [[memory leak]]age.  In addition, elements of allocatable arrays are contiguous, and [[aliasing (computing)|aliasing]] is not an issue for optimization of array references, allowing compilers to generate faster code than in the case of pointers.&lt;ref&gt;{{cite web|title=Fortran 95 Reference|url=https://gcc.gnu.org/onlinedocs/gcc-4.1.0/gfortran/|publisher=Gnu.Org|accessdate=10 May 2014}}&lt;/ref&gt;)

Another important supplement to Fortran 95 was the [[International Organization for Standardization|ISO]] technical report ''TR-15580: Floating-point exception handling'', informally known as the ''IEEE TR.''  This specification defined support for [[IEEE 754-2008|IEEE floating-point arithmetic]] and [[floating point]] [[exception handling]].

====Conditional compilation and varying length strings====
In addition to the mandatory "Base language"
(defined in ISO/IEC 1539-1 : 1997),
the Fortran 95 language also includes two optional modules:
* Varying length character strings (ISO/IEC 1539-2 : 2000)
* Conditional compilation (ISO/IEC 1539-3 : 1998)
which, together, compose the multi-part International Standard (ISO/IEC 1539).

According to the standards developers, "the optional parts describe self-contained features which have been requested by a substantial body of users and/or implementors, but which are not deemed to be of sufficient generality for them to be required in all standard-conforming Fortran compilers." Nevertheless, if a standard-conforming Fortran does provide such options, then they "must be provided in accordance with the description of those facilities in the appropriate Part of the Standard".

===Fortran 2003===
''Fortran 2003,'' officially published as ISO/IEC 1539-1:2004, is a major revision introducing many new features.&lt;ref&gt;{{cite web|title=Fortran 2003– Last Working Draft|url=http://www.j3-fortran.org/doc/year/04/04-007.txt|publisher=Gnu.Org|accessdate=10 May 2014}}&lt;/ref&gt; A comprehensive summary of the new features of Fortran 2003 is available at the Fortran Working Group (ISO/IEC JTC1/SC22/WG5) official Web site.&lt;ref&gt;[http://www.nag.co.uk/sc22wg5/ Fortran Working Group (WG5)]. It may also be downloaded as a [https://wg5-fortran.org/N1551-N1600/N1579.pdf PDF file], FTP.nag.co.uk&lt;/ref&gt;

From that article, the major enhancements for this revision include:

* Derived type enhancements: parameterized derived types, improved control of accessibility, improved structure constructors, and finalizers
* [[Object-oriented programming]] support: [[inheritance (computer science)|type extension and inheritance]], [[Type polymorphism|polymorphism]], dynamic type allocation, and type-bound procedures, providing complete support for [[abstract data type]]s
* Data manipulation enhancements: allocatable components (incorporating TR 15581), deferred type parameters, [[volatile variable|{{code|VOLATILE}} attribute]], explicit type specification in array constructors and allocate statements, pointer enhancements, extended initialization expressions, and enhanced intrinsic procedures
* Input/output enhancements: [[Asynchronous I/O|asynchronous]] transfer, stream access, user specified transfer operations for derived types, user specified control of rounding during format conversions, named constants for preconnected units, the {{code|FLUSH}} statement, regularization of keywords, and access to error messages
* [[Function pointer|Procedure pointers]]
* Support for [[IEEE 754-2008|IEEE floating-point arithmetic]] and [[floating point]] [[exception handling]] (incorporating TR 15580)
* Interoperability with the C programming language
* Support for international usage: access to [[Universal Character Set|ISO 10646]] 4-byte characters and choice of decimal or comma in numeric formatted input/output
* Enhanced integration with the host operating system: access to [[command-line interface|command line]] arguments, [[environment variable]]s, and processor error messages

An important supplement to Fortran 2003 was the [[International Organization for Standardization|ISO technical report]] ''TR-19767: Enhanced module facilities in Fortran.''  This report provided ''sub-modules,'' which make Fortran modules more similar to [[Modula-2]] modules.  They are similar to [[Ada (programming language)|Ada]] private child sub-units.  This allows the specification and implementation of a module to be expressed in separate program units, which improves packaging of large libraries, allows preservation of trade secrets while publishing definitive interfaces, and prevents compilation cascades.

===Fortran 2008===
ISO/IEC 1539-1:2010, informally known as Fortran 2008, was approved in September 2010.&lt;ref&gt;{{cite web|title=N1836, Summary of Voting/Table of Replies on ISO/IEC FDIS 1539-1, Information technology – Programming languages – Fortran – Part 1: Base language|url=https://wg5-fortran.org/N1801-N1850/N1836.pdf}}&lt;/ref&gt;&lt;ref&gt;{{cite web|title=Fortran 2008 – Last Working Draft|url=http://www.j3-fortran.org/doc/year/10/10-007.pdf|publisher=Gnu.Org|accessdate=10 May 2014}}&lt;/ref&gt;   As with Fortran 95, this is a minor upgrade, incorporating clarifications and corrections to Fortran 2003, as well as introducing some new capabilities.  The new capabilities include:

* Sub-modules—additional structuring facilities for modules; supersedes ISO/IEC TR 19767:2005
* [[Coarray Fortran]]—a parallel execution model
* The [[Scalable parallelism|DO CONCURRENT]] construct—for loop iterations with no interdependencies
* The CONTIGUOUS attribute—to specify storage layout restrictions
* The [[Dynamic scoping|BLOCK construct]]—can contain declarations of objects with construct scope
* [[Recursive data type|Recursive allocatable components]]—as an alternative to recursive pointers in derived types

The Final Draft international Standard (FDIS) is available as document N1830.&lt;ref&gt;N1830, Information technology – Programming languages – Fortran – Part 1: Base language [ftp://ftp.nag.co.uk/sc22wg5/N1801-N1850/N1830.pdf]{{dead link|date=January 2016}}&lt;/ref&gt;

A supplement to Fortran 2008 is the [[International Organization for Standardization]] (ISO) Technical Specification (TS) 29113 on ''Further Interoperability of Fortran with C'',&lt;ref&gt;ISO page to [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=45136 ISO/IEC DTS 29113, Further Interoperability of Fortran with C]&lt;/ref&gt;&lt;ref&gt;{{cite web|url=https://wg5-fortran.org/N1901-N1950/N1917.pdf|title=Draft of the Technical Specification (TS) 29113|website=wg5-fortran.org}}&lt;/ref&gt; which has been submitted to ISO in May 2012 for approval. The specification adds support for accessing the array descriptor from C and allows ignoring the type and rank of arguments.

===Fortran 2018===
The latest revision of the language (Fortran 2018) was earlier referred to as Fortran 2015.&lt;ref name="Fortran2018name"&gt;{{cite web|url=https://software.intel.com/en-us/blogs/2017/11/20/doctor-fortran-in-eighteen-is-the-new-fifteen|title=Doctor Fortran in "Eighteen is the new Fifteen"|publisher=Software.intel.com|accessdate=20 November 2017}}&lt;/ref&gt; It is a significant revision and was released on November 28, 2018.&lt;ref name="F2018"&gt;{{cite web|url=https://wg5-fortran.org/f2018.html|publisher=ISO|title=Fortran 2018|accessdate=30 November 2018}}&lt;/ref&gt;

Fortran 2018 incorporates two previously published Technical Specifications:

* ISO/IEC TS 29113:2012 Further Interoperability with C&lt;ref name="TS29113"&gt;{{cite web|url=https://wg5-fortran.org/N1901-N1950/N1942.pdf|title=Further Interoperability with C|publisher=ISO|accessdate=20 November 2017}}&lt;/ref&gt;
* ISO/IEC TS 18508:2015 Additional Parallel Features in Fortran&lt;ref name="TS18508"&gt;{{cite web|url=http://isotc.iso.org/livelink/livelink?func=ll&amp;objId=17288706&amp;objAction=Open|title=Additional Parallel Features in Fortran|publisher=ISO|accessdate=20 November 2017}}&lt;/ref&gt;

Additional changes and new features include support for ISO/IEC/IEEE 60559:2011 (the version of the [[IEEE 754|IEEE floating point standard]] before the latest minor revision IEEE 754-2019), hexadecimal input/output, IMPLICIT NONE enhancements and other changes.&lt;ref name="F2015newfeat"&gt;{{cite web|url=http://isotc.iso.org/livelink/livelink?func=ll&amp;objId=19044944&amp;objAction=Open|publisher=ISO|title=The New Features of Fortran 2015|accessdate=23 June 2017}}&lt;/ref&gt;&lt;ref name="Fortran2015Closes"&gt;{{cite web|url=https://software.intel.com/en-us/blogs/2015/09/04/doctor-fortran-in-one-door-closes|title=Doctor Fortran in "One Door Closes"|publisher=Software.intel.com|accessdate=21 September 2015}}&lt;/ref&gt;&lt;ref name="Fortran2015"&gt;{{cite web|url=http://software.intel.com/en-us/blogs/2013/08/08/doctor-fortran-goes-dutch-fortran-2015|title=Doctor Fortran Goes Dutch: Fortran 2015|publisher=Software.intel.com|accessdate=19 November 2014}}&lt;/ref&gt;&lt;ref&gt;[http://j3-fortran.org/doc/year/18/18-007r1.pdf Fortran 2018 Interpretation Document], 9 October 2018&lt;/ref&gt;

==Science and engineering==
Although a 1968 journal article by the authors of [[BASIC]] already described FORTRAN as "old-fashioned",&lt;ref name="dtss196810"&gt;{{cite journal | url=http://dtss.dartmouth.edu/sciencearticle/index.html | title=Dartmouth Time-Sharing |author1=Kemeny, John G. |author2=Kurtz, Thomas E. | journal=Science | date=11 October 1968 | volume=162 | issue=3850 | pages=223–228| doi=10.1126/science.162.3850.223 | pmid=5675464 | bibcode=1968Sci...162..223K }}&lt;/ref&gt; Fortran has now been in use for several decades and there is a vast body of Fortran software in daily use throughout the scientific and engineering communities.&lt;ref&gt;{{cite web|last=Phillips|first=Lee|title=Scientific computing's future: Can any coding language top a 1950s behemoth?|url=https://arstechnica.com/science/2014/05/scientific-computings-future-can-any-coding-language-top-a-1950s-behemoth/|website=Ars Technica|accessdate=8 May 2014}}&lt;/ref&gt; [[Jay Pasachoff]] wrote in 1984 that "physics and astronomy students simply have to learn FORTRAN.  So much exists in FORTRAN that it seems unlikely that scientists will change to Pascal, Modula-2, or whatever."&lt;ref name="pasachoff198404"&gt;{{cite news | url=https://archive.org/stream/byte-magazine-1984-04/1984_04_BYTE_09-04_Real-World_Interfacing#page/n403/mode/2up | title=Scientists: FORTRAN vs. Modula-2 | work=BYTE | date=April 1984 | accessdate=6 February 2015 | author=Pasachoff, Jay M. | authorlink=Jay Pasachoff | pages=404 | type=letter}}&lt;/ref&gt; In 1993, [[Cecil E. Leith]] called FORTRAN the "mother tongue of scientific computing", adding that its replacement by any other possible language "may remain a forlorn hope".&lt;ref name="Galperin"&gt;{{cite book|last=Galperin|first=Boris|title=Large Eddy Simulation of Complex Engineering and Geophysical Flows|year=1993|publisher=Cambridgey|location=London|isbn=978-0-521-43009-8|page=573|chapter=26}}&lt;/ref&gt;

It is the primary language for some of the most intensive [[Supercomputer|super-computing]] tasks, such as in [[astronomy]], [[climate model]]ing, computational chemistry, [[computational economics]], [[computational fluid dynamics]], [[computational physics]], data analysis, [[hydrological modeling]], numerical linear algebra and numerical libraries ([[LAPACK]], [[IMSL Numerical Libraries|IMSL]] and [[NAG Numerical Library|NAG]]), [[optimization]], satellite simulation, [[structural engineering]], and [[numerical weather prediction|weather prediction]].{{Citation needed|date=April 2019}}  Many of the floating-point benchmarks to gauge the performance of new computer processors, such as the floating-point components of the [[Standard Performance Evaluation Corporation|SPEC]] benchmarks (e.g., [http://www.spec.org/cpu2006/CFP2006/ CFP2006], [http://www.spec.org/cpu2017/Docs/overview.html#benchmarks CFP2017]) are written in Fortran.

Apart from this, more modern codes in computational science generally use large program libraries, such as [[METIS]] for graph partitioning, [[PETSc]] or [[Trilinos]] for linear algebra capabilities, [[Dune (software)|DUNE]] or [[FEniCS Project|FEniCS]] for mesh and finite element support, and other generic libraries.  Since the early 2000s, many of the widely used support libraries have also been implemented in [[C (programming language)|C]] and more recently, in [[C++]]. On the other hand, high-level languages such as [[MATLAB]], [[Python (programming language)|Python]], and [[R (programming language)|R]] have become popular in particular areas of computational science. Consequently, a growing fraction of scientific programs is also written in such higher-level scripting languages.  For this reason, [[foreign function interface|facilities for inter-operation with C]] were added to Fortran 2003 and enhanced by the ISO/IEC technical specification 29113, which was incorporated into Fortran 2018 to allow more flexible interoperation with other programming languages.

Software for NASA probes [[Voyager 1]] and [[Voyager 2]] was originally written in FORTRAN 5, and later ported to FORTRAN 77.  {{as of|2013|9|25}}, some of the software is still written in Fortran and some has been ported to C.&lt;ref&gt;{{Cite web| title = Interstellar 8-Track: How Voyager's Vintage Tech Keeps Running| work = WIRED| accessdate = 2017-12-23| url = https://www.wired.com/2013/09/vintage-voyager-probes/}}&lt;/ref&gt;

==Language features==
{{expand section|date=January 2018}}
The precise characteristics and syntax of Fortran 95 are discussed in [[Fortran 95 language features]].

==Portability==
[[Portability (computer science)|Portability]] was a problem in the early days because there was no agreed upon standard—not even IBM's reference manual—and computer companies vied to differentiate their offerings from others by providing incompatible features.  Standards have improved portability.  The 1966 standard provided a reference [[Syntax (programming languages)|syntax]] and semantics, but vendors continued to provide incompatible extensions.  Although careful programmers were coming to realize that use of incompatible extensions caused expensive portability problems, and were therefore using programs such as ''The PFORT Verifier,''&lt;ref&gt;{{cite journal |title=Methods to ensure the standardization of FORTRAN software
|quote=PFORT ... Library ...|osti=5361454
}}&lt;/ref&gt;&lt;ref name="PP4"&gt;{{cite book |title=A portable mathematical subroutine library
|volume=57
|pages=165–177
|author=P. A. Fox |date=1977
|quote=PORT ... written in (PFORT) .. ANS Fortran|doi=10.1007/3-540-08446-0_42
|chapter=Port — A portable mathematical subroutine library
|series=Lecture Notes in Computer Science
|isbn=978-3-540-08446-4
}}&lt;/ref&gt; it was not until after the 1977 standard, when the National Bureau of Standards (now [[National Institute of Standards and Technology|NIST]]) published ''FIPS PUB 69'', that processors purchased by the U.S. Government were required to diagnose extensions of the standard.  Rather than offer two processors, essentially every compiler eventually had at least an option to diagnose extensions.&lt;ref&gt;{{cite document  |date=1975 |title=A machine and configuration independent Fortran: Portable Fortran
|author=D. E. Whitten|doi=10.1109/TSE.1975.6312825 }}&lt;/ref&gt;&lt;ref&gt;{{cite web |title=Portability Issues
|url=https://www.gnu.org/software/sather/docs-1.2/tutorial/fortran-portability.html
|quote=.. discusses .. portability of .. Fortran}}&lt;/ref&gt;

Incompatible extensions were not the only portability problem.  For numerical calculations, it is important to take account of the characteristics of the arithmetic.  This was addressed by Fox et al. in the context of the 1966 standard by the ''PORT'' library.&lt;ref name=PP4/&gt;  The ideas therein became widely used, and were eventually incorporated into the 1990 standard by way of intrinsic inquiry functions.  The widespread (now almost universal) adoption of the [[IEEE 754-2008|IEEE 754]] standard for binary floating-point arithmetic has essentially removed this problem.

Access to the computing environment (e.g., the program's command line, environment variables, textual explanation of error conditions) remained a problem until it was addressed by the 2003 standard.

Large collections of library software that could be described as being loosely related to engineering and scientific calculations, such as graphics libraries, have been written in C, and therefore access to them presented a portability problem.  This has been addressed by incorporation of C interoperability into the 2003 standard.

It is now possible (and relatively easy) to write an entirely portable program in Fortran, even without recourse to a preprocessor.

==Variants==

===Fortran 5===
Fortran 5 was marketed by [[Data General]] Corp in the late 1970s and early 1980s, for the [[Data General Nova|Nova]], [[Data General Eclipse|Eclipse]], and [[Data General Eclipse MV/8000|MV]] line of computers.  It had an optimizing compiler that was quite good for minicomputers of its time.  The language most closely resembles FORTRAN 66.

===FORTRAN V===
FORTRAN V was distributed by [[Control Data Corporation]] in 1968 for the [[CDC 6600]] series. The language was based upon FORTRAN IV.&lt;ref name="FIV"&gt;{{cite web|url=http://hopl.murdoch.edu.au/showlanguage.prx?exp=1092&amp;language=CDC%20Fortran|title=Towards FORTRAN VI|last=Healy|first=MJR|year=1968|work=Advanced scientific Fortran by CDC|publisher=CDC|pages=169–172|accessdate=10 April 2009|archive-url=https://web.archive.org/web/20090705035806/http://hopl.murdoch.edu.au/showlanguage.prx?exp=1092&amp;language=CDC%20Fortran|archive-date=5 July 2009|url-status=dead|df=dmy-all}}&lt;/ref&gt;

Univac also offered a compiler for the 1100 series known as FORTRAN V.  A spinoff of Univac Fortran V was Athena FORTRAN.

===Fortran 6===
'''Fortran 6''' or Visual Fortran 2001 was licensed to [[Compaq]] by [[Microsoft]]. They have licensed Compaq Visual Fortran and have provided the Visual Studio 5 environment interface for [[Visual Studio 97|Compaq v6]] up to v6.1.&lt;ref&gt;{{cite web |url=http://www.cs-software.com/software/fortran/compaq/cvf_relnotes.html#61ver_news |title=third party release notes for Fortran v6.1 |date=15 March 2011|publisher=Cs-software.com|accessdate=19 November 2014}}&lt;/ref&gt;

===Specific variants===
Vendors of high-performance scientific computers (''e.g.,'' [[Burroughs Corporation|Burroughs]], [[Control Data Corporation]] (CDC), [[Cray]], [[Honeywell]], [[IBM]], [[Texas Instruments]], and [[UNIVAC]]) added extensions to Fortran to take advantage of special hardware features such as [[CPU cache|instruction cache]], CPU [[pipeline (computing)|pipelines]], and vector arrays.  For example, one of IBM's FORTRAN compilers (''H Extended IUP'') had a level of optimization which reordered the [[machine code]] [[instruction (computer science)|instructions]] to keep multiple internal arithmetic units busy simultaneously.  Another example is ''CFD'', a special variant of FORTRAN designed specifically for the [[ILLIAC IV]] supercomputer, running at [[NASA]]'s [[NASA Ames Research Center|Ames Research Center]].
IBM Research Labs also developed an extended FORTRAN-based language called ''VECTRAN'' for processing vectors and matrices.

[[Object-Oriented Fortran]] was an object-oriented extension of Fortran, in which data items can be grouped into objects, which can be instantiated and executed in parallel.  It was available for Sun, Iris, [[Intel iPSC|iPSC]], and nCUBE, but is no longer supported.

Such machine-specific extensions have either disappeared over time or have had elements incorporated into the main standards. The major remaining extension is [[OpenMP]], which is a cross-platform extension for shared memory programming.  One new extension, Coarray Fortran, is intended to support parallel programming.

====FOR TRANSIT for the IBM 650====
''FOR TRANSIT'' was the name of a reduced version of the IBM 704 FORTRAN language,
which was implemented for the IBM 650, using a translator program developed
at Carnegie in the late 1950s.&lt;ref&gt;"Internal Translator (IT) A Compiler for the IBM 650",
by A. J. Perlis, J. W. Smith, and H. R. Van Zoeren, Computation Center,
Carnegie Institute of Technology
&lt;/ref&gt;
The following comment appears in the IBM Reference Manual (''FOR TRANSIT Automatic Coding System'' C28-4038, Copyright 1957, 1959 by IBM):
&lt;blockquote&gt;The FORTRAN system was designed for a more complex machine than the 650, and consequently some of the 32 statements found in the FORTRAN Programmer's Reference Manual are not acceptable to the FOR TRANSIT system.  In addition, certain restrictions to the FORTRAN language have been added.  However, none of these restrictions make a source program written for FOR TRANSIT incompatible with the FORTRAN system for the 704.&lt;/blockquote&gt;

The permissible statements were:

* Arithmetic assignment statements, e.g., &lt;code&gt;a = b&lt;/code&gt;
* {{code|GO to n}}
* &lt;code&gt;GO TO (n&lt;sub&gt;1&lt;/sub&gt;, n&lt;sub&gt;2&lt;/sub&gt;, ..., n&lt;sub&gt;m&lt;/sub&gt;), i&lt;/code&gt;
* &lt;code&gt;IF (a) n&lt;sub&gt;1&lt;/sub&gt;, n&lt;sub&gt;2&lt;/sub&gt;, n&lt;sub&gt;3&lt;/sub&gt;&lt;/code&gt;
* {{code|PAUSE}}
* {{code|STOP}}
* &lt;code&gt;DO n i = m1, m2&lt;/code&gt;
* {{code|CONTINUE}}
* {{code|END}}
* {{code|READ n, list}}
* {{code|PUNCH n, list}}
* {{code|DIMENSION V, V, V, ...}}
* {{code|EQUIVALENCE (a,b,c), (d,c), ...}}

Up to ten subroutines could be used in one program.

FOR TRANSIT statements were limited to columns 7 through 56, only.
Punched cards were used for input and output on the IBM 650.  Three passes were required to translate source code to the "IT" language, then to compile the IT statements into SOAP assembly language, and finally to produce the object program, which could then be loaded into the machine to run the program (using punched cards for data input, and outputting results onto punched cards).

Two versions existed for the 650s with a 2000 word memory drum:  FOR TRANSIT I (S) and FOR TRANSIT II, the latter for machines equipped with indexing registers and automatic floating point decimal ([[Bi-quinary coded decimal|bi-quinary]]) arithmetic.  Appendix A of the manual included wiring diagrams for the [[IBM 533]] card reader/punch [[plugboard|control panel]].

===Fortran-based languages===
Prior to FORTRAN 77, a number of [[preprocessor]]s were commonly used to provide a friendlier language, with the advantage that the preprocessed code could be compiled on any machine with a standard FORTRAN compiler.  These preprocessors would typically support [[structured programming]], variable names longer than six characters, additional data types, [[conditional compilation]], and even [[Macro (computer science)|macro]] capabilities.  Popular preprocessors included [[FLECS]], [[iftran]], [[Mortran|MORTRAN]], [[SFtran]], [[S-Fortran]], [[Ratfor]], and [[Ratfiv]].  Ratfor and Ratfiv, for example, implemented a [[C (programming language)|C]]-like language, outputting preprocessed code in standard FORTRAN 66.  Despite advances in the Fortran language, preprocessors continue to be used for conditional compilation and macro substitution.

One of the earliest versions of FORTRAN, introduced in the '60s, was popularly used in colleges and universities.  Developed, supported, and distributed by the [[University of Waterloo]], [[WATFIV|WATFOR]] was based largely on FORTRAN IV.  A student using WATFOR could submit their batch FORTRAN job and, if there were no syntax errors, the program would move straight to execution.  This simplification allowed students to concentrate on their program's syntax and semantics, or execution logic flow, rather than dealing with submission [[Job Control Language]] (JCL), the compile/link-edit/execution successive process(es), or other complexities of the mainframe/minicomputer environment.  A down side to this simplified environment was that WATFOR was not a good choice for programmers needing the expanded abilities of their host processor(s), e.g., WATFOR typically had very limited access to I/O devices. WATFOR was succeeded by [[WATFIV]] and its later versions.

{{sxhl|2=fortran|1=program; s=0 i=1,n;  s=s+1;  stop i;  s='s'  Stop}}  (line programming)

[[LRLTRAN]] was developed at the [[Lawrence Radiation Laboratory]] to provide support for vector arithmetic and dynamic storage, among other extensions to support systems programming.  The distribution included the [[LTSS operating system]].

The Fortran-95 Standard includes an optional ''Part 3'' which defines an optional [[conditional compilation]] capability.  This capability is often referred to as "CoCo".

Many Fortran compilers have integrated subsets of the [[C preprocessor]] into their systems.

[[SIMSCRIPT]] is an application specific Fortran preprocessor for modeling and simulating large discrete systems.

The [[F (programming language)|F programming language]] was designed to be a clean subset of Fortran 95 that attempted to remove the redundant, unstructured, and deprecated features of Fortran, such as the {{code|EQUIVALENCE}} statement.  F retains the array features added in Fortran 90, and removes control statements that were made obsolete by structured programming constructs added to both FORTRAN 77 and Fortran 90.  F is described by its creators as "a compiled, structured, array programming language especially well suited to education and scientific computing".&lt;ref&gt;{{cite web | url=http://www.fortran.com/F/index.html | title= F Programming Language Homepage|publisher=Fortran.com|accessdate=19 November 2014}}&lt;/ref&gt;

Lahey and Fujitsu teamed up to create Fortran for the Microsoft [[.NET Framework]].&lt;ref&gt;{{cite web | url=http://www.lahey.com/lf71/lfnet.htm | title=Fortran for .NET Language System | url-status=dead | archiveurl=https://web.archive.org/web/20141018201259/http://www.lahey.com/lf71/lfnet.htm | archivedate=18 October 2014 | df=dmy-all }}&lt;/ref&gt; Silverfrost FTN95 is also capable of creating .NET code.&lt;ref&gt;{{cite web | url=http://www.silverfrost.com/11/ftn95_overview.aspx | title=FTN95: Fortran 95 for Windows|publisher=Silverfrost.com|accessdate=19 November 2014}}&lt;/ref&gt;

==Code examples==
{{details|Wikibooks:Fortran/Fortran examples}}
The following program illustrates dynamic memory allocation and array-based operations, two features introduced with Fortran 90.  Particularly noteworthy is the absence of {{code|DO}} loops and {{code|IF}}/{{code|THEN}} statements in manipulating the array; mathematical operations are applied to the array as a whole.  Also apparent is the use of descriptive variable names and general code formatting that conform with contemporary programming style.  This example computes an average over data entered interactively.

&lt;syntaxhighlight lang="fortran"&gt;
program average

  ! Read in some numbers and take the average
  ! As written, if there are no data points, an average of zero is returned
  ! While this may not be desired behavior, it keeps this example simple

  implicit none

  real, dimension(:), allocatable :: points
  integer                         :: number_of_points=0.0
  real                            :: average_points=0., positive_average=0., negative_average=0.

  write (*,*) "Input number of points to average:"
  read  (*,*) number_of_points

  allocate (points(number_of_points))

  write (*,*) "Enter the points to average:"
  read  (*,*) points

  ! Take the average by summing points and dividing by number_of_points
  if (number_of_points &gt; 0) average_points = sum(points) / number_of_points

  ! Now form average over positive and negative points only
  if (count(points &gt; 0.) &gt; 0) then
     positive_average = sum(points, points &gt; 0.) / count(points &gt; 0.)
  end if

  if (count(points &lt; 0.) &gt; 0) then
     negative_average = sum(points, points &lt; 0.) / count(points &lt; 0.)
  end if

  deallocate (points)

  ! Print result to terminal
  write (*,'(a,g12.4)') 'Average = ', average_points
  write (*,'(a,g12.4)') 'Average of positive points = ', positive_average
  write (*,'(a,g12.4)') 'Average of negative points = ', negative_average

end program average
&lt;/syntaxhighlight&gt;

==Humor==
During the same FORTRAN standards committee meeting at which the name "FORTRAN 77" was chosen, a satirical technical proposal was incorporated into the official distribution bearing the title "Letter O [[considered harmful|Considered Harmful]]".  This proposal purported to address the confusion that sometimes arises between the letter "O" and the numeral zero, by eliminating the letter from allowable variable names.  However, the method proposed was to eliminate the letter from the character set entirely (thereby retaining 48 as the number of lexical characters, which the colon had increased to 49).  This was considered beneficial in that it would promote structured programming, by making it impossible to use the notorious {{code|GO TO}} statement as before. (Troublesome {{code|FORMAT}} statements would also be eliminated.)  It was noted that this "might invalidate some existing programs" but that most of these "probably were non-conforming, anyway".&lt;ref&gt;X3J3 post-meeting distribution for meeting held at Brookhaven National Laboratory in November 1976.{{unreliable source?|date=August 2014}}&lt;/ref&gt;&lt;ref&gt;"The obliteration of O", Computer Weekly, 3 March 1977.&lt;/ref&gt;

When X3J3 debated whether the minimum trip count for a DO loop should be zero or one in Fortran 77, Loren Meissner suggested a minimum trip count of two—reasoning ''(tongue-in-cheek)'' that if it was less than two then there would be no reason for a loop!

When assumed-length arrays were being added, there was a dispute as to the appropriate character to separate upper and lower bounds. In a comment examining these arguments, Dr. Walt Brainerd penned an article entitled "Astronomy vs. Gastroenterology" because some proponents had suggested using the star or asterisk ("*"), while others favored the colon (":").{{Citation needed|date=July 2016}}

In FORTRAN 77 (and most earlier versions), variable names beginning with the letters I–N had a default type of integer, while variables starting with any other letters defaulted to real, although programmers could override the defaults with an explicit declaration.&lt;ref&gt;{{Cite web|url=http://docs.oracle.com/cd/E19957-01/805-4939/z40007365fbc/index.html|title=Rules for Data Typing (FORTRAN 77 Language Reference)|website=docs.oracle.com|access-date=2016-09-29}}&lt;/ref&gt; This led to the joke: "In Fortran, GOD is REAL (unless declared LOGICAL)."

==See also==
{{Portal|Computer programming}}
* [[f2c]]
* [[FORMAC (programming language)|FORMAC]]
* [[List of compilers#Fortran compilers|List of Fortran compilers]]
* [[List of numerical libraries#Fortran|List of Fortran numerical libraries]]
* [[List of programming languages]]
* [[Matrix representation]]
* [[Row-major order]]

==References==
{{Reflist|30em}}

==Further reading==
;Articles
* {{Cite journal|last=Allen|first=F.E.|s2cid=14149353|date=September 1981|title=A History of Language Processor Technology in IBM|journal=IBM Journal of Research and Development|volume=25|issue=5|pages=535–548| doi = 10.1147/rd.255.0535 }}
* {{cite conference|url=http://www.softwarepreservation.org/projects/FORTRAN/paper/BackusEtAl-FortranAutomaticCodingSystem-1957.pdf|title=The FORTRAN Automatic Coding System|conference=Western Joint Computer Conference|pages=188–198|date=February 1957|doi=10.1145/1455567.1455599|author1=J. W. Backus|authorlink1=John Backus|author2=R. J. Beeber|author3=S. Best|author4=R. Goldberg|author5=L. M. Haibt|authorlink5=Lois Haibt|author6=H. L. Herrick|author7=R. A. Nelson|author8=D. Sayre|authorlink8=David Sayre|author9=P. B. Sheridan|author10=H. Stern|author11=L. Ziller|author12=R. A. Hughes|author13=R. Nutt|authorlink13=Roy Nutt}}
* {{Cite journal|last1=Chivers|first1=Ian D.|first2=Jane|last2=Sleightholme|year=2013|title=Compiler support for the Fortran 2003 &amp; 2008 standards|journal=ACM SIGPLAN Fortran Forum|volume=28|issue=1|pages=26–28|issn=1061-7264|doi=10.1145/1520752.1520755|url=http://www.fortranplus.co.uk/fortran_info.html|archive-url=https://web.archive.org/web/20080516202558/http://www.fortranplus.co.uk/fortran_info.html|url-status=dead|archive-date=2008-05-16}}
* {{Cite journal|year=2011|title=The Seven Ages of Fortran|journal=Journal of Computer Science &amp; Technology|volume=11|issue=1|pages=1–8|url=https://journal.info.unlp.edu.ar/JCST/article/view/681/210|last=Metcalf |first=Michael}}
* {{cite web|url=http://hopl.murdoch.edu.au/showlanguage.prx?exp=8&amp;language=FORTRAN |title=FORTRAN – Backus et al high-level compiler (Computer Language) |last=Pigott |first=Diarmuid |year=2006 |encyclopedia=The Encyclopedia of Computer Languages |publisher=[[Murdoch University]] |accessdate=5 May 2010 |url-status=dead |archiveurl=https://web.archive.org/web/20091008230959/http://hopl.murdoch.edu.au/showlanguage.prx?exp=8&amp;language=FORTRAN |archivedate=8 October 2009 |df=dmy }}
* {{Cite journal|year=1985|title=Design Considerations for IBM Personal Computer Professional FORTRAN, an Optimizing Compiler|journal=IBM Systems Journal|volume=24|issue=1|pages=49–60|url=http://www.research.ibm.com/journal/sj/241/ibmsj2401G.pdf|last1=Roberts |first1=Mark L. |last2=Griffiths |first2=Peter D.|doi=10.1147/sj.241.0049}}

;"Core" language standards
* {{Cite book
  | last = Ansi x3.9-1966
  | title = USA Standard FORTRAN
  | publisher = American National Standards Institute
  | url = http://www.fh-jena.de/~kleine/history/languages/ansi-x3dot9-1966-Fortran66.pdf
  }} Informally known as FORTRAN 66.
* {{Cite book
  | last = Ansi x3.9-1978
  | title = American National Standard – Programming Language FORTRAN
  | publisher = American National Standards Institute
  | url = http://www.fortran.com/fortran/F77_std/rjcnf.html
  | access-date = 11 December 2007
  | archive-url = https://web.archive.org/web/20131029134137/http://www.fortran.com/fortran/F77_std/rjcnf.html
  | archive-date = 29 October 2013
  | url-status = dead
  }} Also known as [[International Organization for Standardization|ISO]] 1539–1980, informally known as FORTRAN 77.
* {{Cite book
  | last = ANSI X3.198-1992 (R1997) / ISO/IEC 1539:1991
  | title = American National Standard – Programming Language Fortran Extended
  | publisher = American National Standards Institute / ISO/IEC
  | url = http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=17366
  | archive-url = https://web.archive.org/web/20020501111055/http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=17366
  | url-status = dead
  | archive-date = 1 May 2002
  | df = dmy-all
  }} Informally known as Fortran 90.
* {{Cite book
 |last         = ISO/IEC 1539-1:1997
 |title        = Information technology – Programming languages – Fortran – Part 1: Base language
 |url          = http://j3-fortran.org/doc/standing/archive/007/97-007r2/pdf/97-007r2.pdf
 |access-date  = 13 December 2007
 |archive-url  = https://web.archive.org/web/20110818190618/http://j3-fortran.org/doc/standing/archive/007/97-007r2/pdf/97-007r2.pdf
 |archive-date = 18 August 2011
 |url-status     = dead
 |df           = dmy-all
}} Informally known as Fortran 95.  There are a further two parts to this standard.  Part 1 has been formally adopted by ANSI.
* {{Cite book
  | last = ISO/IEC 1539-1:2004
  | title = Information technology – Programming languages – Fortran – Part 1: Base language
  | url = http://www.dkuug.dk/jtc1/sc22/open/n3661.pdf
  }} Informally known as Fortran 2003.
* {{Cite book
  | last = ISO/IEC 1539-1:2010 (Final Draft International Standard)
  | title = Information technology – Programming languages – Fortran – Part 1: Base language
  | url = ftp://ftp.nag.co.uk/sc22wg5/N1801-N1850/N1830.pdf
  }}{{dead link|date=July 2017 |bot=InternetArchiveBot |fix-attempted=yes }} Informally known as Fortran 2008.

;Related standards
* {{Cite journal
  | last = Kneis
  | first = Wilfried
  | title = Draft standard Industrial Real-Time FORTRAN
  | journal = ACM SIGPLAN Notices
  | issn = 0362-1340
  |date=October 1981
  | volume = 16
  | issue = 7
  | pages = 45–60
  | doi = 10.1145/947864.947868
  | title-link = Industrial Real-Time Fortran
  }}
* {{Cite book|title=ISO 8651-1:1988 Information processing systems – Computer graphics – Graphical Kernel System (GKS) language bindings – Part 1: FORTRAN|url=http://www.iso.org/iso/catalogue_detail?csnumber=16024|year=1988|publisher=[[International Organization for Standardization|ISO]]|location=Geneva, Switzerland}}

;Other reference material
* {{cite book |url=http://www.ecma-international.org/publications/files/ECMA-ST-WITHDRAWN/ECMA-9,%201st%20Edition,%20April%201965.pdf |title=ECMA Standard on FORTRAN |publisher=European Computer Manufacturers Association |date=April 1965 |accessdate=2014-11-17}}
* {{cite book |url=http://wwwcdf.pd.infn.it/localdoc/f77_sun.pdf |title=FORTRAN 77 4.0 Reference Manual |publisher=Sun Microsystems, Inc. |year=1995 |accessdate=2014-11-17}}
* {{cite web |url=http://www.atkielski.com/PDF/data/fortran.pdf |title=FORTRAN Coding Form |publisher=[[IBM]] |accessdate=2014-11-17 |url-status=dead |archiveurl=https://web.archive.org/web/20150608095341/http://www.atkielski.com/PDF/data/fortran.pdf |archivedate=8 June 2015 |df=dmy-all }}
* {{cite book |url=http://www.fh-jena.de/~kleine/history/languages/GC28-6515-10-FORTRAN-IV-Language.pdf |title=IBM System/360 and System/370 Fortran IV Language |publisher=[[International Business Machines]] |date=May 1974 |accessdate=2014-11-17}}
* {{cite web |url=http://michaelgoerz.net/refcards/fortran_refcard_a4.pdf |title=Modern Fortran Reference Card |last=Goerz |first=Michael |date=2014 |accessdate=2014-12-14}}

;Textbooks
* {{Cite book
  | first1 = Jeanne C.
  | last1  = Adams | authorlink1=Jeanne Clare Adams
  | first2 = Walter S.
  | last2  = Brainerd
  | first3 = Richard A.
  | last3  = Hendrickson
  | first4 = Richard E.
  | last4  = Maine
  | first5 = Jeanne T.
  | last5  = Martin
  | first6 =  Brian T.
  | last6  = Smith

  | year = 2009
  | title = The Fortran 2003 Handbook
  | edition = 1st
  | publisher = [[Springer Science+Business Media|Springer]]
  | isbn = 978-1-84628-378-9}}
* Akin, Ed: "Object-Oriented Programming via Fortran 90/95", Cambridge Univ Press, {{ISBN|978-0521524087}}, (Feb. 2003).
* Brainerd, Walter S., Goldberg, Charles H., Adams, Jeanne C.: "Programmer's guide to Fortran 90"(3rd Ed.), Springer, (1996). 
* Brainerd, Walter S.: "Guide to Fortran 2008 Programming"(2nd Ed.), Springer, {{ISBN|978-1447167587}}, (Sep. 2015).
* {{Cite book
  | first = Stephen J.
  | last = Chapman
  | year = 2007
  | title = Fortran 95/2003 for Scientists and Engineers
  | edition = 3rd
  | publisher = McGraw-Hill
  | isbn = 978-0-07-319157-7}}
* {{Cite book
  | first1 = Ian
  | last1 = Chivers
  | first2 = Jane
  | last2=Sleightholme
  | year = 2015
  | title = Introduction to Programming with Fortran
  | edition = 3rd
  | publisher = Springer
  | isbn =  978-3-319-17700-7}}
* Clerman, Norman S., Spector, Walter: "Modern Fortran: Style and Usage", Cambridge University Press, {{ISBN|978-0521514538}}, (Feb. 2012).
* {{Cite book
  | first1 = T. M. R.
  | last1 = Ellis
  | first2 = Ivor R.
  | last2 = Phillips
  | first3=Thomas M.
  | last3 = Lahey
  | year = 1994
  | title = Fortran 90 Programming
  | edition = 1st
  | publisher = Addison Wesley
  | isbn = 978-0-201-54446-6}}
* {{Cite book
  | first = D. M.
  | last = Etter
  | year = 1990
  | title = Structured FORTRAN 77 for Engineers and Scientists
  | edition = 3rd
  | publisher = The Benjamin/Cummings Publishing Company, Inc.
  | isbn = 978-0-8053-0051-2
  | url-access = registration
  | url = https://archive.org/details/structuredfortra00ette_0
  }}
* {{Cite book
  | first = Michael
  | last = Kupferschmid
  | year = 2002
  | title = Classical Fortran: Programming for Engineering and Scientific Applications
  | publisher = Marcel Dekker (CRC Press)
  | isbn = 978-0-8247-0802-3}}
* Lorenzo, Mark Jones: "Abstracting Away the Machine: The History of the FORTRAN Programming Language (FORmula TRANslation)", Independently published, {{ISBN|978-1082395949}}, (Aug. 2019).
* {{Cite book
  | first = Daniel D.
  | last = McCracken
  | year = 1961
  | title = A Guide to FORTRAN Programming
  | url = https://archive.org/details/guidetofortranpr00mccr
  | url-access = registration
  | publisher = Wiley
  | location = New York
  | lccn = 61016618}}
* Metcalf, Michael; Reid, John; Cohen, Malcolm: "Modern Fortran Explained: Incorporating Fortran 2018" (5th Ed.), Oxford Univ. Press, {{ISBN|978-0198811886}}, (Nov. 2018).
* {{Cite book
  | first = Larry
  | last = Nyhoff
  |author2=Sanford Leestma
  | year = 1995
  | title = FORTRAN 77 for Engineers and Scientists with an Introduction to Fortran 90
  | edition = 4th
  | publisher = [[Prentice Hall]]
  | isbn = 978-0-13-363003-9}}
* {{Cite book|last=Page|first=Clive G.|title=Professional Programmer's Guide to Fortran77|url=http://www.star.le.ac.uk/~cgp/prof77.html|accessdate=4 May 2010|edition=7 June 2005|year=1988|publisher=Pitman|location=London|isbn=978-0-273-02856-7}}
* {{Cite book|last=Press|first=William H.|title=Numerical Recipes in Fortran 90: The Art of Parallel Scientific Computing|url=http://www.nrbook.com/a/bookf90pdf.php|year=1996|publisher=Cambridge University Press|location=Cambridge, UK|isbn=978-0-521-57439-6}}
* {{Cite book|last1=Sleighthome|first1=Jane|last2=Chivers|first2=Ian David|title=Interactive Fortran 77: A Hands-On Approach|url=http://www.fortranplus.co.uk/fortran_books.html|edition=2nd|series=Computers and their applications|year=1990|publisher=E. Horwood|location=Chichester|isbn=978-0-13-466764-5|access-date=12 March 2014|archive-url=https://web.archive.org/web/20140312213359/http://www.fortranplus.co.uk/fortran_books.html|archive-date=12 March 2014|url-status=dead|df=dmy-all}}

==External links==
{{Wikibooks|Fortran}}
{{Wikiquote|Fortran}}
* [https://wg5-fortran.org/ ISO/IEC JTC1/SC22/WG5]—the official home of Fortran standards
* [https://gcc.gnu.org/wiki/GFortranStandards Fortran Standards Documents]—GFortran standards
* [https://fortran-lang.org/ fortran-lang.org]—the new home of Fortran on the internet (2020).
* [http://www.softwarepreservation.org/projects/FORTRAN/ History of FORTRAN and Fortran II]—[[Computer History Museum]]
* [https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19700015982.pdf Valmer Norrod, et al:"A self-study course in FORTRAN programing—Volume I—textbook", Computer Science Corporation El Segundo, California, (April,1970). NASA(N70-25287).]
* [https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19700015983.pdf Valmer Norrod, Sheldom Blecher, and Martha Horton: "A self-study course in FORTRAN programing—Volume II—workbook", NASA CR-1478, Vol.II (April,1970), NASA(N70-25288).]
{{IBM}}
{{Programming languages}}

{{Authority control}}

[[Category:Fortran| ]]
[[Category:Fortran programming language family| ]]
[[Category:American inventions]]
[[Category:Array programming languages]]
[[Category:Computer standards]]
[[Category:Numerical programming languages]]
[[Category:Object-oriented programming languages]]
[[Category:Procedural programming languages]]
[[Category:High-level programming languages]]
[[Category:Programming languages created in 1957]]
[[Category:Programming languages with an ISO standard]]
[[Category:Statically typed programming languages]]
[[Category:Unix programming tools]]</text>
      <sha1>sl1ffwr9tjmf5eg57tpily6wdhsc6rd</sha1>
    </revision>
  </page>
</mediawiki>
