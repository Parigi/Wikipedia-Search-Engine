<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <dbname>enwiki</dbname>
    <base>https://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.35.0-wmf.36</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>COBOL</title>
    <ns>0</ns>
    <id>6799</id>
    <revision>
      <id>962066396</id>
      <parentid>961898500</parentid>
      <timestamp>2020-06-11T22:44:42Z</timestamp>
      <contributor>
        <username>Assambrew</username>
        <id>39428176</id>
      </contributor>
      <comment>/* Legacy */ COBOL skills gap</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="122878" xml:space="preserve">{{distinguish|text=[[Kobol]], a fictional planet in Battlestar Galactica}}
{{short description|Programming language with English-like syntax}}
{{Use dmy dates|date=April 2019}}
{{good article}}
{{Use American English|date=October 2014}}
{{Infobox programming language
| name                   = COBOL
| logo                   = [[File:COBOL Report Apr60.djvu|200px|alt=COBOL. Report to Conference on Data Systems Languages including initial specifications for a Common Business Oriented Language (COBOL) for programming digital electronic computers. Department of Defense, April 1960.]]
| logo caption           = The cover of the ''COBOL 60'' report to [[CODASYL]] (April 1960)
| paradigm               = [[Procedural programming|Procedural]], [[imperative programming|imperative]], [[Object-oriented programming|object-oriented]]
| year                   = {{Start date and age|df=yes|1959}}
| designers               = {{nowrap|Howard Bromberg}}, {{nowrap|Norman Discount}}, {{nowrap|Vernon Reeves}}, {{nowrap|[[Jean E. Sammet]]}}, {{nowrap|William Selden}}, {{nowrap|Gertrude Tierney}}&lt;ref name="creators"/&gt;
| developers              = [[CODASYL]], [[ANSI]], [[ISO]]
| latest release version = ISO/IEC 1989:2014
| latest release date    = 2014
| typing                 = [[weak typing|Weak]], [[static typing|static]]
| implementations        = {{nowraplinks|[[GnuCOBOL]], [[IBM COBOL]]}}, {{nowrap|[[Micro Focus]] Visual COBOL}} 
| dialects               = ACUCOBOL-GT, COBOL-IT, COBOL/2, DEC COBOL-10, DEC VAX COBOL, DOSVS COBOL, Fujitsu COBOL, Hitachi COBOL2002, HP3000 COBOL/II, IBM COBOL SAA, IBM COBOL/400, IBM COBOL/II, IBM Enterprise COBOL, IBM ILE COBOL, IBM OS/VS COBOL, ICL COBOL (VME),  isCOBOL, Micro Focus COBOL, Microsoft COBOL, Realia COBOL, Ryan McFarland RM/COBOL, Ryan McFarland RM/COBOL-85, Tandem (NonStop) COBOL85, Tandem (NonStop) SCOBOL, UNIVAC COBOL, Unisys MCP COBOL74, Unisys MCP COBOL85, Unix COBOL X/Open, Veryant isCOBOL, Visual COBOL, Wang VS COBOL
| influenced_by          = [[AIMACO]], [[C++]],{{efn|name=2002 influence|Specifically influenced COBOL 2002's object-oriented features.&lt;ref name="SW95"/&gt;&lt;ref name="Arranga98"/&gt;&lt;ref&gt;{{cite journal | title=Cobol: Perception and Reality | journal=Computer | date=March 1997 | volume=30 | issue=3 | doi=10.1109/2.573683 | page=127 | issn=0018-9162 | first1=Edmund C. | last1=Arranga | first2=Frank P. | last2=Coyle }}&lt;/ref&gt;}} [[COMTRAN]], [[Eiffel (programming language)|Eiffel]],{{efn|name=2002 influence}} [[FACT computer language|FACT]], [[FLOW-MATIC]], [[Smalltalk]]{{efn|name=2002 influence}}
| influenced             = [[CobolScript]],&lt;ref&gt;{{cite conference | title=COBOL Script: a business-oriented scripting language | first1=Tetsuji | last1=Imajo | first2=Tatsuki | last2=Miyake | first3=Shinobu | last3=Sato | first4=Toshiyuki | last4=Ito | first5=Daisuke | last5=Yokotsuka | first6=Yoshihide | last6=Tsujihata | first7=Shunsuke | last7=Uemura | display-authors=1 | publisher=IEEE | date=September 2000 | conference=Enterprise Distributed Object Computing Conference | conference-url=http://dblp1.uni-trier.de/db/conf/edoc/edoc2000.html | location=Makuhari, Japan | isbn=0769508650 | doi=10.1109/EDOC.2000.882363 }}&lt;!--| accessdate=4 March 2015 --&gt;&lt;/ref&gt; [[EGL (programming language)|EGL]],&lt;ref&gt;{{cite web | url=https://www.omg.org/adm/EGLOverviewtoOMG.pdf | title=Introduction to EGL | publisher=IBM Software Group | date=7 May 2007 | first=Wing Hong | last=Ho}}&lt;/ref&gt; [[PL/I]],&lt;ref&gt;{{cite conference | title=The early history and characteristics of PL/I | publisher=[[Academic Press]] | publication-date=1981 | conference=History of Programming Languages | last=Radin | first=George | authorlink=George Radin | editor-first=Richard L. | editor-last=Wexelblat | doi=10.1145/800025.1198410 | isbn=0127450408 | page=572 | year=1978 }}&lt;!--| accessdate=23 November 2014 --&gt;&lt;/ref&gt; [[Programming Language for Business|PL/B]]{{citation needed | date=October 2017 | reason=Most sources on PL/B or Databus describe it is as COBOL-like, not as *inspired by* COBOL.}}
| file_ext               = &lt;code&gt;.cbl&lt;/code&gt;, &lt;code&gt;.cob&lt;/code&gt;, &lt;code&gt;.cpy&lt;/code&gt;
| wikibooks              = COBOL
}}

'''COBOL''' ({{IPAc-en|ˈ|k|oʊ|b|ɒ|l|,_|-|b|ɔː|l}}; an [[acronym]] for &lt;!-- do not insert bolding/italics per [[WP:EXPABBR]] --&gt;"common business-oriented language") is a [[compiled]] English-like [[computer programming language]] designed for business use. It is [[imperative programming|imperative]], [[procedural programming|procedural]] and, since 2002, [[object-oriented programming|object-oriented]]. COBOL is primarily used in business, finance, and administrative systems for companies and governments. COBOL is still widely used in applications deployed on [[mainframe computer]]s, such as large-scale [[batch processing|batch]] and [[transaction processing]] jobs. But due to its declining popularity and the retirement of experienced COBOL programmers, programs are being migrated to new platforms, rewritten in modern languages or replaced with software packages.&lt;ref&gt;{{cite web | url=http://www.computerworld.com/article/2502420/data-center/brain-drain-where-cobol-systems-go-from-here.html | title=Brain drain: Where Cobol systems go from here | work=Computerworld | date=14 March 2012 | accessdate=9 February 2015 | first=Robert L. | last=Mitchell}}&lt;/ref&gt; Most programming in COBOL is now purely to maintain existing applications, however many large financial institutions were still developing new systems in COBOL in 2006 due to the mainframe processing speed.&lt;ref name="Computerworld Not Dead Yet"/&gt;

COBOL was designed in 1959 by [[CODASYL]] and was partly based on the programming language [[FLOW-MATIC]] designed by [[Grace Hopper]]. It was created as part of a [[US Department of Defense]] effort to create a [[Software portability|portable]] programming language for data processing. It was originally seen as a stopgap, but the Department of Defense promptly forced computer manufacturers to provide it, resulting in its widespread adoption.&lt;ref&gt;{{cite book | url=https://books.google.com/books?id=VCcsTPQ738oC&amp;pg=PA100 | title=The Computer Boys Take Over: Computers, Programmers, and the Politics of Technical Expertise | publisher=[[MIT Press]] | year=2009 | page=100 | isbn=978-0262050937 | first=Nathan L. | last=Ensmenger | lccn=2009052638}}&lt;/ref&gt; It was [[standardized]] in 1968 and has since been revised four times. Expansions include support for [[structured programming|structured]] and [[object-oriented programming]]. The current standard is ''[[ISO]]/[[International Electrotechnical Commission|IEC]] 1989:2014''.&lt;ref&gt;{{cite web | url=http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=51416 | title=ISO/IEC 1989:2014 | publisher=ISO | date=26 May 2014 | accessdate=7 June 2014}}&lt;/ref&gt;

COBOL statements have an English-like syntax, which was designed to be self-documenting and highly readable. However, it is verbose and uses over 300 [[reserved word]]s. In contrast with modern, succinct syntax like {{code|1=y = x;|lang=c}}, COBOL has a more English-like syntax (in this case, {{code|MOVE x TO y|lang=cobolfree}}).
COBOL code is split into four ''divisions'' (identification, environment, data, and procedure) containing a rigid hierarchy of sections, paragraphs and sentences. Lacking a large [[standard library]], the standard specifies 43 statements, 87 functions and just one class.

Academic computer scientists were generally uninterested in business applications when COBOL was created and were not involved in its design; it was (effectively) designed from the ground up as a computer language for business, with an emphasis on inputs and outputs, whose only data types were numbers and strings of text.&lt;ref&gt;{{cite web|url=http://cs.brown.edu/~adf/programming_languages.html|title=A History of Computer Programming Languages|first=Andrew|last=Ferguson|date=|website=cs.brown.edu}}&lt;/ref&gt;
COBOL has been criticized throughout its life for its verbosity, design process, and poor support for [[structured programming]]. These weaknesses result in monolithic and, though intended to be English-like, not easily comprehensible and verbose programs.

==History and specification==
===Background===
In the late 1950s, computer users and manufacturers were becoming concerned about the rising cost of programming. A 1959 survey had found that in any data processing installation, the programming cost US$800,000 on average and that translating programs to run on new hardware would cost $600,000. At a time when new [[Timeline of programming languages|programming languages were proliferating]] at an ever-increasing rate, the same survey suggested that if a common business-oriented language were used, conversion would be far cheaper and faster.{{sfn|Beyer|2009|p=282}}

On 8 April 1959, [[Mary K. Hawes]], a computer scientist at [[Burroughs Corporation]], called a meeting of representatives from academia, computer users, and manufacturers at the [[University of Pennsylvania]] to organize a formal meeting on common business languages.&lt;ref&gt;{{Cite journal|last=Gürer|first=Denise|date=1 June 2002|title=Pioneering Women in Computer Science|journal=SIGCSE Bull.|volume=34|issue=2|pages=175–180|doi=10.1145/543812.543853|issn=0097-8418}}&lt;/ref&gt; Representatives included [[Grace Hopper]] (inventor of the English-like data processing language [[FLOW-MATIC]]), [[Jean Sammet]] and [[Saul Gorn]].{{sfn|Beyer|2009|pp=281–282}}{{sfn|Sammet|1978a|p=200}}

At the April meeting, the group asked the [[United States Department of Defense|Department of Defense]] (DoD) to sponsor an effort to create a common business language. The delegation impressed Charles A. Phillips, director of the Data System Research Staff at the DoD,&lt;ref name = "Flahive, Texas Public Radio, 2019" &gt;{{ cite web | url = https://www.tpr.org/post/how-cobol-still-powers-global-economy-60-years-old | title = How COBOL Still Powers The Global Economy At 60 Years Old | access-date = 19 July 2019 | first = Paul | last = Flahive | date = 24 May 2019 | website = [[Texas Public Radio]] | quote = (Grace Hopper) Nicknamed Grandma Cobol, the code was based on some of her earlier work. She said — after hearing the rumors — one of her collaborators went out and bought a granite tombstone. “He had the word COBOL cut in the front of it. Then he shipped it express collect to Mr. Phillips in the pentagon.” The prank on Charles Phillips, a leader for the project at the defense department, got the attention of the powers that be and was a turning point she said. COBOL would go on to become the most widely used and longest lasting computer languages in history. | archive-url = https://web.archive.org/web/20190524035248/https://www.tpr.org/post/how-cobol-still-powers-global-economy-60-years-old | archive-date = 24 May 2019 | df = dmy-all }}&lt;/ref&gt; who thought that they "thoroughly understood" the DoD's problems. The DoD operated 225 computers, had a further 175 on order and had spent over $200 million on implementing programs to run on them. Portable programs would save time, reduce costs and ease modernization.{{sfn|Beyer|2009|p=283}}

Phillips agreed to sponsor the meeting and tasked the delegation with drafting the agenda.{{sfn|Beyer|2009|p=284}}

===COBOL 60===
On 28 and 29 May 1959 (exactly one year after the Zürich [[ALGOL 58]] meeting), a meeting was held at the Pentagon to discuss the creation of a common programming language for business. It was attended by 41 people and was chaired by Phillips.&lt;ref&gt;{{Cite journal | doi = 10.1109/MAHC.1985.10047| title = Early Meetings of the Conference on Data Systems Languages| journal = IEEE Annals of the History of Computing| volume = 7| issue = 4| pages = 316–325| year = 1985 }}&lt;/ref&gt; The Department of Defense was concerned about whether it could run the same data processing programs on different computers. [[FORTRAN]], the only mainstream language at the time, lacked the features needed to write such programs.{{sfn|Sammet|2004|p=104}}

Representatives enthusiastically described a language that could work in a wide variety of environments, from banking and insurance to utilities and inventory control. They agreed unanimously that more people should be able to program and that the new language should not be restricted by the limitations of contemporary technology. A majority agreed that the language should make maximal use of English, be capable of change, be machine-independent and be easy to use, even at the expense of power.{{sfn|Beyer|2009|p=286}}

The meeting resulted in the creation of a [[steering committee]] and short-, intermediate- and long-range committees. The short-range committee was given to September (three months) to produce specifications for an interim language, which would then be improved upon by the other committees.{{sfn|Conner|1984|p=ID/9}}{{sfn|Sammet|1978a|p=201}} Their official mission, however, was to identify the strengths and weaknesses of existing programming languages and did not explicitly direct them to create a new language.{{sfn|Sammet|2004|p=104}}
The deadline was met with disbelief by the short-range committee.{{sfn|Bemer|1971|p=132}}
One member, [[Betty Holberton]], described the three-month deadline as "gross optimism" and doubted that the language really would be a stopgap.{{sfn|Beyer|2009|p=288}}

The steering committee met on 4 June and agreed to name the entire activity as the ''Committee on Data Systems Languages'', or [[CODASYL]], and to form an executive committee.{{sfn|Sammet|1978a|p=203}}

The short-range committee was made up of members representing six computer manufacturers and three government agencies. The six computer manufacturers were [[Burroughs Corporation]], [[IBM]], [[Honeywell|Minneapolis-Honeywell]] (Honeywell Labs), [[RCA]], [[Sperry Rand]], and [[Sylvania Electric Products]]. The three government agencies were the [[US Air Force]], the Navy's [[David Taylor Model Basin]], and the [[National Bureau of Standards]] (now the National Institute of Standards and Technology).{{sfn|CODASYL|1969|loc=§ I.2.1.1}} The committee was chaired by [[Joseph Wegstein]] of the US National Bureau of Standards. Work began by investigating data description, statements, existing applications and user experiences.{{sfn|Sammet|1978a|p=204}}

The committee mainly examined the [[FLOW-MATIC]], [[AIMACO]] and [[COMTRAN]] programming languages.{{sfn|Sammet|2004|p=104}}{{sfn|CODASYL|1969|loc=§ I.1.2}}
The FLOW-MATIC language was particularly influential because it had been implemented and because AIMACO was a derivative of it with only minor changes.{{sfn|Beyer|2009|p=290}}&lt;ref name=cisn&gt;{{cite journal | last = Sammet | first = Jean | authorlink = Jean Sammet | title = The Early History of COBOL | journal = ACM SIGPLAN Notices | volume = 13 | issue = 8 | pages = 121–161 | year = 1978 | doi =10.1145/960118.808378 }}&lt;/ref&gt;
FLOW-MATIC's inventor, Grace Hopper, also served as a technical adviser to the committee.{{sfn|Bemer|1971|p=132}} FLOW-MATIC's major contributions to COBOL were long variable names, English words for commands and the separation of data descriptions and instructions.{{sfn|Sammet|1978a|p=217}}
Hopper is sometimes referred to as "the mother of COBOL" or "the grandmother of COBOL",&lt;ref&gt;{{cite journal|last=Porter Adams|first=Vicki|date=5 October 1981|title=Captain Grace M. Hopper: the Mother of COBOL|url=https://books.google.com/books?id=JT0EAAAAMBAJ&amp;pg=RA1-PA33|journal=InfoWorld|volume=3|issue=20|page=33|issn=0199-6649}}&lt;/ref&gt;&lt;ref&gt;{{cite journal|last=Betts|first=Mitch|date=6 January 1992|title=Grace Hopper, mother of Cobol, dies|url=https://books.google.com/books?id=J-_T3bxgvMwC&amp;pg=PA14|journal=Computerworld|volume=26|issue=1|page=14|issn=0010-4841}}&lt;/ref&gt;&lt;ref&gt;{{cite book|last=Lohr|first=Steve|url=https://books.google.com/books?id=XfPLVx6qS_cC&amp;pg=PA52&amp;lpg=PA52|title=Go To: The Story of the Math Majors, Bridge Players, Engineers, Chess Wizards, Maverick Scientists, and Iconoclasts—The Programmers Who Created the Software Revolution|publisher=[[Basic Books]]|year=2008|isbn=978-0786730766|page=52}}&lt;/ref&gt; although [[Jean Sammet]], a lead designer of COBOL, stated that Hopper "was not the mother, creator or developer of Cobol".&lt;ref&gt;{{Cite web | url=https://www.irishtimes.com/life-and-style/people/pioneering-software-engineer-and-cobol-co-designer-1.3111332 |title = Pioneering software engineer and Cobol co-designer}}&lt;/ref&gt;&lt;ref name="creators"&gt;{{Cite journal|last=Sammet|first=Jean E.|date=March 2000|title=The real creators of Cobol|journal=IEEE Software|volume=17|issue=2|pages=30–32|doi=10.1109/52.841602|issn=1937-4194|quote=The Short-Range Committee worked diligently from June 1959 on, but there were great difficulties in having a fairly large committee try to create a programming language. In November, the Short-Range Committee chair appointed six people to develop specifications for consideration: William Selden and Gertrude Tierney (IBM), Howard Bromberg and Norman Discount (RCA), and Vernon Reeves and Jean E. Sammet (Sylvania Electric Products). We worked for two full weeks (including some round-the-clock sessions) in November 1959 and sent the proposed specifications to the full Short-Range Committee, which accepted almost all of them. After some editing (by the same six people), we turned in the specifications as a final report in December to the Executive Committee, which accepted them in January 1960. After some further editing, the Government Printing Office issued Cobol 60. [...] [Grace Hopper] did not participate in its work except through the general guidance she gave to her staff who were direct committee members. Thus, while her indirect influence was very important, regrettably the frequent repeated statements that “Grace Hopper developed Cobol” or “Grace Hopper was a codeveloper of Cobol” or “Grace Hopper is the mother of Cobol” are just not correct.}}&lt;/ref&gt;

IBM's COMTRAN language, invented by [[Bob Bemer]], was regarded as a competitor to FLOW-MATIC{{sfn|Beyer|2009|p=292}}{{sfn|Bemer|1971|p=131}} by a short-range committee made up of colleagues of Grace Hopper.{{sfn|Beyer|2009|p=296}}
Some of its features were not incorporated into COBOL so that it would not look like IBM had dominated the design process,{{sfn|Conner|1984|p=ID/9}} and Jean Sammet said in 1981 that there had been a "strong anti-IBM bias" from some committee members (herself included).{{sfn|Sammet|1978a|p=221}}
In one case, after Roy Goldfinger, author of the COMTRAN manual and intermediate-range committee member, attended a subcommittee meeting to support his language and encourage the use of algebraic expressions, Grace Hopper sent a memo to the short-range committee reiterating Sperry Rand's efforts to create a language based on English.{{sfn|Beyer|2009|p=291}}
In 1980, Grace Hopper commented that "COBOL 60 is 95% FLOW-MATIC" and that COMTRAN had had an "extremely small" influence. Furthermore, she said that she would claim that work was influenced by both FLOW-MATIC and COMTRAN only to "keep other people happy [so they] wouldn't try to knock us out".&lt;ref name="Hopper Oral History"&gt;{{cite web | url=http://archive.computerhistory.org/resources/text/Oral_History/Hopper_Grace/102702026.05.01.pdf | title=Oral History of Captain Grace Hopper | publisher=[[Computer History Museum]] | date=December 1980 | accessdate=28 June 2014 | page=37 | archive-url=https://web.archive.org/web/20171225202555/http://archive.computerhistory.org/resources/text/Oral_History/Hopper_Grace/102702026.05.01.pdf | archive-date=25 December 2017 | url-status=dead }}&lt;/ref&gt;
Features from COMTRAN incorporated into COBOL included formulas,{{sfn|Sammet|1978a|p=218}} the [[#PICTURE clause|{{code|PICTURE}} clause]],{{sfn|Marcotty|1978|p=268}} an improved &lt;code&gt;IF&lt;/code&gt; statement, which obviated the need for [[GO TO]]s, and a more robust file management system.{{sfn|Beyer|2009|p=292}}

The usefulness of the committee's work was subject of great debate. While some members thought the language had too many compromises and was the result of [[design by committee]], others felt it was better than the three languages examined. Some felt the language was too complex; others, too simple.{{sfn|Sammet|1978a|pp=205–206}}
Controversial features included those some considered useless or too advanced for data processing users. Such features included [[boolean expression]]s, [[formula]]s and table ''{{dfn|subscripts}}'' (indices).{{sfn|Sammet|1978a|loc=Figure 8}}{{sfn|Sammet|1978a|pp=230–231}} Another point of controversy was whether to make keywords context-sensitive and the effect that would have on readability.{{sfn|Sammet|1978a|loc=Figure 8}} Although context-sensitive keywords were rejected, the approach was later used in [[PL/I]] and partially in COBOL from 2002.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|p=846}} Little consideration was given to [[interactivity]], interaction with [[operating system]]s (few existed at that time) and functions (thought of as purely mathematical and of no use in data processing).{{sfn|Sammet|1978a|p=220}}{{sfn|Sammet|1978a|p=228}}

The specifications were presented to the Executive Committee on 4 September. They fell short of expectations: Joseph Wegstein noted that "it contains rough spots and requires some additions", and Bob Bemer later described them as a "hodgepodge". The subcommittee was given until December to improve it.{{sfn|Bemer|1971|p=132}}

At a mid-September meeting, the committee discussed the new language's name. Suggestions included "BUSY" (Business System), "INFOSYL" (Information System Language) and "COCOSYL" (Common Computer Systems Language).{{sfn|Sammet|1978a|p=210}} It is unclear who coined the name "COBOL",{{sfn|Bemer|1971|p=132: ''We can't find a single individual who admits coining the acronym "COBOL"''}}{{sfn|Sammet|1978a|p=210: ''The next day, the name COBOL was finally agreed to as an acronym for COmmon Business Oriented Language. Unfortunately, my notes do not show who made that suggestion''}} although Bob Bemer later claimed it was his suggestion.&lt;ref&gt;{{cite news | url=https://www.washingtonpost.com/wp-dyn/articles/A4138-2004Jun24.html | title=Computer Pioneer Bob Bemer, 84 | work=The Washington Post | date=25 June 2004 | accessdate=28 June 2014 | page=B06 | first=Patricia | last=Sullivan}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.bobbemer.com/arranga.htm|title=THE COBOL REPORT - Interview with Bob Bemer - the Father of COBOL|url-status=dead|archiveurl=https://web.archive.org/web/20180402200259/http://www.bobbemer.com/arranga.htm|archivedate=2018-04-02}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://cobolreport.com/cobolreport/archives/TCR_bemer.htm|title=THE COBOL REPORT - Interview with Bob Bemer - the Father of COBOL|url-status=dead|archiveurl=https://web.archive.org/web/20031223115509/http://cobolreport.com/cobolreport/archives/TCR_bemer.htm|archivedate=2003-12-23}}&lt;/ref&gt;

In October, the intermediate-range committee received copies of the [[FACT (computer language)|FACT]] language specification created by [[Roy Nutt]]. Its features impressed the committee so much that they passed a resolution to base COBOL on it.{{sfn|Beyer|2009|p=293}}
This was a blow to the short-range committee, who had made good progress on the specification. Despite being technically superior, FACT had not been created with portability in mind or through manufacturer and user consensus. It also lacked a demonstrable implementation,{{sfn|Bemer|1971|p=132}} allowing supporters of a FLOW-MATIC-based COBOL to overturn the resolution. RCA representative Howard Bromberg also blocked FACT, so that RCA's work on a COBOL implementation would not go to waste.{{sfn|Beyer|2009|p=294}}

{{quotebox
 | quote=&lt;poem&gt;
'And what name do you want inscribed?'
I said, 'I'll write it for you.' I wrote the name down: COBOL.
'What kind of name is that?'
'Well it's a Polish name. We shortened it and got rid of a lot of unnecessary notation.'
&lt;/poem&gt;
 | source=Howard Bromberg on how he bought the COBOL tombstone&lt;ref name="Tombstone story"&gt;{{cite journal | url=http://ed-thelen.org/comp-hist/TCMR-V13.pdf | title=The Story of the COBOL Tombstone | journal=The Computer Museum Report | date=Summer 1985 | accessdate=29 June 2014 | volume=13 | pages=8–9 | archiveurl=https://web.archive.org/web/20140403015336/http://ed-thelen.org/comp-hist/TCMR-V13.pdf | archivedate=3 April 2014 | url-status=live }}&lt;/ref&gt;
 | quoted=1
}}

It soon became apparent that the committee was too large for any further progress to be made quickly. A frustrated Howard Bromberg bought a $15 tombstone with "COBOL" engraved on it and sent it to Charles Phillips to demonstrate his displeasure.{{efn|The tombstone is currently at the [[Computer History Museum]].&lt;ref&gt;{{cite web | title=COBOL Tombstone | url=http://www.computerhistory.org/collections/catalog/X572.85 | publisher=Computer History Museum | accessdate=29 June 2014}}&lt;/ref&gt;}}&lt;ref name="Tombstone story"/&gt;{{sfn|Bemer|1971|p=130}}
A sub-committee was formed to analyze existing languages and was made up of six individuals:{{sfn|Sammet|2004|p=104}}{{sfn|Beyer|2009|p=289}}

* William Selden and Gertrude Tierney of IBM,
* Howard Bromberg and Howard Discount of RCA,
* Vernon Reeves and [[Jean E. Sammet]] of Sylvania Electric Products.

The sub-committee did most of the work creating the specification, leaving the short-range committee to review and modify their work before producing the finished specification.{{sfn|Sammet|2004|p=104}}

The specifications were approved by the Executive Committee on 8 January 1960, and sent to the government printing office, which printed these as ''COBOL 60''. The language's stated objectives were to allow efficient, portable programs to be easily written, to allow users to move to new systems with minimal effort and cost, and to be suitable for inexperienced programmers.{{sfn|CODASYL|1969|loc=§ I.1.1}}
The CODASYL Executive Committee later created the COBOL Maintenance Committee to answer questions from users and vendors and to improve and expand the specifications.{{sfn|Brown|1976|p=47}}

During 1960, the list of manufacturers planning to build COBOL compilers grew. By September, five more manufacturers had joined CODASYL ([[Bendix Corporation|Bendix]], [[Control Data Corporation]], [[General Electric]] (GE), [[National Cash Register]] and [[Philco]]), and all represented manufacturers had announced COBOL compilers. GE and IBM planned to integrate COBOL into their own languages, GECOM and COMTRAN, respectively. In contrast, [[International Computers and Tabulators]] planned to replace their language, CODEL, with COBOL.{{sfn|Bemer|1971|p=133}}

Meanwhile, RCA and Sperry Rand worked on creating COBOL compilers. The first COBOL program ran on 17 August on an RCA 501.{{sfn|Beyer|2009|p=297}}
On 6 and 7 December, the same COBOL program (albeit with minor changes) ran on an RCA computer and a Remington-Rand [[Univac]] computer, demonstrating that compatibility could be achieved.&lt;ref name="Williams12"&gt;{{cite book | url=https://books.google.com/books?id=KKmiw-_2gYIC&amp;pg=PT124 | title=Grace Hopper: Admiral of the Cyber Sea | publisher=US Naval Institute Press | isbn=978-1612512655 | date=10 November 2012 | last=Williams | first=Kathleen Broome | oclc=818867202}}&lt;/ref&gt;

The relative influences of which languages were used continues to this day in the recommended advisory printed in all COBOL reference manuals:
{{quote|COBOL is an industry language and is not the property of any company or group of companies, or of any organization or group of organizations.
No warranty, expressed or implied, is made by any contributor or by the CODASYL COBOL Committee as to the accuracy and functioning of the
programming system and language. Moreover, no responsibility is assumed by any contributor, or by the committee, in connection therewith. The authors and copyright holders of the copyrighted material used herein are as follows:

:FLOW-MATIC (trademark of Unisys Corporation), Programming for the UNIVAC (R) I and II, Data Automation Systems, copyrighted 1958, 1959, by Unisys Corporation; IBM Commercial Translator Form No. F28-8013, copyrighted 1959 by IBM; FACT, DSI 27A5260-2760, copyrighted 1960 by Minneapolis-Honeywell.
They have specifically authorized the use of this material, in whole or in part, in the COBOL specifications. Such authorization extends to the reproduction and use of COBOL specifications in programming manuals or similar publications.&lt;ref&gt;Compaq Computer Corporation: ''Compaq COBOL Reference Manual'', Order Number: AA–Q2G0F–TK October 2000, Page xviii; Fujitsu Corporation: ''Net Cobol Language Reference'', Version 15, January 2009; IBM Corporation: ''Enterprise COBOL for z/OS Language Reference'', Version 4 Release 1, SC23-8528-00, December 2007&lt;/ref&gt;}}

===COBOL-61 to COBOL-65===
{{quotebox
 | quote=It is rather unlikely that Cobol will be around by the end of the decade.
 | width=30%
 | qouted=1
 | source=Anonymous, June 1960&lt;ref&gt;{{cite journal | url=https://books.google.com/books?id=CLbHc0Acrm4C&amp;pg=RA1-PA67 | title=In defense of Cobol | journal=Computerworld | volume=18 | issue=24 | page=ID/19 | first=Jerome | last=Garfunkel | date=11 November 1984}}&lt;/ref&gt;
}}

Many logical flaws were found in ''COBOL 60'', leading GE's [[Charles Katz]] to warn that it could not be interpreted unambiguously. A reluctant short-term committee enacted a total cleanup and, by March 1963, it was reported that COBOL's syntax was as definable as [[ALGOL]]'s, although semantic ambiguities remained.{{sfn|Bemer|1971|p=133}}

Early COBOL compilers were primitive and slow. A 1962 US Navy evaluation found compilation speeds of 3–11 statements per minute. By mid-1964, they had increased to 11–1000 statements per minute. It was observed that increasing memory would drastically increase speed and that compilation costs varied wildly: costs per statement were between $0.23 and $18.91.{{sfn|Bemer|1971|p=134}}

In late 1962, IBM announced that COBOL would be their primary development language and that development of COMTRAN would cease.{{sfn|Bemer|1971|p=134}}

The COBOL specification was revised three times in the five years after its publication.
COBOL-60 was replaced in 1961 by COBOL-61. This was then replaced by the COBOL-61 Extended specifications in 1963, which introduced the sort and report writer facilities.{{sfn|Brown|1976|p=48}}
The added facilities corrected flaws identified by Honeywell in late 1959 in a letter to the short-range committee.{{sfn|Beyer|2009|p=297}}
COBOL Edition 1965 brought further clarifications to the specifications and introduced facilities for handling [[mass storage]] files and [[table (information)|tables]].{{sfn|CODASYL|1969|loc=§ I.2.2.4}}

===COBOL-68===
Efforts began to standardize COBOL to overcome incompatibilities between versions. In late 1962, both ISO and the United States of America Standards Institute (now [[ANSI]]) formed groups to create standards. ANSI produced ''USA Standard COBOL X3.23'' in August 1968, which became the cornerstone for later versions.{{sfn|CODASYL|1969|loc=§ I.2.3}} This version was known as American National Standard (ANS) COBOL and was adopted by ISO in 1972.&lt;ref name="FS2003"&gt;{{cite book | url=http://dl.acm.org/citation.cfm?id=1074734 | title=Programming language standards | encyclopedia=Encyclopedia of Computer Science | publisher=Wiley | year=2003 | page=1467 | isbn=978-0470864128 | last1=Follet | first1=Robert H. | last2=Sammet | first2=Jean E. | authorlink2=Jean E. Sammet | edition=4th | editor1-first=Anthony | editor1-last=Ralston | editor2-first=Edwin D. | editor2-last=Reilly | editor3-first=David | editor3-last=Hemmendinger |url-access=subscription }}&lt;/ref&gt;

===COBOL-74===
By 1970, COBOL had become the most widely used programming language in the world.{{sfn|Beyer|2009|p=301}}

Independently of the ANSI committee, the CODASYL Programming Language Committee was working on improving the language. They described new versions in 1968, 1969, 1970 and 1973, including changes such as new inter-program communication, debugging and file merging facilities as well as improved string-handling and [[library (computing)|library]] inclusion features.{{sfn|Brown|1976|p=49}}
Although CODASYL was independent of the ANSI committee, the ''CODASYL Journal of Development'' was used by ANSI to identify features that were popular enough to warrant implementing.{{sfn|Brown|1976|p=52}}
The Programming Language Committee also liaised with [[Ecma International|ECMA]] and the Japanese COBOL Standard committee.{{sfn|Brown|1976|p=49}}

The Programming Language Committee was not well-known, however. The vice-president, William Rinehuls, complained that two-thirds of the COBOL community did not know of the committee's existence. It was also poor, lacking the funds to make public documents, such as minutes of meetings and change proposals, freely available.&lt;ref&gt;{{cite journal | url=https://books.google.com/books?id=JBUJf4n2QxkC&amp;pg=PT10 | title=Few Realise Wasted Resources of Local DP Schools | journal=Computerworld | volume=6 | issue=31 | pages=11 | first=Alan | last=Taylor | date=2 August 1972}}&lt;/ref&gt;

In 1974, ANSI published a revised version of (ANS) COBOL, containing new features such as [[COBOL#Files|file organizations]], the {{code|DELETE}} statement&lt;ref&gt;{{cite book | url=https://books.google.com/books?id=Cs1RAQAAIAAJ&amp;pg=PA87 | title=Programming in COBOL: A Course of Twelve Television Lectures | publisher=Manchester University Press | year=1974 | page=87 | isbn=978-0719005923 | last=Triance | first=J. M.}}&lt;/ref&gt; and the [[memory segmentation|segmentation]] module.{{sfn|Klein|2010|p=16}}
Deleted features included the {{code|NOTE}} statement, the {{code|EXAMINE}} statement (which was replaced by {{code|INSPECT}}) and the implementer-defined random access module (which was superseded by the new sequential and relative I/O modules). These made up 44 changes, which rendered existing statements incompatible with the new standard.&lt;ref&gt;{{cite techreport | url=http://www.dtic.mil/dtic/tr/fulltext/u2/a039740.pdf | title=Programming Language Standards—Who Needs Them? | date=May 1977 | accessdate=7 January 2014 | pages=19–21 | first1=George N. | last1=Baird | first2=Paul | last2=Oliver | section=1974 Standard (X3.23–1974) | publisher=[[Department of the Navy]] | archiveurl=https://web.archive.org/web/20140107192439/http://www.dtic.mil/dtic/tr/fulltext/u2/a039740.pdf | archivedate=7 January 2014 | url-status=live}}&lt;/ref&gt;
The report writer was slated to be removed from COBOL, but was reinstated before the standard was published.&lt;ref&gt;{{cite journal | url=https://books.google.com/books?id=8pMVcgpPyVMC&amp;pg=PA17 | title='Spotty' Availability A Problem... | page=17 | date=23 July 1975 | last=Culleton, John R., Jr. | journal=Computerworld | issn=0010-4841 | volume=9 | issue=30}}&lt;/ref&gt;&lt;ref&gt;{{cite journal | url=https://books.google.com/books?id=X_3_D4RqzvIC&amp;pg=PA20 | title=Does Cobol's Report Writer Really Miss the Mark? | journal=Computerworld | volume=9 | issue=25 | page=20 | first=Williams B. | last=Simmons | date=18 June 1975 | issn=0010-4841}}&lt;/ref&gt; ISO later adopted the updated standard in 1978.&lt;ref name="FS2003"/&gt;

===COBOL-85===
In June 1978, work began on revising COBOL-74. The proposed standard (commonly called COBOL-80) differed significantly from the previous one, causing concerns about incompatibility and conversion costs. In January 1981, Joseph T. Brophy, Senior Vice-President of Travelers Insurance, threatened to sue the standard committee because it was not [[forward compatibility|upwards compatible]] with COBOL-74. Mr. Brophy described previous conversions of their 40-million-line code base as "non-productive" and a "complete waste of our programmer resources".&lt;ref&gt;{{cite journal | url=https://books.google.com/books?id=d514ApKzvjYC | title=User Threatens Suit Over Ansi Cobol-80 | journal=Computerworld | volume=15 | issue=4 | pages=1, 8 | first=Rita | last=Shoor | issn=0010-4841 | date=26 January 1981}}&lt;/ref&gt;
Later that year, the [[Data Processing Management Association]] (DPMA) said it was "strongly opposed" to the new standard, citing "prohibitive" conversion costs and enhancements that were "forced on the user".&lt;ref&gt;{{cite journal | url=https://books.google.com/books?id=1REkdf3I86oC | title=DPMA Takes Stand Against Cobol Draft | journal=Computerworld | volume=15 | issue=43 | pages=1–2 | date=26 October 1981 | first=Rita | last=Shoor | issn=0010-4841}}&lt;/ref&gt;&lt;ref name="Computerworld 19 37"&gt;{{cite journal | url=https://books.google.com/books?id=zrOC44tBR68C&amp;pg=PA8 | title=Revised Cobol standard may be ready in late '85 | journal=Computerworld | volume=19 | issue=37 | pages=1, 8 | first=John | last=Gallant | date=16 September 1985 | issn=0010-4841}}&lt;/ref&gt;

During the first public review period, the committee received 2,200 responses, of which 1,700 were negative form letters.&lt;ref name="Computerworld Garfunkel"&gt;{{cite journal | url=https://books.google.com/books?id=zrOC44tBR68C&amp;pg=PA41 | title=Expert addresses Cobol 85 standard | journal=Computerworld | volume=19 | issue=37 | pages=41, 48 | author=&lt;!-- Staff writer(s); no by-line --&gt; | date=16 September 1985 | issn=0010-4841}}&lt;/ref&gt;
Other responses were detailed analyses of the effect COBOL-80 would have on their systems; conversion costs were predicted to be at least 50 cents per line of code. Fewer than a dozen of the responses were in favor of the proposed standard.&lt;ref&gt;{{cite journal | url=https://books.google.com/books?id=Wz-oh7ZQo8MC | title=Responses to Cobol-80 Overwhelmingly Negative | journal=Computerworld | volume=16 | issue=11 | pages=1, 5 | date=15 March 1982 | first=Lois | last=Paul | issn=0010-4841}}&lt;/ref&gt;

ISO TC97-SC5 installed in 1979 the international COBOL Experts Group, on initiative of [[Wim Ebbinkhuijsen]]. The group consisted of COBOL experts from many countries, including the USA. Its goal was to achieve mutual understanding and respect between ANSI and the rest of the world with regard to the need of new COBOL features. After three years, ISO changed the status of the group to a formal Working Group: [[ISO/IEC JTC 1/SC 22#History|WG4 COBOL]]. The group took primary ownership and development of the COBOL standard, where ANSI did most of the proposals.

In 1983, the DPMA withdrew its opposition to the standard, citing the responsiveness of the committee to public concerns. In the same year, a National Bureau of Standards study concluded that the proposed standard would present few problems.&lt;ref name="Computerworld 19 37" /&gt;&lt;ref&gt;{{cite journal | url=https://books.google.com/books?id=Of5OA6T_6UIC&amp;pg=PA1 | title=Study Sees Few Problems Switching to Cobol-8X | journal=Computerworld | volume=17 | issue=17 | pages=1, 6 | first=Lois | last=Paul | date=25 April 1983}}&lt;/ref&gt; A year later, a COBOL-80 compiler was released to [[DEC VAX]] users, who noted that conversion of COBOL-74 programs posed few problems. The new &lt;code&gt;EVALUATE&lt;/code&gt; statement and inline &lt;code&gt;PERFORM&lt;/code&gt; were particularly well received and improved productivity, thanks to simplified [[control flow]] and [[debugging]].&lt;ref&gt;{{cite journal | url=https://books.google.com/books?id=1qju5_k3q9AC&amp;pg=PA1 | title=DEC users get head start implementing Cobol-80 | journal=Computerworld | volume=18 | issue=47 | pages=1, 6 | first=Paul | last=Gillin | date=19 November 1984 | issn=0010-4841}}&lt;/ref&gt;

The second public review drew another 1,000 (mainly negative) responses, while the last drew just 25, by which time many concerns had been addressed.&lt;ref name="Computerworld 19 37"/&gt;

In 1985, the ISO Working Group 4 accepted the then-version of the ANSI proposed standard, made several changes and set it as the new ISO standard COBOL 85. It was published in late 1985.

Sixty features were changed or deprecated and many{{quantify|date=March 2014}} were added, such as:{{sfn|Garfunkel|1987|p=150}}&lt;ref&gt;{{cite book | url=https://books.google.com/books?id=N066w1XgJXcC&amp;pg=PA438&amp;lpg=PA438#v=onepage | title=COBOL Programming: Problems and Solutions | publisher=McGraw-Hill Education | pages=438–451 | isbn=978-0074603185 | first1=M. K. | last1=Roy | first2=D. Ghost | last2=Dastidar | date=1 June 1989 | edition=2nd | section=Features of COBOL-85}}&lt;/ref&gt;

* Scope terminators (&lt;code&gt;END-IF&lt;/code&gt;, &lt;code&gt;END-PERFORM&lt;/code&gt;, &lt;code&gt;END-READ&lt;/code&gt;, etc.)
* Nested subprograms
* &lt;code&gt;CONTINUE&lt;/code&gt;, a [[Placeholder (Computer syntax)|no-operation statement]]
* &lt;code&gt;EVALUATE&lt;/code&gt;, a [[switch statement]]
* &lt;code&gt;INITIALIZE&lt;/code&gt;, a statement that can set groups of data to their default values
* Inline &lt;code&gt;PERFORM&lt;/code&gt; loop bodies – previously, loop bodies had to be specified in a separate procedure
* Reference modification, which allows access to substrings
* I/O status codes.

The new standard was adopted by all national standard bodies, including ANSI.&lt;ref name="FS2003"/&gt;

Two amendments followed in 1989 and 1993, the first introducing intrinsic functions and the other providing corrections.&lt;ref name="FS2003" /&gt;

===COBOL 2002 and object-oriented COBOL===
In 1997, [[Gartner Group]] estimated that there were a total of 200 billion lines of COBOL in existence, which ran 80% of all business programs.&lt;ref&gt;{{cite web | url=http://fcw.com/Articles/2009/07/13/TECH-COBOL-turns-50.aspx | title=Cobol remains old standby at agencies despite showing its age | publisher=Public Sector Media Group | work=FCW | accessdate=26 April 2014 | date=9 July 2009 | last=Robinson | first=Brian}}&lt;/ref&gt;{{better source | reason=While this claim is ubiquitous, the actual Gartner report is needed to verify the claim. | date=January 2015}}

In the early 1990s, work began on adding object-orientation in the next full revision of COBOL. Object-oriented features were taken from [[C++]] and [[Smalltalk]].&lt;ref name="SW95"&gt;{{cite web | url=http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/1995/9510/9510e/9510e.htm | title=COBOL '97: A Status Report | work=Dr. Dobb's Journal | date=October 1995 | accessdate=21 April 2014 | last1=Saade | first1=Henry | first2=Ann | last2=Wallace | archive-url=https://web.archive.org/web/20140422232229/http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/1995/9510/9510e/9510e.htm | archive-date=22 April 2014 | url-status=dead }}&lt;/ref&gt;&lt;ref name="Arranga98"&gt;{{cite book | url=https://books.google.com/books?id=posN1cl6XFUC&amp;pg=PA15 | title=Object-Oriented COBOL | publisher=[[Cambridge University Press]] | page=15 | isbn=978-0132611404 | first1=Edmund C. | last1=Arranga | first2=Frank P. | last2=Coyle | date=February 1998 | quote=Object-Oriented COBOL's style reflects the influence of Smalltalk and C++.}}&lt;/ref&gt;
The initial estimate was to have this revision completed by 1997, and an ISO Committee Draft (CD) was available by 1997. Some vendors (including [[Micro Focus International|Micro Focus]], [[Fujitsu]], and [[IBM]]) introduced object-oriented syntax based on drafts of the full revision. The final approved ISO standard was approved and published in late 2002.&lt;ref name="cobolstandards.com"&gt;{{cite web | url=http://www.cobolstandards.com/ | title=COBOL Standards | accessdate=2 September 2014 | archiveurl=https://web.archive.org/web/20040331054413/http://www.cobolstandards.com/ | archivedate=31 March 2004 | publisher=Micro Focus | url-status=dead}}&lt;/ref&gt;

Fujitsu/GTSoftware,&lt;ref&gt;{{cite web | url=http://www.netcobol.com/product/netcobol-for-net/ | title=NetCOBOL for .Net | publisher=GTSoftware | work=netcobol.com | year=2013 | accessdate=29 January 2014 | url-status=dead | archiveurl=https://web.archive.org/web/20140708210107/http://www.netcobol.com/product/netcobol-for-net/ | archivedate=8 July 2014}}&lt;/ref&gt; Micro Focus and [[RainCode]] introduced object-oriented COBOL compilers targeting the [[.NET Framework]].

There were many other new features, many of which had been in the ''CODASYL COBOL Journal of Development'' since 1978 and had missed the opportunity to be included in COBOL-85.&lt;ref&gt;{{cite web | url=https://books.google.com/books?id=VQhbdDusHcsC&amp;pg=RA1-PA60 | title=A list of Codasyl Cobol features | work=Computerworld | date=10 September 1984 | accessdate=8 June 2014 | author=&lt;!-- Staff writer(s); No by-line --&gt; | page=ID/28 | issn=0010-4841 | volume=18 | issue=37}}&lt;/ref&gt; These other features included:{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|loc=Annex F}}{{sfn|Klein|2010|p=21}}

* Free-form code
* [[User-defined function]]s
* [[Recursion]]
* [[Locale (computer software)|Locale]]-based processing
* Support for extended character sets such as [[Unicode]]
* [[Floating-point]] and [[binary number|binary]] data types (until then, binary items were truncated based on their declaration's [[base-10]] specification)
* Portable arithmetic results
*[[Bit]] and [[Boolean data type|boolean]] data types
* [[Pointer (computer programming)|Pointers]] and syntax for getting and freeing storage
* The {{code|SCREEN SECTION}} for [[text-based user interface]]s
* The {{code|VALIDATE}} facility
* Improved interoperability with other programming languages and [[Application framework|framework environments]] such as .NET and [[Java (platform)|Java]].

Three [[Erratum|corrigenda]] were published for the standard: two in 2006 and one in 2009.&lt;ref name="WG4 Website"&gt;{{cite web | url=http://www.cobolstandard.info/wg4/wg4.html | title=JTC1/SC22/WG4 – COBOL | publisher=ISO | date=30 June 2010 | accessdate=27 April 2014 | archiveurl=https://web.archive.org/web/20140214225220/http://www.cobolstandard.info/wg4/wg4.html | archivedate=14 February 2014 | url-status=dead}}&lt;/ref&gt;

===COBOL 2014===
Between 2003 and 2009, three technical reports were produced describing [[finalizer|object finalization]], [[XML]] processing and [[collection class]]es for COBOL.&lt;ref name="WG4 Website"/&gt;

COBOL 2002 suffered from poor support: no compilers completely supported the standard. Micro Focus found that it was due to a lack of user demand for the new features and due to the abolition of the [[NIST]] test suite, which had been used to test compiler conformance. The standardization process was also found to be slow and under-resourced.&lt;ref&gt;{{cite web | url=http://www.cobolstandard.info/j4/files/08-0034.pdf | title=Thoughts on the Future of COBOL Standardization | date=27 February 2008 | accessdate=14 August 2014 | first1=John | last1=Billman | first2=Huib | last2=Klink | archiveurl=https://web.archive.org/web/20090711032647/http://www.cobolstandard.info/j4/files/08-0034.pdf | archivedate=11 July 2009 | url-status=dead}}&lt;/ref&gt;

COBOL 2014 includes the following changes:{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=Annex E}}
* Portable arithmetic results have been replaced by [[IEEE 754]] data types
* Major features have been made optional, such as the &lt;code&gt;VALIDATE&lt;/code&gt; facility, the report writer and the screen-handling facility.
* Method overloading
* Dynamic capacity tables (a feature dropped from the draft of COBOL 2002)&lt;ref&gt;{{cite web | url=http://www.microfocus.com/Standards/ | title=J4: COBOL Standardization | publisher=Micro Focus | date=2 December 1998 | accessdate=12 July 2014 | archiveurl=https://web.archive.org/web/19990224043617/http://www.microfocus.com/Standards/ | archivedate=24 February 1999 | url-status=dead | first=Don | last=Schricker}}&lt;/ref&gt;

===Legacy===
COBOL programs are used globally in governments and businesses and are running on diverse operating systems such as [[z/OS]], [[z/VSE]], [[ICL VME|VME]], [[Unix]], [[OpenVMS]] and [[Microsoft Windows|Windows]]. In 1997, the [[Gartner Group]] reported that 80% of the world's business ran on COBOL with over 200 billion lines of code and 5 billion lines more being written annually.&lt;ref&gt;{{cite journal |url=http://proc.isecon.org/2000/126/ISECON.2000.Kizior.pdf | title=Does COBOL Have a Future? |accessdate=30 September 2012 |first1=Ronald J. |last1=Kizior |first2=Donald |last2=Carr |first3=Paul |last3=Halpern |journal=The Proceedings of the Information Systems Education Conference 2000 |volume=17 |issue=126 | url-status=dead | archiveurl=https://web.archive.org/web/20160817115437/http://proc.isecon.org/2000/126/ISECON.2000.Kizior.pdf | archivedate=17 August 2016}}&lt;/ref&gt;

Near the end of the 20th century, the [[year 2000 problem]] (Y2K) was the focus of significant COBOL programming effort, sometimes by the same programmers who had designed the systems decades before. The particular level of effort required to correct COBOL code has been attributed{{by whom|date=March 2014}} to the large amount of business-oriented COBOL, as business applications use dates heavily, and to fixed-length data fields. After the clean-up effort put into these programs for Y2K, a 2003 survey found that many remained in use.{{sfn|Carr|Kizior|2003|p=16}}
The authors said that the survey data suggest "a gradual decline in the importance of Cobol in application development over the [following] 10 years unless ... integration with other languages and technologies can be adopted".{{sfn|Carr|Kizior|2003|p=10}}

In 2006 and 2012, ''[[Computerworld]]'' surveys found that over 60% of organizations used COBOL (more than [[C++]] and [[Visual Basic .NET]]) and that for half of those, COBOL was used for the majority of their internal software.&lt;ref name="Computerworld Not Dead Yet"&gt;{{cite web | url=http://www.computerworld.com/s/article/266156/Cobol_Not_Dead_Yet | title=Cobol: Not Dead Yet | work=Computerworld | date=4 October 2006 | accessdate=27 April 2014 | last=Mitchell | first=Robert L.}}&lt;/ref&gt;&lt;ref&gt;{{cite web | url=http://www.computerworld.com/s/article/9225099/Cobol_brain_drain_Survey_results | title=Cobol brain drain: Survey results | work=Computerworld | date=14 March 2012 | accessdate=27 April 2014 | author=&lt;!-- N/A --&gt;}}&lt;/ref&gt; 36% of managers said they planned to migrate from COBOL, and 25% said they would like to if it was cheaper. Instead, some businesses have migrated their systems from expensive mainframes to cheaper, more modern systems, while maintaining their COBOL programs.&lt;ref name="Computerworld Not Dead Yet" /&gt;

Testimony before the [[Committee on Oversight and Government Reform|House of Representatives]] in 2016 indicated that COBOL is still in use by many federal agencies.&lt;ref name = "Powner, GAO, 2016" &gt;{{ cite web | url = https://www.gao.gov/assets/680/677454.pdf | title = Federal Agencies Need to Address Aging Legacy Systems | access-date = 19 July 2019 | first = David A. | last = Powner | date = 25 May 2016 | website = [[Government Accountability Office]] | quote = Several agencies, such as the Department of Agriculture (USDA), DHS, HHS, Justice, Treasury, and VA, reported using Common Business Oriented Language (COBOL)—a programming language developed in the late 1950s and early 1960s—to program their legacy systems. It is widely known that agencies need to move to more modern, maintainable languages, as appropriate and feasible. | page = 18 | archive-url = https://web.archive.org/web/20160615044750/https://www.gao.gov/assets/680/677454.pdf | archive-date = 15 June 2016 | df = dmy-all }}&lt;/ref&gt; [[Reuters]] reported in 2017 that 43% of banking systems still used COBOL with over 200 million lines of COBOL code in use.&lt;ref&gt;{{cite web | url = http://fingfx.thomsonreuters.com/gfx/rngs/USA-BANKS-COBOL/010040KH18J/index.html | title = COBOL blues | accessdate = April 8, 2020 | publisher = [[Reuters]] }}&lt;/ref&gt;

By 2019, the number of COBOL programmers was shrinking fast due to retirements, leading to an impending skills gap in business and government organizations which still use mainframe systems for high-volume transaction processing. Efforts to rewrite systems in newer languages have proven expensive and problematic, as has the outsourcing of code maintenance, thus proposals to train more people in COBOL are advocated.&lt;ref&gt;{{cite journal | url = https://ibmsystemsmag.com/IBM-Z/10/2019/closing-cobol-programming-skills-gap | title = Closing the COBOL Programming Skills Gap |last1=Teplitzky |first1=Phil | accessdate = June 11, 2020 | publisher = IBM Systems Magazine, IBM Z | date = 25 October 2019 }}&lt;/ref&gt;

During the [[COVID-19 pandemic]] and the ensuing surge of unemployment, several US states reported a shortage of skilled COBOL programmers to support the legacy systems used for unemployment benefit management. Many of these systems had been in the process of conversion to more modern programming languages prior to the pandemic, but the process had to be put on hold.&lt;ref&gt;{{cite web | url = https://www.cnn.com/2020/04/08/business/coronavirus-cobol-programmers-new-jersey-trnd/index.html | title = Wanted urgently: People who know a half century-old computer language so states can process unemployment claims | first = Alicia | last= Lee | date = April 8, 2020 | accessdate = April 8, 2020 | work =[[CNN]] }}&lt;/ref&gt; Similarly, the US [[Internal Revenue Service]] scrambled to patch its COBOL-based [[Individual Master File]] in order to disburse the tens of millions of payments mandated by the [[Coronavirus Aid, Relief, and Economic Security Act]].&lt;ref&gt;{{cite news|last1=Long|first1=Heather|last2=Stein|first2=Jeff|last3=Rein|first3=Lisa|last4=Romm|first4=Tony|title=Stimulus checks and other coronavirus relief hindered by dated technology and rocky government rollout|work=[[Washington Post]]|date=17 April 2020|access-date=19 April 2020|url=https://www.washingtonpost.com/business/2020/04/17/stimulus-unemployment-checks-delays-government-delays/}}&lt;/ref&gt;

==Features==

===Syntax===
COBOL has an English-like syntax, which is used to describe nearly everything in a program. For example, a condition can be expressed as &amp;nbsp;{{code|x IS GREATER THAN y|lang=cobolfree}} or more concisely as &amp;nbsp;{{code|x GREATER y|lang=cobolfree}}&amp;nbsp; or &amp;nbsp;{{code|x &gt; y|lang=cobolfree}}. More complex conditions can be "abbreviated" by removing repeated conditions and variables. For example, &amp;nbsp;{{code|1=a &gt; b AND a &gt; c OR a = d|lang=cobolfree}}&amp;nbsp; can be shortened to {{code|1=a &gt; b AND c OR = d|lang=cobolfree}}. To support this English-like syntax, COBOL has over 300 [[keyword (computer programming)|keywords]].{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ 8.9}}{{efn|Vendor-specific extensions cause many implementations to have far more: one implementation recognizes over 1,100 keywords.&lt;ref&gt;{{cite web | url=http://documentation.microfocus.com/help/topic/com.microfocus.eclipse.infocenter.visualcobol.vs2013/HRLHLHARES01U005.html | title=Reserved Words Table | publisher=[[Micro Focus]] | work=Micro Focus Visual COBOL 2.2 COBOL Language Reference | accessdate=3 March 2014}}&lt;/ref&gt;}} Some of the keywords are simple alternative or pluralized spellings of the same word, which provides for more English-like statements and clauses; e.g., the {{code|IN}} and {{code|OF}} keywords can be used interchangeably, as can {{code|IS}} and {{code|ARE}}, and {{code|VALUE}} and {{code|VALUES}}.

Each COBOL program is made up of four basic [[lexical items]]: words, literals, picture character-strings (see {{slink||PICTURE clause}}) and separators. Words include reserved words and user-defined identifiers. They are up to 31 characters long and may include letters, digits, hyphens and underscores. Literals include numerals (e.g. {{code|12}}) and strings (e.g. {{code|'Hello!'}}).{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ 8.3.1.2}} Separators include the space character and commas and semi-colons followed by a space.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ 8.3.2}}

A COBOL program is split into four divisions: the identification division, the environment division, the data division and the procedure division. The identification division specifies the name and type of the source element and is where classes and interfaces are specified. The environment division specifies any program features that depend on the system running it, such as [[computer files|files]] and [[character sets]]. The data division is used to declare [[variable (computer science)|variable]]s and [[parameter (computer programming)|parameter]]s. The procedure division contains the program's [[statement (computer science)|statement]]s. Each division is sub-divided into sections, which are made up of paragraphs.

====Metalanguage====

COBOL's syntax is usually described with a unique [[metalanguage]] using braces, brackets, bars and underlining. The metalanguage was developed for the original COBOL specifications. Although [[Backus–Naur form]] did exist at the time, the committee had not heard of it.{{sfn|Shneiderman|1985|p=349}}

{| class="wikitable"
|+ Elements of COBOL's metalanguage
|-
! Element
! Appearance
! Function
|-
|-
| All capitals
| EXAMPLE
| Reserved word
|-
| Underlining
| {{underline|EXAMPLE}}
| The reserved word is compulsory
|-
| Braces
| { }
| Only one option may be selected
|-
| Brackets
| []
| Zero or one options may be selected
|-
| Ellipsis
| ...
| The preceding element may be repeated
|-
| rowspan="2" | Bars
| {{{pipe}} {{pipe}}}
| One or more options may be selected. Any option may only be selected once.
|-
| [{{pipe}} {{pipe}}]
| Zero or more options may be selected. Any option may only be selected once.
|}

As an example, consider the following description of an &lt;code&gt;ADD&lt;/code&gt; statement:

&lt;math&gt;
\begin{array}{l}
  \underline{\text{ADD}}\,
  \begin{Bmatrix}
    \text{identifier-1} \\
    \text{literal-1}
  \end{Bmatrix}\dots
  \;\underline{\text{TO}}\,\left\{\text{identifier-2}\,\left[\,\underline{\text{ROUNDED}}\,\right]\right\}\dots
  \\

  \quad
  \left[\left|\begin{array}{l}
     \text{ON}\,\underline{\text{SIZE}}\,\underline{\text{ERROR}}\,\text{imperative-statement-1} \\
     \underline{\text{NOT}}\,\text{ON}\,\underline{\text{SIZE}}\,\underline{\text{ERROR}}\,\text{imperative-statement-2} \\
  \end{array}\right|\right]
  \\

  \quad
  \left[\,\underline{\text{END-ADD}}\,\right]
\end{array}
&lt;/math&gt;

This description permits the following variants:

&lt;syntaxhighlight lang="cobolfree"&gt;
ADD 1 TO x
ADD 1, a, b TO x ROUNDED, y, z ROUNDED

ADD a, b TO c
    ON SIZE ERROR
        DISPLAY "Error"
END-ADD

ADD a TO b
    NOT SIZE ERROR
        DISPLAY "No error"
    ON SIZE ERROR
        DISPLAY "Error"
&lt;/syntaxhighlight&gt;

===Code format===
COBOL can be written in two formats: fixed (the default) or free. In fixed-format, code must be aligned to fit in certain areas (a hold-over from using punched cards). Until COBOL 2002, these were:

{| class="wikitable"
|-
! Name
! Column(s)
! Usage
|-
| Sequence number area
| 1–6
| Originally used for card/line numbers (facilitating mechanical punched card sorting to assure intended program code sequence after manual editing/handling), this area is ignored by the compiler
|-
| Indicator area
| 7
| The following characters are allowed here:
* &lt;code&gt;*&lt;/code&gt; – Comment line
* &lt;code&gt;/&lt;/code&gt; – Comment line that will be printed on a new page of a source listing
* &lt;code&gt;-&lt;/code&gt; – Continuation line, where words or literals from the previous line are continued
* &lt;code&gt;D&lt;/code&gt; – Line enabled in debugging mode, which is otherwise ignored
|-
| Area A
| 8–11
| This contains: &lt;code&gt;DIVISION&lt;/code&gt;, &lt;code&gt;SECTION&lt;/code&gt; and procedure headers; 01 and 77 level numbers and file/report descriptors
|-
| Area B
| 12–72
| Any other code not allowed in Area A
|-
| Program name area
| 73–
| Historically up to column 80 for punched cards, it is used to identify the program or sequence the card belongs to
|}

In COBOL 2002, Areas A and B were merged to form the program-text area, which now ends at an implementor-defined column.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|loc=§ F.2}}

COBOL 2002 also introduced free-format code. Free-format code can be placed in any column of the file, as in newer programming languages. Comments are specified using &lt;code&gt;*&gt;&lt;/code&gt;, which can be placed anywhere and can also be used in fixed-format source code. Continuation lines are not present, and the &lt;code&gt;&gt;&gt;PAGE&lt;/code&gt; directive replaces the &lt;code&gt;/&lt;/code&gt; indicator.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|loc=§ F.2}}

===Identification division===
The identification division identifies the following code entity and contains the definition of a class or interface.

====Object-oriented programming====
[[class (computer programming)|Classes]] and [[Interface (object-oriented programming)|interfaces]] have been in COBOL since 2002. Classes have factory objects, containing class [[method (computer programming)|methods]] and variables, and instance objects, containing instance methods and variables.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ D.18.2}} Inheritance and interfaces provide [[polymorphism (computer science)|polymorphism]]. Support for [[generic programming]] is provided through parameterized classes, which can be instantiated to use any class or interface. Objects are stored as references which may be restricted to a certain type. There are two ways of calling a method: the {{code|INVOKE}} statement, which acts similarly to {{code|CALL}}, or through inline method invocation, which is analogous to using functions.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ D.18}}

&lt;syntaxhighlight lang="cobolfree"&gt;
*&gt; These are equivalent.
INVOKE my-class "foo" RETURNING var
MOVE my-class::"foo" TO var *&gt; Inline method invocation
&lt;/syntaxhighlight&gt;

COBOL does not provide a way to [[Member visibility|hide]] methods. Class data can be hidden, however, by declaring it without a [[property (programming)|{{code|PROPERTY}}]] clause, which leaves the user with no way to access it.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|p=108}} [[Method overloading]] was added in COBOL 2014.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|p=896}}

===Environment division===
The environment division contains the configuration section and the input-output section. The configuration section is used to specify variable features such
as currency signs, locales and character sets. The input-output section contains file-related information.

====Files====
COBOL supports three file formats, or ''{{dfn|organizations}}'': sequential, indexed and relative. In sequential files, records are contiguous and must be traversed [[sequential access|sequentially]], similarly to a [[linked list]]. Indexed files have one or more indexes which allow records to be [[random access|randomly accessed]] and which can be sorted on them. Each record must have a [[unique key]], but other, ''{{dfn|alternate}}'', record keys need not be unique. Implementations of indexed files vary between vendors, although common implementations, such as [[C-ISAM|C&amp;#8209;ISAM]] and [[VSAM]], are based on IBM's [[ISAM]]. Relative files, like indexed files, have a unique record key, but they do not have alternate keys. A relative record's key is its ordinal position; for example, the 10th record has a key of 10. This means that creating a record with a key of 5 may require the creation of (empty) preceding records. Relative files also allow for both sequential and random access.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ D.2.1}}

A common non-standard extension is the ''{{dfn|line sequential}}'' organization, used to process text files. Records in a file are terminated by a [[newline]] and may be of varying length.&lt;ref&gt;{{cite web | url=http://supportline.microfocus.com/documentation/books/nx30books/fhorgs.htm | title=File Organizations | publisher=Micro Focus | work=File Handling | date=1998 | accessdate=27 June 2014}}&lt;/ref&gt;

===Data division===
The data division is split into six sections which declare different items: the file section, for file records; the working-storage section, for [[static variable]]s; the local-storage section, for [[automatic variable]]s; the linkage section, for parameters and the return value; the report section and the screen section, for [[text-based user interface]]s.

====Aggregated data====
Data items in COBOL are declared hierarchically through the use of level-numbers which indicate if a data item is part of another. An item with a higher level-number is subordinate to an item with a lower one. Top-level data items, with a level-number of 1, are called ''{{dfn|records}}''. Items that have subordinate aggregate data are called ''{{dfn|group items}}''; those that do not are called ''{{dfn|elementary items}}''. Level-numbers used to describe standard data items are between 1 and 49.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ 8.5.1.2}}{{sfn|Cutler|2014|loc=Appendix A}}

&lt;syntaxhighlight lang="cobol"&gt;
       01  some-record.                   *&gt; Aggregate group record item
           05  num            PIC 9(10).  *&gt; Elementary item
           05  the-date.                  *&gt; Aggregate (sub)group record item
               10  the-year   PIC 9(4).   *&gt; Elementary item
               10  the-month  PIC 99.     *&gt; Elementary item
               10  the-day    PIC 99.     *&gt; Elementary item
&lt;/syntaxhighlight&gt;

In the above example, elementary item {{code|num}} and group item {{code|the-date}} are subordinate to the record {{code|some-record}}, while elementary items {{code|the-year}}, {{code|the-month}}, and {{code|the-day}} are part of the group item {{code|the-date}}.

Subordinate items can be disambiguated with the {{code|IN}} (or {{code|OF}}) keyword. For example, consider the example code above along with the following example:
&lt;syntaxhighlight lang="cobol"&gt;
       01  sale-date.
           05  the-year       PIC 9(4).
           05  the-month      PIC 99.
           05  the-day        PIC 99.
&lt;/syntaxhighlight&gt;

The names {{code|the-year}}, {{code|the-month}}, and {{code|the-day}} are ambiguous by themselves, since more than one data item is defined with those names. To specify a particular data item, for instance one of the items contained within the {{code|sale-date}} group, the programmer would use {{code|the-year IN sale-date}} (or the equivalent {{code|the-year OF sale-date}}). (This syntax is similar to the "dot notation" supported by most contemporary languages.)

====Other data levels====
A level-number of 66 is used to declare a re-grouping of previously defined items, irrespective of how those items are structured. This data level, also referred to by the associated {{dfn|{{code|RENAMES}} clause}}, is rarely used&lt;ref&gt;{{cite book | title=Sams Teach Yourself COBOL in 24 hours | publisher=[[Sams|SAMS Publishing]] | year=1999 | pages=40 | isbn=978-0672314537 | first=Thane | last=Hubbell | lccn=98087215}}&lt;/ref&gt; and, circa 1988, was usually found in old programs. Its ability to ignore the hierarchical and logical structure data meant its use was not recommended and many installations forbade its use.{{sfn|McCracken|Golden|1988|loc=§ 19.9}}
&lt;syntaxhighlight lang="cobol"&gt;
       01  customer-record.
           05  cust-key            PIC X(10).
           05  cust-name.
               10  cust-first-name PIC X(30).
               10  cust-last-name  PIC X(30).
           05  cust-dob            PIC 9(8).
           05  cust-balance        PIC 9(7)V99.
           
       66  cust-personal-details   RENAMES cust-name THRU cust-dob.
       66  cust-all-details        RENAMES cust-name THRU cust-balance.
&lt;/syntaxhighlight&gt;

A 77 level-number indicates the item is stand-alone, and in such situations is equivalent to the level-number 01. For example, the following code declares two 77-level data items, {{code|property-name}} and {{code|sales-region}}, which are non-group data items that are independent of (not subordinate to) any other data items:
&lt;syntaxhighlight lang="cobol"&gt;
       77  property-name      PIC X(80).
       77  sales-region       PIC 9(5).
&lt;/syntaxhighlight&gt;

An 88 level-number declares a ''{{dfn|condition name}}'' (a so-called 88-level) which is true when its parent data item contains one of the values specified in its {{code|VALUE}} clause.{{sfn|Cutler|2014|loc=§ 5.8.5}} For example, the following code defines two 88-level condition-name items that are true or false depending on the current character data value of the {{code|wage-type}} data item. When the data item contains a value of {{code|'H'}}, the condition-name {{code|wage-is-hourly}} is true, whereas when it contains a value of {{code|'S'}} or {{code|'Y'}}, the condition-name {{code|wage-is-yearly}} is true. If the data item contains some other value, both of the condition-names are false.
&lt;syntaxhighlight lang="cobol"&gt;
       01  wage-type          PIC X.
           88  wage-is-hourly VALUE "H".
           88  wage-is-yearly VALUE "S", "Y".
&lt;/syntaxhighlight&gt;

====Data types====
Standard COBOL provides the following data types:{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ 8.5.2}}

{| class="wikitable"
|-
! Data type
! Sample declaration
! Notes
|-
| Alphabetic
| {{code|PIC A(30)|lang=cobolfree}}
| May only contain letters or spaces
|-
| Alphanumeric
| {{code|PIC X(30)|lang=cobolfree}}
| May contain any characters
|-
| Boolean
| {{code|PIC 1 USAGE BIT|lang=cobolfree}}
| Data stored in the form of 0s and 1s, as a binary number
|-
| Index
| {{code|USAGE INDEX|lang=cobolfree}}
| Used to reference table elements
|-
| National
| {{code|PIC N(30)|lang=cobolfree}}
| Similar to alphanumeric, but using an extended character set, e.g. [[UTF-8]]
|-
| Numeric
| {{code|PIC 9(5)V9(5)|lang=cobolfree}}
| May contain only numbers
|-
| Object
| {{code|USAGE OBJECT REFERENCE|lang=cobolfree}}
| May reference either an object or &lt;code&gt;NULL&lt;/code&gt;
|-
| Pointer
| {{code|USAGE POINTER|lang=cobolfree}}
|
|}

Type safety is variable in COBOL. Numeric data is converted between different representations and sizes silently and alphanumeric data can be placed in any data item that can be stored as a string, including numeric and group data.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ 14.9.24}} In contrast, object references and pointers may only be assigned from items of the same type and their values may be restricted to a certain type.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ 14.9.35}}

=====PICTURE clause=====
A {{code|PICTURE}} (or {{code|PIC}}) clause is a string of characters, each of which represents a portion of the data item and what it may contain. Some picture characters specify the type of the item and how many characters or digits it occupies in memory. For example, a {{code|9}} indicates a decimal digit, and an {{code|S}} indicates that the item is [[signedness|signed]]. Other picture characters (called ''{{dfn|insertion}}'' and ''{{dfn|editing}}'' characters) specify how an item should be formatted. For example, a series of {{code|+}} characters define character positions as well as how a leading sign character is to be positioned within the final character data; the rightmost non-numeric character will contain the item's sign, while other character positions corresponding to a {{code|+}} to the left of this position will contain a space. Repeated characters can be specified more concisely by specifying a number in parentheses after a picture character; for example, {{code|9(7)}} is equivalent to {{code|9999999}}. Picture specifications containing only digit ({{code|9}}) and sign ({{code|S}}) characters define purely ''{{dfn|numeric}}'' data items, while picture specifications containing alphabetic ({{code|A}}) or alphanumeric ({{code|X}}) characters define ''{{dfn|alphanumeric}}'' data items. The presence of other formatting characters define ''{{dfn|edited numeric}}'' or ''{{dfn|edited alphanumeric}}'' data items.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ 13.18.40}}

{| class="wikitable"
|+ Examples
|-
! {{code|PICTURE}} clause
! Value in
! Value out
|-
| rowspan="2" | {{code|PIC 9(5)|lang=cobolfree}}
| {{code|100}}
| {{code|00100}}
|-
| {{code|"Hello"}}
| {{code|"Hello"}} (this is legal, but results in [[undefined behavior]]){{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ 14.9.24}}
|-
| {{code|PIC +++++|lang=cobolfree}}
| {{code|-10}}
| &lt;code&gt;"&amp;nbsp;&amp;nbsp;-10"&lt;/code&gt;&lt;!-- {{code|   -10}} deletes one of the spaces --&gt; (note leading spaces)
|-
| {{code|PIC 99/99/9(4)|lang=cobolfree}}
| {{code|31042003}}
| {{code|"31/04/2003"}}
|-
| rowspan="2" | {{code|PIC *(4)9.99|lang=cobolfree}}
| {{code|100.50}}
| {{code|"**100.50"}}
|-
| &lt;code&gt;0&lt;/code&gt; &lt;!-- {{code|0}} produces a space for some reason --&gt;
| {{code|"****0.00"}}
|-
| {{code|PIC X(3)BX(3)BX(3)|lang=cobolfree}}
| {{code|"ABCDEFGHI"}}
| {{code|"ABC DEF GHI"}}
|}

=====USAGE clause=====
The {{code|USAGE}} clause declares the format data is stored in. Depending on the data type, it can either complement or be used instead of a {{code|PICTURE}} clause. While it can be used to declare pointers and object references, it is mostly geared towards specifying numeric types. These numeric formats are:{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ 13.18.60.3}}

* Binary, where a minimum size is either specified by the &lt;code&gt;PICTURE&lt;/code&gt; clause or by a &lt;code&gt;USAGE&lt;/code&gt; clause such as &lt;code&gt;BINARY-LONG&lt;/code&gt;.
* {{code|USAGE COMPUTATIONAL|lang=cobolfree}}, where data may be stored in whatever format the implementation provides; often equivalent to &amp;nbsp;{{code|USAGE BINARY|lang=cobolfree}}
* {{code|USAGE DISPLAY|lang=cobolfree}}, the default format, where data is stored as a string
* Floating-point, in either an implementation-dependent format or according to IEEE 754.
* {{code|USAGE NATIONAL|lang=cobolfree}}, where data is stored as a string using an extended character set
* {{code|USAGE PACKED-DECIMAL|lang=cobolfree}}, where data is stored in the smallest possible decimal format (typically [[packed binary-coded decimal]])

====Report writer====
The report writer is a [[declarative programming|declarative facility]] for creating reports. The programmer need only specify the report layout and the data required to produce it, freeing them from having to write code to handle things like page breaks, data formatting, and headings and footings.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|p=855}}

Reports are associated with report files, which are files which may only be written to through report writer statements.

&lt;syntaxhighlight lang="cobol"&gt;
       FD  report-out REPORT sales-report.
&lt;/syntaxhighlight&gt;

Each report is defined in the report section of the data division. A report is split into report groups which define the report's headings, footings and details. Reports work around hierarchical ''{{dfn|control breaks}}''. Control breaks occur when a key variable changes it value; for example, when creating a report detailing customers' orders, a control break could occur when the program reaches a different customer's orders. Here is an example report description for a report which gives a salesperson's sales and which warns of any invalid records:

&lt;syntaxhighlight lang="cobol"&gt;
       RD  sales-report
           PAGE LIMITS 60 LINES
           FIRST DETAIL 3
           CONTROLS seller-name.

       01  TYPE PAGE HEADING.
           03  COL 1                    VALUE "Sales Report".
           03  COL 74                   VALUE "Page".
           03  COL 79                   PIC Z9 SOURCE PAGE-COUNTER.

       01  sales-on-day TYPE DETAIL, LINE + 1.
           03  COL 3                    VALUE "Sales on".
           03  COL 12                   PIC 99/99/9999 SOURCE sales-date.
           03  COL 21                   VALUE "were".
           03  COL 26                   PIC $$$$9.99 SOURCE sales-amount.

       01  invalid-sales TYPE DETAIL, LINE + 1.
           03  COL 3                    VALUE "INVALID RECORD:".
           03  COL 19                   PIC X(34) SOURCE sales-record.

       01  TYPE CONTROL HEADING seller-name, LINE + 2.
           03  COL 1                    VALUE "Seller:".
           03  COL 9                    PIC X(30) SOURCE seller-name.
&lt;/syntaxhighlight&gt;

The above report description describes the following layout:
&lt;pre&gt;
Sales Report                                                             Page  1

Seller: Howard Bromberg
  Sales on 10/12/2008 were $1000.00
  Sales on 12/12/2008 were    $0.00
  Sales on 13/12/2008 were   $31.47
  INVALID RECORD: Howard Bromberg             XXXXYY

Seller: Howard Discount
...
Sales Report                                                            Page 12

  Sales on 08/05/2014 were  $543.98
  INVALID RECORD: William Selden      12O52014FOOFOO
  Sales on 30/05/2014 were    $0.00
&lt;/pre&gt;

Four statements control the report writer: {{code|INITIATE}}, which prepares the report writer for printing; {{code|GENERATE}}, which prints a report group; {{code|SUPPRESS}}, which suppresses the printing of a report group; and {{code|TERMINATE}}, which terminates report processing. For the above sales report example, the procedure division might look like this:

&lt;syntaxhighlight lang="cobol"&gt;
           OPEN INPUT sales, OUTPUT report-out
           INITIATE sales-report
 
           PERFORM UNTIL 1 &lt;&gt; 1
               READ sales
                   AT END
                       EXIT PERFORM
               END-READ
 
               VALIDATE sales-record
               IF valid-record
                   GENERATE sales-on-day
               ELSE
                   GENERATE invalid-sales
               END-IF
           END-PERFORM
 
           TERMINATE sales-report
           CLOSE sales, report-out
           .
&lt;/syntaxhighlight&gt;

Use of the Report Writer facility tended to vary considerably; some organizations used it extensively and some not at all.{{sfn|McCracken|1976|p=338}}  In addition, implementations of Report Writer ranged in quality, with those at the lower end sometimes using excessive amounts of memory at runtime.{{sfn|McCracken|1976|p=338}}

===Procedure division===

====Procedures====
The sections and paragraphs in the procedure division (collectively called procedures) can be used as [[label (programming)|labels]] and as simple [[subroutines]]. Unlike in other divisions, paragraphs do not need to be in sections.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ 14.4}}
Execution goes down through the procedures of a program until it is terminated.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ 14.6.3}}
To use procedures as subroutines, the {{code|PERFORM}} verb is used.

A {{code|PERFORM}} statement somewhat resembles a procedure call in a modern language in the sense that execution returns to the code following the {{code|PERFORM}} statement at the end of the called code; however, it does not provide any mechanism for [[Parameter (computer programming)|parameter passing]] or for returning a result value. If a subroutine is invoked using a simple statement like {{code|PERFORM subroutine|lang=cobolfree}}, then control returns at the end of the called procedure. However, {{code|PERFORM}} is unusual in that it may be used to call a range spanning a sequence of several adjacent procedures. This is done with the {{code|PERFORM sub-1 THRU sub-n|lang=cobolfree}} construct:

&lt;syntaxhighlight lang="cobolfree"&gt;
PROCEDURE so-and-so.
    PERFORM ALPHA
    PERFORM ALPHA THRU GAMMA
    STOP RUN.
ALPHA.
    DISPLAY 'A'.
BETA.
    DISPLAY 'B'.
GAMMA.
    DISPLAY 'C'.
&lt;/syntaxhighlight&gt;

The output of this program will be: "A A B C".

{{code|PERFORM}} also differs from conventional procedure calls in that there is, at least traditionally, no notion of a call stack. As a consequence, nested invocations are possible (a sequence of code being {{code|PERFORM}}'ed may execute a {{code|PERFORM}} statement itself), but require extra care if parts of the same code are executed by both invocations. The problem arises when the code in the inner invocation reaches the exit point of the outer invocation. More formally, if control passes through the exit point of a {{code|PERFORM}} invocation that was called earlier but has not completed yet, the COBOL 2002 standard officially stipulates that the behaviour is [[Undefined behavior|undefined]].

The reason is that COBOL, rather than a "return address", operates with what may be called a continuation address. When control flow reaches the end of any procedure, the continuation address is looked up and control is transferred to that address. Before the program runs, the continuation address for every procedure is initialised to the start address of the procedure that comes next in the program text so that, if no {{code|PERFORM}} statements happen, control flows from top to bottom through the program. But when a {{code|PERFORM}} statement executes, it modifies the continuation address of the called procedure (or the last procedure of the called range, if {{code|PERFORM THRU}} was used), so that control will return to the call site at the end. The original value is saved and is restored afterwards, but there is only one storage position. If two nested invocations operate on overlapping code, they may interfere which each other's management of the continuation address in several ways.&lt;ref name="FR99"&gt;{{cite conference | url=http://pages.cs.wisc.edu/~ramali/Papers/paste99.pdf | title=Identifying Procedural Structure in Cobol Programs | doi=10.1145/381788.316163 | first1=John | last1=Field | first2=G. | last2=Ramalingam | conference=PASTE '99 | ISBN=1581131372 | conferenceurl=http://cseweb.ucsd.edu/~wgg/paste99.html | date=September 1999}}&lt;/ref&gt;&lt;ref name="VV07"&gt;{{cite journal | url=http://www.cs.vu.nl/~nveerman/research/minefield/minefield.pdf | title=Cobol minefield detection | journal=Software—Practice and Experience |date=November 2006 | volume=36 | issue=14 | doi=10.1002/spe.v36:14 | archiveurl=https://web.archive.org/web/20070306135410/http://www.cs.vu.nl/~nveerman/research/minefield/minefield.pdf | url-status=dead | archivedate=6 March 2007 | last1=Veerman | first1=Niels | last2=Verhoeven | first2=Ernst-Jan }}&lt;/ref&gt;

The following example (taken from Veerman/Verhoeven, 2006) illustrates the problem:

&lt;syntaxhighlight lang="cobolfree"&gt;
LABEL1.
    DISPLAY '1'
    PERFORM LABEL2 THRU LABEL3
    STOP RUN.
LABEL2.
    DISPLAY '2'
    PERFORM LABEL3 THRU LABEL4.
LABEL3.
    DISPLAY '3'.
LABEL4.
    DISPLAY '4'.
&lt;/syntaxhighlight&gt;

One might expect that the output of this program would be "1 2 3 4 3": After displaying "2", the second {{code|PERFORM}} causes "3" and "4" to be displayed, and then the first invocation continues on with "3". In traditional COBOL implementations, this is not the case. Rather, the first {{code|PERFORM}} statement sets the continuation address at the end of {{code|LABEL3}} so that it will jump back to the call site inside {{code|LABEL1}}. The second {{code|PERFORM}} statement sets the return at the end of {{code|LABEL4}} but does not modify the continuation address of {{code|LABEL3}}, expecting it to be the default continuation. Thus, when the inner invocation arrives at the end of {{code|LABEL3}}, it jumps back to the outer {{code|PERFORM}} statement, and the program stops having printed just "1 2 3". On the other hand, in some COBOL implementations like the open-source TinyCOBOL compiler, the two {{code|PERFORM}} statements do not interfere with each other and the output is indeed "1 2 3 4 3". Therefore, the behaviour in such cases is not only (perhaps) surprising, it is also not portable.&lt;ref name="VV07"/&gt;

A special consequence of this limitation is that {{code|PERFORM}} cannot be used to write recursive code. Another simple example to illustrate this (slightly simplified from Veerman/Verhoeven, 2006):

&lt;syntaxhighlight lang="cobolfree"&gt;
    MOVE 1 TO A
    PERFORM LABEL
    STOP RUN.
LABEL.
    DISPLAY A
    IF A &lt; 3
        ADD 1 TO A
        PERFORM LABEL
    END-IF
    DISPLAY 'END'.
&lt;/syntaxhighlight&gt;

One might expect that the output is "1 2 3 END END END", and in fact that is what some COBOL compilers will produce. But some compilers, like IBM COBOL, will produce code that prints "1 2 3 END END END END ..." and so on, printing "END" over and over in an endless loop. Since there is limited space to store backup continuation addresses, the backups get overwritten in the course of recursive invocations, and all that can be restored is the jump back to {{code|DISPLAY 'END'}}.&lt;ref name="VV07"/&gt;

====Statements====
COBOL 2014 has 47 statements (also called ''{{dfn|verbs}}''),{{sfn|ISO/IEC JTC 1/SC 22/WG4|2014|loc=§ 14.9}} which can be grouped into the following broad categories: control flow, I/O, data manipulation and the report writer. The report writer statements are covered in the [[#Report writer|report writer section]].

=====Control flow=====
COBOL's [[conditional (computer programming)|conditional statements]] are {{code|IF}} and {{code|EVALUATE}}. {{code|EVALUATE}} is a [[switch statement|switch-like statement]] with the added capability of evaluating multiple values and conditions. This can be used to implement [[decision table]]s. For example, the following might be used to control a [[CNC lathe]]: &lt;!-- a more common appliance would be more suitable. --&gt;

&lt;syntaxhighlight lang="cobolfree"&gt;
EVALUATE TRUE ALSO desired-speed ALSO current-speed
    WHEN lid-closed ALSO min-speed THRU max-speed ALSO LESS THAN desired-speed
        PERFORM speed-up-machine
    WHEN lid-closed ALSO min-speed THRU max-speed ALSO GREATER THAN desired-speed
        PERFORM slow-down-machine
    WHEN lid-open ALSO ANY ALSO NOT ZERO
        PERFORM emergency-stop
    WHEN OTHER
        CONTINUE
END-EVALUATE
&lt;/syntaxhighlight&gt;

The {{code|PERFORM}} statement is used to define loops which are executed {{em|until}} a condition is true (not {{em|while}} true, which is more common in other languages). It is also used to call procedures or ranges of procedures (see the [[#Procedures|procedures section]] for more details). {{code|CALL}} and {{code|INVOKE}} call subprograms and methods, respectively. The name of the subprogram/method is contained in a string which may be a literal or a data item.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§§ 14.9.4, 14.9.22}} Parameters can be passed [[call by reference|by reference]], by content (where a copy is passed by reference) or [[call by value|by value]] (but only if a [[function prototype|prototype]] is available).{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ D.6.5.2.2}}
{{code|CANCEL}} unloads subprograms from memory. {{code|GO TO}} causes the program to jump to a specified procedure.

The {{code|GOBACK}} statement is a [[return statement]] and the {{code|STOP}} statement stops the program. The {{code|EXIT}} statement has six different formats: it can be used as a return statement, a [[break statement]], a [[continue statement]], an end marker or to leave a procedure.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§ 14.9.13.1}}

[[Exception handling|Exceptions]] are raised by a {{code|RAISE}} statement and caught with a handler, or ''{{dfn|declarative}}'', defined in the {{code|DECLARATIVES}} portion of the procedure division. Declaratives are sections beginning with a {{code|USE}} statement which specify the errors to handle. Exceptions can be names or objects. {{code|RESUME}} is used in a declarative to jump to the statement after the one that raised the exception or to a procedure outside the {{code|DECLARATIVES}}. Unlike other languages, uncaught exceptions may not terminate the program and the program can proceed unaffected.

=====I/O=====
File I/O is handled by the self-describing {{code|OPEN}}, {{code|CLOSE}}, {{code|READ}}, and {{code|WRITE}} statements along with a further three: {{code|REWRITE}}, which updates a record; {{code|START}}, which selects subsequent records to access by finding a record with a certain key; and {{code|UNLOCK}}, which releases a [[lock (database)|lock]] on the last record accessed.

User interaction is done using {{code|ACCEPT}} and {{code|DISPLAY}}.

=====Data manipulation=====
The following verbs manipulate data:
* {{code|INITIALIZE}}, which sets data items to their default values.
* {{code|MOVE}}, which [[assignment (computer science)|assigns]] values to data items ; ''MOVE CORRESPONDING'' assigns corresponding like-named [[Record (computer science)#COBOL|fields]].
* {{code|SET}}, which has 15 formats: it can modify indices, assign object references and alter table capacities, among other functions.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=§14.9.35.1}}
* {{code|ADD}}, {{code|SUBTRACT}}, {{code|MULTIPLY}}, {{code|DIVIDE}}, and {{code|COMPUTE}}, which handle arithmetic (with {{code|COMPUTE}} assigning the result of a formula to a variable).
* {{code|ALLOCATE}} and {{code|FREE}}, which handle [[dynamic memory]].
* {{code|VALIDATE}}, which validates and distributes data as specified in an item's description in the data division.
* {{code|STRING}} and {{code|UNSTRING}}, which [[Concatenation|concatenate]] and split [[string (computer science)|string]]s, respectively.
* {{code|INSPECT}}, which tallies or replaces instances of specified [[substring]]s within a string.
* {{code|SEARCH}}, which searches a table for the first entry satisfying a condition.

Files and tables are sorted using {{code|SORT}} and the {{code|MERGE}} verb merges and sorts files. The {{code|RELEASE}} verb provides records to sort and {{code|RETURN}} retrieves sorted records in order.

====Scope termination====
Some statements, such as {{code|IF}} and {{code|READ}}, may themselves contain statements. Such statements may be terminated in two ways: by a period (''{{dfn|implicit termination}}''), which terminates ''all'' unterminated statements contained, or by a scope terminator, which terminates the nearest matching open statement.

&lt;syntaxhighlight lang="cobolfree"&gt;
*&gt; Terminator period ("implicit termination")
IF invalid-record
    IF no-more-records
        NEXT SENTENCE
    ELSE
        READ record-file
            AT END SET no-more-records TO TRUE.

*&gt; Scope terminators ("explicit termination")
IF invalid-record
    IF no-more-records
        CONTINUE
    ELSE
        READ record-file
            AT END SET no-more-records TO TRUE
        END-READ
    END-IF
END-IF
&lt;/syntaxhighlight&gt;

Nested statements terminated with a period are a common source of bugs.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|p=899}}{{sfn|McCracken|Golden|1988|loc=§ 8.4}} For example, examine the following code:

&lt;syntaxhighlight lang="cobolfree"&gt;
IF x
    DISPLAY y.
    DISPLAY z.
&lt;/syntaxhighlight&gt;

Here, the intent is to display &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; if condition &lt;code&gt;x&lt;/code&gt; is true. However, &lt;code&gt;z&lt;/code&gt; will be displayed whatever the value of &lt;code&gt;x&lt;/code&gt; because the &lt;code&gt;IF&lt;/code&gt; statement is terminated by an erroneous period after {{code|DISPLAY y|lang=cobolfree}}.

Another bug is a result of the [[dangling else problem]], when two &lt;code&gt;IF&lt;/code&gt; statements can associate with an &lt;code&gt;ELSE&lt;/code&gt;.

&lt;syntaxhighlight lang="cobolfree"&gt;
IF x
    IF y
        DISPLAY a
ELSE
    DISPLAY b.
&lt;/syntaxhighlight&gt;

In the above fragment, the &lt;code&gt;ELSE&lt;/code&gt; associates with the &amp;nbsp;{{code|IF y|lang=cobolfree}}&amp;nbsp; statement instead of the &amp;nbsp;{{code|IF x|lang=cobolfree}}&amp;nbsp; statement, causing a bug. Prior to the introduction of explicit scope terminators, preventing it would require &amp;nbsp;{{code|ELSE NEXT SENTENCE|lang=cobolfree}}&amp;nbsp; to be placed after the inner &lt;code&gt;IF&lt;/code&gt;.{{sfn|McCracken|Golden|1988|loc=§ 8.4}}

====Self-modifying code====
The original (1959) COBOL specification supported the infamous &amp;nbsp;{{code|ALTER X TO PROCEED TO Y|lang=cobolfree}}&amp;nbsp; statement, for which many compilers generated [[self-modifying code]]. &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; are procedure labels, and the single &amp;nbsp;{{code|GO TO|lang=cobolfree}}&amp;nbsp; statement in procedure &lt;code&gt;X&lt;/code&gt; executed after such an {{code|ALTER}} statement means &amp;nbsp;{{code|GO TO Y|lang=cobolfree}}&amp;nbsp; instead. Many compilers still support it,&lt;ref&gt;Examples of compiler support for {{code|ALTER}} can be seen in the following:

* {{cite web
 |last=Tiffin 
 |first=Brian 
 |title=September 2014 
 |url=http://sourceforge.net/p/open-cobol/discussion/cobol/thread/7dc2941f/#5ee9 
 |work=GNU Cobol 
 |date=18 September 2013 
 |accessdate=5 January 2014 
}}
* {{cite web
 |url=http://documentation.microfocus.com/help/topic/com.microfocus.eclipse.infocenter.visualcobol.vs2013/HRLHLHPDF803.html 
 |title=The ALTER Statement 
 |publisher=Micro Focus 
 |work=Micro Focus Visual COBOL 2.2 for Visual Studio 2013 COBOL Language Reference 
 |accessdate=5 January 2014 
}}
* {{cite web
 |url=http://www.csim.scu.edu.tw/~kuo/COBOL/COBOLCompiler/COBOL%E6%89%8B%E5%86%8A/cob_lrf.pdf 
 |title=ALTER Statement (Nucleus) 
 |publisher=Fujitsu 
 |work=COBOL85 Reference Manual 
 |date=November 1996 
 |accessdate=5 January 2014 
 |page=555 
 |archiveurl=https://web.archive.org/web/20140106031540/http://www.csim.scu.edu.tw/~kuo/COBOL/COBOLCompiler/COBOL%E6%89%8B%E5%86%8A/cob_lrf.pdf 
 |archivedate=6 January 2014 
 |url-status=dead 
}}
* {{cite web
 |url=http://pic.dhe.ibm.com/infocenter/pdthelp/v1r1/topic/com.ibm.entcobol.doc_5.1/PGandLR/ref/rlpsalte.html 
 |title=ALTER Statement 
 |publisher=IBM 
 |work=Enterprise COBOL for z/OS Language Reference 
 |date=June 2013 
 |accessdate=5 January 2014 
}}&lt;/ref&gt;
but it was deemed [[deprecation|obsolete]] in the COBOL 1985 standard and deleted in 2002.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|loc=§ F.1}}

The {{code|ALTER}} statement was poorly regarded because it undermined "locality of context" and made a program's overall logic difficult to comprehend.{{sfn|McCracken|1976|p=355}}  As textbook author [[Daniel D. McCracken]] wrote in 1976, when "someone who has never seen the program before must become familiar with it as quickly as possible, sometimes under critical time pressure because the program has failed ... the sight of a GO TO statement in a paragraph by itself, signaling as it does the existence of an unknown number of ALTER statements at unknown locations throughout the program, strikes fear in the heart of the bravest programmer."{{sfn|McCracken|1976|p=355}}

===Hello, world===
A "[[Hello, world]]" program in COBOL:
&lt;syntaxhighlight lang="cobol"&gt;
       IDENTIFICATION DIVISION.
       PROGRAM-ID. hello-world.
       PROCEDURE DIVISION.
           DISPLAY "Hello, world!"
           .
&lt;/syntaxhighlight&gt;

When the – now famous – [["Hello, World!" program]] example in ''[[The C Programming Language (book)|The C Programming Language]]'' was first published in 1978 a similar mainframe COBOL program sample would have been submitted through [[Job Control Language|JCL]], very likely using a punch card reader, and 80 column punch cards. The listing below, ''with an empty DATA DIVISION'', was tested using GNU/Linux and the System/370 [[Hercules emulator]] running [[MVS]] 3.8J. The JCL, written in July 2015, is derived from the Hercules tutorials and samples hosted by Jay Moseley.&lt;ref&gt;{{cite web | url=http://www.jaymoseley.com/hercules/compilers/cobol.htm | title=COBOL Compiler from MVT | date=17 January 2015 | accessdate=19 July 2015 | first=Jay | last=Moseley}}&lt;/ref&gt; In keeping with COBOL programming of that era, HELLO, WORLD is displayed in all capital letters.

&lt;syntaxhighlight lang="cobolfree"&gt;
//COBUCLG  JOB (001),'COBOL BASE TEST',                                 00010000
//             CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1)                        00020000
//BASETEST EXEC COBUCLG                                                 00030000
//COB.SYSIN DD *                                                        00040000
 00000* VALIDATION OF BASE COBOL INSTALL                                00050000
 01000 IDENTIFICATION DIVISION.                                         00060000
 01100 PROGRAM-ID. 'HELLO'.                                             00070000
 02000 ENVIRONMENT DIVISION.                                            00080000
 02100 CONFIGURATION SECTION.                                           00090000
 02110 SOURCE-COMPUTER.  GNULINUX.                                      00100000
 02120 OBJECT-COMPUTER.  HERCULES.                                      00110000
 02200 SPECIAL-NAMES.                                                   00120000
 02210     CONSOLE IS CONSL.                                            00130000
 03000 DATA DIVISION.                                                   00140000
 04000 PROCEDURE DIVISION.                                              00150000
 04100 00-MAIN.                                                         00160000
 04110     DISPLAY 'HELLO, WORLD' UPON CONSL.                           00170000
 04900     STOP RUN.                                                    00180000
//LKED.SYSLIB DD DSNAME=SYS1.COBLIB,DISP=SHR                            00190000
//            DD DSNAME=SYS1.LINKLIB,DISP=SHR                           00200000
//GO.SYSPRINT DD SYSOUT=A                                               00210000
//                                                                      00220000
&lt;/syntaxhighlight&gt;

After submitting the JCL, the MVS console displayed:

&lt;syntaxhighlight lang="text" highlight="10"&gt;
    19.52.48 JOB    3  $HASP100 COBUCLG  ON READER1     COBOL BASE TEST
    19.52.48 JOB    3  IEF677I WARNING MESSAGE(S) FOR JOB COBUCLG  ISSUED
    19.52.48 JOB    3  $HASP373 COBUCLG  STARTED - INIT 1 - CLASS A - SYS BSP1
    19.52.48 JOB    3  IEC130I SYSPUNCH DD STATEMENT MISSING
    19.52.48 JOB    3  IEC130I SYSLIB   DD STATEMENT MISSING
    19.52.48 JOB    3  IEC130I SYSPUNCH DD STATEMENT MISSING
    19.52.48 JOB    3  IEFACTRT - Stepname  Procstep  Program   Retcode
    19.52.48 JOB    3  COBUCLG    BASETEST  COB       IKFCBL00  RC= 0000
    19.52.48 JOB    3  COBUCLG    BASETEST  LKED      IEWL      RC= 0000
    19.52.48 JOB    3  +HELLO, WORLD
    19.52.48 JOB    3  COBUCLG    BASETEST  GO        PGM=*.DD  RC= 0000
    19.52.48 JOB    3  $HASP395 COBUCLG  ENDED
&lt;/syntaxhighlight&gt;

''Line 10 of the console listing above is highlighted for effect, the highlighting is not part of the actual console output''.

The associated compiler listing generated over four pages of technical detail and job run information, for the single line of output from the 14 lines of COBOL.

==Criticism and defense==

===Lack of structure===
In the 1970s, adoption of the [[structured programming]] paradigm was becoming increasingly widespread. [[Edsger Dijkstra]], a preeminent computer scientist, wrote a [[letter to the editor]] of [[Communications of the ACM]], published 1975 entitled "How do we tell truths that might hurt?", in which he was critical of COBOL and several other contemporary languages; remarking that "the use of COBOL cripples the mind".&lt;ref name="Dijkstra1"&gt;{{cite web|url=http://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD498.html|title=How do we tell truths that might hurt?|accessdate=29 August 2007|publisher=University of Texas at Austin|date=18 June 1975|author=Dijkstra, Edsger W.|id=EWD498|archive-url=https://web.archive.org/web/20170502143353/http://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD498.html|archive-date=2 May 2017|url-status=dead}}&lt;/ref&gt;
In a published dissent to Dijkstra's remarks, the computer scientist Howard E. Tompkins claimed that [[unstructured programming|unstructured]] COBOL tended to be "written by programmers that have never had the benefit of structured COBOL taught well", arguing that the issue was primarily one of training.&lt;ref&gt;{{Cite journal | doi = 10.1145/948176.948186| title = In defense of teaching structured COBOL as computer science| journal = ACM SIGPLAN Notices| volume = 18| issue = 4| pages = 86–94| year = 1983| last1 = Tompkins | first1 = H. E. }}&lt;/ref&gt;

One cause of [[spaghetti code]] was the {{code|GO TO}} statement. Attempts to remove {{code|GO TO}}s from COBOL code, however, resulted in convoluted programs and reduced code quality.{{sfn|Riehle|1992|p=125}} {{code|GO TO}}s were largely replaced by the {{code|PERFORM}} statement and procedures, which promoted [[modular programming]]{{sfn|Riehle|1992|p=125}} and gave easy access to powerful looping facilities. However, {{code|PERFORM}} could only be used with procedures so loop bodies were not located where they were used, making programs harder to understand.{{sfn|Shneiderman|1985|pp=349–350}}

COBOL programs were infamous for being monolithic and lacking modularization.&lt;ref&gt;{{cite book | url=https://books.google.com/books?id=MJmJAwAAQBAJ&amp;pg=PA4 | title=Beginning COBOL for Programmers | publisher=Apress | accessdate=13 August 2014 | page=4 | first=Michael | last=Coughlan | isbn=978-1430262534 | date=16 March 2014}}&lt;/ref&gt;
COBOL code could only be modularized through procedures, which were found to be inadequate for large systems. It was impossible to restrict access to data, meaning a procedure could access and modify {{em|any}} data item. Furthermore, there was no way to pass [[parameter (computer programming)|parameter]]s to a procedure, an omission Jean Sammet regarded as the committee's biggest mistake.{{sfn|Sammet|1978b|p=258}}
Another complication stemmed from the ability to {{code|PERFORM THRU}} a specified sequence of procedures. This meant that control could jump to and return from any procedure, creating convoluted control flow and permitting a programmer to break the [[single-entry single-exit]] rule.{{sfn|Riehle|1992|p=126}}

This situation improved as COBOL adopted more features. COBOL-74 added subprograms, giving programmers the ability to control the data each part of the program could access. COBOL-85 then added nested subprograms, allowing programmers to hide subprograms.{{sfn|Riehle|1992|p=127}} Further control over data and code came in 2002 when object-oriented programming, user-defined functions and user-defined data types were included.

Nevertheless, much important legacy COBOL software uses unstructured code, which has become unmaintainable. It can be too risky and costly to modify even a simple section of code, since it may be used from unknown places in unknown ways.&lt;ref&gt;{{Cite web|url=http://www.nakedcapitalism.com/2016/07/cobol-and-legacy-code-as-a-systemic-risk.html?imm_mid=0e6043&amp;cmp=em-prog-na-na-newsltr_20160723|title=COBOL and Legacy Code as a Systemic Risk {{!}} naked capitalism|date=19 July 2016|language=en-US|access-date=23 July 2016}}&lt;/ref&gt;

===Compatibility issues===
COBOL was intended to be a highly portable, "common" language. However, by 2001, around 300 dialects had been created.&lt;ref&gt;{{cite journal | url=http://www.cs.vu.nl/grammarware/500/500.pdf | title=Cracking the 500-language problem | journal=IEEE Software |date=November–December 2001 | volume=18 | issue=6 | page=79 | doi=10.1109/52.965809 | first1=Ralf | last1=Lämmel | first2=Chris | last2=Verhoef | author-link2 = Chris Verhoef| archiveurl=https://web.archive.org/web/20140819085841/http://www.cs.vu.nl/grammarware/500/500.pdf | archivedate=19 August 2014 | url-status=dead}}&lt;/ref&gt; One source of dialects was the standard itself: the 1974 standard was composed of one mandatory nucleus and eleven functional modules, each containing two or three levels of support. This permitted 104,976 official variants.&lt;ref&gt;{{cite journal | url=http://comjnl.oxfordjournals.org/content/22/4/290.full.pdf+html | title=Towards more portable COBOL | journal=The Computer Journal | date=April 1979 | volume=22 | issue=4 | pages=290 | doi=10.1093/comjnl/22.4.290 | first1=T. J. | last1=Howkins | first2=M. T. | last2=Harandi | doi-access=free }}&lt;/ref&gt;

COBOL-85 was not fully compatible with earlier versions, and its development was controversial. Joseph T. Brophy, the [[Chief Information Officer|CIO]] of [[St. Paul Travelers|Travelers Insurance]], spearheaded an effort to inform COBOL users of the heavy reprogramming costs of implementing the new standard.{{sfn|Garfunkel|1987|p=11}} As a result, the ANSI COBOL Committee received more than 2,200 letters from the public, mostly negative, requiring the committee to make changes. On the other hand, conversion to COBOL-85 was thought to increase productivity in future years, thus justifying the conversion costs.{{sfn|Garfunkel|1987|p=15}}

===Verbose syntax===
{{quotebox
 | title=COBOL: /koh′bol/, n.
 | tstyle=text-align: left;
 | quote=A weak, verbose, and flabby language used by code grinders to do boring mindless things on dinosaur mainframes. [...]  Its very name is seldom uttered without ritual expressions of disgust or horror.
 | source=[[The Jargon File]] 4.4.8.&lt;ref&gt;{{cite web | url=http://catb.org/jargon/html/C/COBOL.html | title=COBOL | work=The Jargon File, version 4.4.8 | date=1 October 2004 | accessdate=13 December 2014 | first=Eric S. | last=Raymond | authorlink=Eric S. Raymond | url-status=live | archiveurl=https://web.archive.org/web/20140830184553/http://www.catb.org/jargon/html/C/COBOL.html | archivedate=30 August 2014}}&lt;/ref&gt;
 | align=right
 | width=30%
 | quoted=1
}}

COBOL syntax has often been criticized for its verbosity. Proponents say that this was intended to make the code [[self-documenting]], easing program maintenance.{{sfn|Brown|1976|p=53}} COBOL was also intended to be easy for programmers to learn and use,{{sfn|CODASYL|1969|loc=§ II.1.1}} while still being readable to non-technical staff such as managers.{{sfn|Shneiderman|1985|p=350}}{{sfn|Sammet|1961|p=381}}{{sfn|Conner|1984|p=ID/10}}{{sfn|Marcotty|1978|p=263}}
The desire for readability led to the use of English-like syntax and structural elements, such as nouns, verbs, clauses, sentences, sections, and divisions. Yet by 1984, maintainers of COBOL programs were struggling to deal with "incomprehensible" code{{sfn|Conner|1984|p=ID/10}} and the main changes in COBOL-85 were there to help ease maintenance.&lt;ref name="Computerworld Garfunkel" /&gt;

Jean Sammet, a short-range committee member, noted that "little attempt was made to cater to the professional programmer, in fact people whose main interest is programming tend to be very unhappy with COBOL" which she attributed to COBOL's verbose syntax.{{sfn|Conner|1984|p=ID/14}}

===Isolation from the computer science community===
The COBOL community has always been isolated from the computer science community. No academic computer scientists participated in the design of COBOL: all of those on the committee came from commerce or government. Computer scientists at the time were more interested in fields like numerical analysis, physics and system programming than the commercial file-processing problems which COBOL development tackled.{{sfn|Sammet|1961|p=380}} Jean Sammet attributed COBOL's unpopularity to an initial "snob reaction" due to its inelegance, the lack of influential computer scientists participating in the design process and a disdain for business data processing.{{sfn|Marcotty|1978|p=266}} The COBOL specification used a unique "notation", or [[metalanguage]], to define its syntax rather than the new [[Backus–Naur form]] which the committee did not know of. This resulted in "severe" criticism.{{sfn|Sammet|1978b|p=255}}{{sfn|Shneiderman|1985|pp=348–349}}{{sfn|Bemer|1971|p=133}}

Later, COBOL suffered from a shortage of material covering it; it took until 1963 for introductory books to appear (with Richard D. Irwin publishing a college textbook on COBOL in 1966).&lt;ref&gt;{{Cite web |url=https://books.bibliopolis.com/main/find/2200821/COBOL-Logic-and-Programming-third-edition-1974-McCameron-Fritz-oldcomputerbooks-com.html |title=Archived copy |access-date=25 February 2016 |archive-url=https://web.archive.org/web/20160305083547/https://books.bibliopolis.com/main/find/2200821/COBOL-Logic-and-Programming-third-edition-1974-McCameron-Fritz-oldcomputerbooks-com.html |archive-date=5 March 2016 |url-status=dead }}&lt;/ref&gt; By 1985, there were twice as many books on Fortran and four times as many on BASIC as on COBOL in the [[Library of Congress]].{{sfn|Shneiderman|1985|p=349}} University professors taught more modern, state-of-the-art languages and techniques instead of COBOL which was said to have a "trade school" nature.{{sfn|Shneiderman|1985|p=351}} Donald Nelson, chair of the CODASYL COBOL committee, said in 1984 that "academics ... hate COBOL" and that computer science graduates "had 'hate COBOL' drilled into them".&lt;ref&gt;{{cite web | url=https://books.google.com/books?id=VQhbdDusHcsC&amp;pg=RA1-PA61 | title=An interview: Cobol defender | work=Computerworld | date=10 September 1984 | accessdate=8 June 2014 | author=&lt;!-- Staff writer(s); No by-line --&gt; | pages=ID/29–ID/32 | issn=0010-4841 | volume=18 | issue=37}}&lt;/ref&gt; A 2013 poll by [[Micro Focus]] found that 20% of university academics thought COBOL was outdated or dead and that 55% believed their students thought COBOL was outdated or dead. The same poll also found that only 25% of academics had COBOL programming on their curriculum even though 60% thought they should teach it.&lt;ref&gt;{{cite press release | url=http://www.microfocus.com/about/press/pressreleases/2013/pr070320131001.aspx | title=Academia needs more support to tackle the IT skills gap | publisher=Micro Focus | date=7 March 2013 | accessdate=4 August 2014}}&lt;/ref&gt;
In contrast, in 2003, COBOL featured in 80% of [[information systems]] curricula in the United States, the same proportion as [[C++]] and [[Java (Programming language)|Java]].{{sfn|Carr|Kizior|2003|p=13}}

There was also significant condescension towards COBOL in the business community from users of other languages, for example [[FORTRAN]] or [[assembler language|assembler]], implying that COBOL could be used only for non-challenging problems.{{citation needed | date=March 2017}}

===Concerns about the design process===
Doubts have been raised about the competence of the standards committee. Short-term committee member Howard Bromberg said that there was "little control" over the development process and that it was "plagued by discontinuity of personnel and ... a lack of talent."{{sfn|Beyer|2009|p=301}} Jean Sammet and Jerome Garfunkel also noted that changes introduced in one revision of the standard would be reverted in the next, due as much to changes in who was in the standard committee as to objective evidence.&lt;ref&gt;{{cite journal | title=Summary of Changes in COBOL, 1960–1985 | journal=Annals of the History of Computing | date=October 1985 | volume=7 | issue=4 | pages=342 | first1=Jean | last1=Sammet | first2=Jerome | last2=Garfunkel | doi=10.1109/MAHC.1985.10033 }}&lt;/ref&gt;

COBOL standards have repeatedly suffered from delays: COBOL-85 arrived five years later than hoped,&lt;ref&gt;{{cite conference | url=http://www.computer.org/csdl/proceedings/afips/1978/5086/00/50861107.pdf | title=Data Base Facility for COBOL 80 | first=Margaret M. | last=Cook | conference=1978 National Computer Conference | quote=The earliest date that a new COBOL standard could be developed and approved is the year 1980 [...]. | pages=1107–1112 | publisher=AFIPS Press | date=June 1978 | location=Anaheim, California | lccn= 55-44701 | doi=10.1109/AFIPS.1978.63 | accessdate=2 September 2014 | editor1-last=Ghosh | editor1-first=Sakti P. | editor2-last=Liu | editor2-first=Leonard Y.}}&lt;/ref&gt;
COBOL 2002 was five years late,&lt;ref name="SW95"/&gt;
and COBOL 2014 was six years late.&lt;ref name="cobolstandards.com"/&gt;&lt;ref&gt;{{cite web | url=http://www.cobolstandard.info/wg4/open/wg4n0188.doc | title=Resolutions from WG4 meeting 24 – June 26–28, 2003 Las Vegas, Nevada, USA | date=11 July 2003 | accessdate=29 June 2014 | format=doc | quote=a June 2008 revision of the COBOL standard | page=1 | url-status=dead | archiveurl=https://web.archive.org/web/20160308015945/http://www.cobolstandard.info/wg4/open/wg4n0188.doc | archivedate=8 March 2016}}&lt;/ref&gt;
To combat delays, the standard committee allowed the creation of optional addenda which would add features more quickly than by waiting for the next standard revision. However, some committee members raised concerns about incompatibilities between implementations and frequent modifications of the standard.&lt;ref&gt;{{cite journal | url=https://books.google.com/books?id=tQOdtdJmVSsC&amp;pg=PA12 | title=Cobol standard add-ons flayed | journal=Computerworld | volume=20 | issue=28 | pages=1, 12 | first=Charles | last=Babcock | date=14 July 1986}}&lt;/ref&gt;

===Influences on other languages===
COBOL's data structures influenced subsequent programming languages. Its record and file structure influenced [[PL/I]] and [[Pascal (programming language)|Pascal]], and the &lt;code&gt;REDEFINES&lt;/code&gt; clause was a predecessor to Pascal's variant records. Explicit file structure definitions preceded the development of [[database management systems]] and aggregated data was a significant advance over Fortran's arrays.{{sfn|Shneiderman|1985|p=349}}
&lt;code&gt;PICTURE&lt;/code&gt; data declarations were incorporated into PL/I, with minor changes.

COBOL's {{code|COPY}} facility, although considered "primitive",&lt;ref&gt;{{cite conference | first=Michael | last=Marcotty | title=Full text of all questions submitted | editor1-last=Wexelblat | editor1-first=Richard L. | conference=History of Programming Languages | year=1978 | publisher=Academic Press | publication-date=1981 | isbn=0127450408 | doi=10.1145/800025.1198371 | page=[https://archive.org/details/historyofprogram0000hist/page/274 274] | url=https://archive.org/details/historyofprogram0000hist/page/274 }}&lt;/ref&gt;
influenced the development of [[include directive]]s.{{sfn|Shneiderman|1985|p=349}}

The focus on portability and standardization meant programs written in COBOL could be portable and facilitated the spread of the language to a wide variety of hardware platforms and operating systems.&lt;ref&gt;This can be seen in:

* {{cite web | url=http://www-304.ibm.com/partnerworld/gsd/solutiondetails.do?solution=48040&amp;expand=true&amp;lc=en | title=Visual COBOL | publisher=[[IBM]] | work=IBM PartnerWorld | date=21 August 2013 | accessdate=5 February 2014 | quote=Micro Focus Visual COBOL delivers the next generation of COBOL development and deployment for Linux x86-64, Linux for System z, AIX, HP/UX, Solaris, and Windows. | archiveurl=https://web.archive.org/web/20140712183624/http://www-304.ibm.com/partnerworld/gsd/solutiondetails.do?solution=48040 | archivedate=12 July 2014 | url-status=live}}
* {{cite web | url=https://www-03.ibm.com/software/products/en/cobocompfami | title=COBOL Compilers family | publisher=[[IBM]] | work=ibm.com | accessdate=5 February 2014 | archiveurl=https://web.archive.org/web/20140223004754/https://www-03.ibm.com/software/products/en/cobocompfami | archivedate=23 February 2014 | url-status=live}}
* {{cite web | url=http://opencobol.add1tocobol.com/gnucobol/#what-platforms-are-supported-by-gnucobol | title=What platforms are supported by GNU Cobol? | date=4 January 2014 | accessdate=5 February 2014 | author=Tiffin, Brian | archiveurl=https://web.archive.org/web/20131214110557/http://opencobol.add1tocobol.com/gnucobol/#what-platforms-are-supported-by-gnu-cobol | archivedate=14 December 2013 | url-status=dead}}&lt;/ref&gt; Additionally, the well-defined division structure restricts the definition of external references to the Environment Division, which simplifies platform changes in particular.&lt;ref name="cobol-intro"&gt;{{cite web | url=http://www.csis.ul.ie/cobol/course/COBOLIntro.htm#part1 | title=Introduction to COBOL | year=2002 | accessdate=3 February 2014 | author=Coughlan, Michael}}&lt;/ref&gt;

==See also==
{{Portal|Computer programming}}
* [[Alphabetical list of programming languages]]
* [[BLIS/COBOL]]
* [[COBOL ReSource]]
* [[CODASYL]]
* [[Comparison of programming languages]]
* {{slink|Generational list of programming languages|COBOL based}}
* {{slink|List of compilers|COBOL compilers}}

==Notes==
{{notelist}}

== References ==

=== Citations ===
{{Reflist|30em}}

=== Sources ===
{{refbegin|2}}
* {{cite journal
 | ref=harv
 | url=http://archive.computerhistory.org/resources/text/Knuth_Don_X4100/PDF_index/k-8-pdf/k-8-u2776-Honeywell-mag-History-Cobol.pdf
 | title=A View of the History of COBOL
 | journal=Honeywell Computer Journal
 | accessdate=28 June 2014
 | volume=5
 | issue=3
 | date=1971
 | first=Bob
 | last=Bemer
 | authorlink=Bob Bemer
 | archive-url=https://web.archive.org/web/20160122164500/http://archive.computerhistory.org/resources/text/Knuth_Don_X4100/PDF_index/k-8-pdf/k-8-u2776-Honeywell-mag-History-Cobol.pdf
 | archive-date=22 January 2016
 | url-status=dead
 }}
* {{cite book
 | ref=harv
 | url=https://books.google.com/books?id=u5KKwGjulEwC&amp;pg=PA282
 | title=Grace Hopper and the Invention of the Information Age
 | publisher=MIT Press
 | year=2009
 | isbn=978-0262013109
 | first=Kurt
 | last=Beyer
 | lccn=2008044229
}}
* {{cite book
 | ref=harv
 | url=https://books.google.com/books?id=G6a2tSuOoq8C&amp;pg=PA47
 | title=Encyclopedia of Computer Science and Technology: Volume 5
 | publisher=[[CRC Press]]
 | isbn=978-0824722555
 | date=1 December 1976
 | section=COBOL
 | first=William R.
 | last=Brown
 | editor1-first=Jack
 | editor1-last=Belzer
 | editor2-first=Albert G.
 | editor2-last=Holzman
 | editor3-first=Allen
 | editor3-last=Kent
}}

* {{cite journal
 | ref=harv
 | url=http://www.isedj.org/1/52/ISEDJ.1(52).Carr.pdf
 | title=Continued Relevance of COBOL in Business and Academia: Current Situation and Comparison to the Year 2000 Study
 | date=31 December 2003
 | accessdate=4 August 2014
 | last1=Carr
 | first1=Donald E.
 | last2=Kizior
 | first2=Ronald J.
 | journal=Information Systems Education Journal
 | volume=1
 | issue=52
 | issn=1545-679X
 }}
* {{cite journal
 | ref=harv
 | url=https://archive.org/details/codasylcoboljour00conf
 | title=CODASYL COBOL Journal of Development 1968 |date=July 1969 
 | lccn=73601243
 | author=CODASYL
 | authorlink=CODASYL
 | publisher=[[National Bureau of Standards]]
 | issn=0591-0218
}}
* {{cite journal
 | ref=harv
 | url=https://books.google.com/books?id=BrEo9KtAQH4C&amp;pg=RA1-PA61
 | title=Cobol, your age is showing
 | journal=Computerworld
 | volume=18
 | issue=20
 | pages=ID/7–ID/18
 | first=Richard L.
 | last=Conner
 | date=14 May 1984
 | issn=0010-4841
 }}
* {{cite web
 | ref=harv
 | url=http://opencobol.add1tocobol.com/guides/GNU%20COBOL%202.1%2023NOV2013%20Programmers%20Guide%20(US%20Letter).pdf
 | title=GNU COBOL Programmer's Guide
 | date=9 April 2014
 | accessdate=25 February 2014
 | last=Cutler
 | first=Gary
 | edition=3rd
}}
* {{cite book
 | ref=harv
 | title=The COBOL 85 Example Book
 | first=Jerome
 | last=Garfunkel
 | publisher=[[John Wiley &amp; Sons|Wiley]]
 | year=1987
 | isbn=978-0471804611
}}
* {{cite web
 | ref=harv
 | url=http://www.ncits.org/tc_home/j4htm/cobolv200112.zip
 | title=ISO/IEC IS 1989:2001 – Programming language COBOL
 | author=ISO/IEC JTC 1/SC 22/WG 4
 | authorlink=ISO/IEC JTC 1/SC 22
 | publisher=[[ISO]]
 | date=4 December 2001
 | accessdate=2 September 2014
 | archiveurl=https://web.archive.org/web/20020124065139/http://www.ncits.org/tc_home/j4htm/cobolv200112.zip
 | archivedate=24 January 2002
 | url-status=dead
 | format=ZIP of PDF
}}
* {{cite book
 | ref=harv
 | title=INCITS/ISO/IEC 1989:2014 [2014] – Programming language COBOL
 | author=ISO/IEC JTC 1/SC 22/WG 4
 | publisher=[[INCITS]]
 | date=31 October 2014
}}
* {{cite web
 | ref=harv
 | url=http://home.comcast.net/~wmklein/DOX/History.pdf
 | title=The History of COBOL
 | date=4 October 2010
 | accessdate=7 January 2014
 | last=Klein
 | first=William M.
 | archiveurl=https://web.archive.org/web/20140107192608/http://home.comcast.net/~wmklein/DOX/History.pdf
 | archivedate=7 January 2014
 | url-status=dead
 }}
* {{cite conference
 | ref=harv
 | first=Michael
 | last=Marcotty
 | p=[https://archive.org/details/historyofprogram0000hist/page/263 263]
 | title=Transcript of question and answer session
 | editor1-last=Wexelblat
 | editor1-first=Richard L.
 | conference=History of Programming Languages
 | year=1978
 | publisher=Academic Press
 | publication-date=1981
 | isbn=0127450408
 | doi=10.1145/800025.1198370
 | url=https://archive.org/details/historyofprogram0000hist/page/263
 }}
* {{cite book
 | ref=harv
 | title=A Simplified Guide to Structured COBOL Programming
 | publisher=Wiley
 | year=1976
 | isbn=0-471-58284-0
 | first=Daniel D.
 | last=McCracken
 | lccn=
 | authorlink=Daniel D. McCracken
 | url-access=registration
 | url=https://archive.org/details/simplifiedguidet0000mccr
 }}
* {{cite book
 | ref=harv
 | title=A Simplified Guide to Structured COBOL Programming
 | publisher=Wiley
 | year=1988
 | isbn=978-0471610540
 | first1=Daniel D.
 | last1=McCracken
 | first2=Donald G.
 | last2=Golden
 | edition=2nd
 | lccn=87034608
}}
* {{cite journal
 | ref=harv
 | title=PERFORM considered harmful
 | journal=Communications of the ACM
 |date=August 1992
 |doi=10.1145/135226.376106 
 | volume=35
 | issue=8
 | pages=125–128
 | first=Richard L.
 | last=Riehle
 
}}
* {{Cite conference
 | ref=harv
 | title=A method of combining ALGOL and COBOL
 | first=Jean E.
 | last=Sammet
 | authorlink=Jean E. Sammet
 | date=May 1961
 | conference=Papers presented at the 9–11 May 1961, western joint IRE–AIEE–ACM computer conference
 | doi=10.1145/1460690.1460734
 | pages=379–387
 | publisher=[[Association for Computing Machinery|ACM]]
 
}}
* {{cite conference
 | ref=harv
 | first=Jean E.
 | last=Sammet
 | title=The early history of COBOL
 | editor1-last=Wexelblat
 | editor1-first=Richard L.
 | conference=History of Programming Languages
 | year=1978a
 | publisher=Academic Press
 | publication-date=1981
 | isbn=0127450408
 | doi=10.1145/800025.1198367
 | url-access=registration
 | url=https://archive.org/details/historyofprogram0000hist
 }}
* {{cite conference
 | ref=harv
 | first=Jean E.
 | last=Sammet
 | title=Transcript of presentation
 | editor1-last=Wexelblat
 | editor1-first=Richard L.
 | conference=History of Programming Languages
 | year=1978b
 | publisher=Academic Press
 | publication-date=1981
 | isbn=0127450408
 | doi=10.1145/800025.1198368
 | url-access=registration
 | url=https://archive.org/details/historyofprogram0000hist
 }}
* {{cite book
 | ref=harv
 | url=https://books.google.com/books?id=5Jaa1BVverIC&amp;pg=PA104
 | title=Concise Encyclopedia of Computer Science
 | publisher=Wiley
 | first=Jean E.
 | last=Sammet
 | oclc=249810423
 | isbn=978-0470090954
 | editor-first=Edwin D.
 | editor-last=Reilly
 | date=23 July 2004
 | section=COBOL
}}
* {{cite journal
 | ref=harv
 | title=The Relationship Between COBOL and Computer Science
 | journal=[[Annals of the History of Computing]] |date=October 1985 
 | volume=7
 | issue=4
 | pages=348–352
 | first=B.
 | last=Shneiderman
 | doi=10.1109/MAHC.1985.10041
}}
{{refend}}

==External links==
{{sisterlinks|d=Q131140|n=no|voy=no|s=no|q=no|m=no|mw=no|species=no|commons=Category:COBOL}}
* {{Curlie|Computers/Programming/Languages/Cobol/}}

{{Major programming languages}}
{{ISO standards}}

{{Authority control}}

{{DEFAULTSORT:Cobol}}
[[Category:COBOL| ]]
[[Category:.NET programming languages]]
[[Category:1959 software]]
[[Category:Class-based programming languages]]
[[Category:Computer-related introductions in 1959]]
[[Category:Cross-platform software]]
[[Category:Object-oriented programming languages]]
[[Category:Procedural programming languages]]
[[Category:Programming languages created by women]]
[[Category:Programming languages created in 1959]]
[[Category:Programming languages with an ISO standard]]
[[Category:Statically typed programming languages]]
[[Category:Structured programming languages]]</text>
      <sha1>3kbqle4a589sdvr5qppihpfqmmzl31e</sha1>
    </revision>
  </page>
</mediawiki>
