<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <dbname>enwiki</dbname>
    <base>https://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.35.0-wmf.36</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Microsoft Visual C++</title>
    <ns>0</ns>
    <id>166204</id>
    <revision>
      <id>961603221</id>
      <parentid>961419776</parentid>
      <timestamp>2020-06-09T12:05:34Z</timestamp>
      <contributor>
        <ip>139.138.227.133</ip>
      </contributor>
      <comment>/* ABI */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="33653" xml:space="preserve">{{Infobox software
| name                   = Visual C++
| logo                   = Visual C++ Icon.png
| developer              = [[Microsoft]]
| released               = {{Start date and age|1993|02}}&lt;ref name="Visual C++ adds Windows support"&gt;{{cite news |title = Visual C++ adds Windows support |newspaper = InfoWorld |date = February 22, 1993 |page = 17 |url = https://books.google.com/books?id=vjsEAAAAMBAJ }}&lt;/ref&gt;
| latest release version = 14.26.28720.3
| latest release date
| programming language   = [[C++]]&lt;ref&gt;{{cite web|url=http://www.lextrait.com/Vincent/implementations.html |title=The Programming Languages Beacon, v10.0 |first=Vincent |last=Lextrait |date=January 2010 |accessdate=14 March 2010 |url-status=dead |archiveurl=https://archive.today/20120530/http://www.lextrait.com/Vincent/implementations.html |archivedate=30 May 2012 }}&lt;/ref&gt;
| operating system       = [[Windows]]
| platform               = [[IA-32]], [[x86-64]] and [[ARM architecture|ARM]]
| language               = English, Chinese (Simplified &amp; Traditional), Czech, French, German, Italian, Japanese, Korean, Polish, Portuguese (Brazilian), Russian, Spanish, Turkish
| genre                  = [[Integrated development environment|IDE]]
| license                = [[Trialware]] and [[freeware]]
| website                = {{URL|https://docs.microsoft.com/en-us/cpp/}}
}}

'''Microsoft Visual C++''' (often abbreviated to '''MSVC''') is an [[integrated development environment]] (IDE) product from [[Microsoft]] for the [[C (programming language)|C]], [[C++]], and [[C++/CLI]] [[programming language]]s. MSVC is [[proprietary software]]; it was originally a standalone product but later became a part of [[Microsoft Visual Studio|Visual Studio]] and made available in both [[trialware]] and [[freeware]] forms. It features tools for [[Software development|developing]] and [[debugging]] C++ code, especially code written for the [[Windows API]], [[DirectX]] and [[.NET Framework|.NET]].

Many [[application software|applications]] require [[redistributable]] Visual C++ runtime library packages to function correctly. These packages are often installed independently of applications, allowing multiple applications to make use of the package while only having to install it once. These Visual C++ redistributable and runtime packages are mostly installed for standard [[Library (computing)|libraries]] that many applications use.&lt;ref name="askleo"&gt;[http://ask-leo.com/do_i_need_these_microsoft_visual_c_redistributables.html "Do I need these Microsoft Visual C++ redistributables?"]. Ask Leo!. Retrieved 2012-11-18.&lt;/ref&gt;

== History ==

The predecessor to Visual C++ was called ''Microsoft C/C++''. There was also a ''Microsoft [[QuickC]]'' 2.5 and a ''Microsoft QuickC for Windows'' 1.0. The Visual C++ [[compiler]] is still known as ''Microsoft C/C++'' and as of the release of Visual C++ 2015 Update 2, is on version 14.0.23918.0.

=== 16-bit versions ===

* {{anchor|c1}}Microsoft C 1.0, based on [[Lattice C]], was Microsoft's first C product in 1983. It was not [[The C Programming Language|K&amp;R C]].
* C 2.0 added large model support.
* C 3.0 was the first version developed inside Microsoft.&lt;ref&gt;{{cite magazine |last=Leibson |first=Steve |date=1985-02-01 |title=Software Reviews: Expert team analyzes 21 C compilers |url=https://archive.org/details/Computer_Language_Issue_06_1985-02_CL_Publications_US/page/n85/mode/2up?q=microsoft+c+3.0 |magazine=Computer Language |access-date=2020-06-05 }}&lt;/ref&gt; This version intended compatibility with K&amp;R and the later ANSI standard. It was being used inside Microsoft (for [[Microsoft Windows|Windows]] and [[Xenix]] development) in early 1984. It shipped as a product in 1985.
* C 4.0 added optimizations and [[CodeView]], a source-level debugger.
* C 5.0 added loop optimizations and [[Intel Memory Model#Memory_models|‘huge memory model’]] ([[Array data structure|arrays]] bigger than 64&amp;nbsp;KB) support. Microsoft [[Fortran]] and the first 32-bit compiler for 80386 were also part of this project.
* C 5.1 released in 1988 allowed compiling programs for OS/2 1.x.
* C 6.0 released in 1989. It added the ''Programmer's Workbench'' IDE, global flow analysis, a source browser, and a new debugger, and included an optional [[C++]] front end.&lt;ref&gt;{{cite web | title = Optimizing With Microsoft C 6.0 | date = August 1, 1990 | url = http://www.drdobbs.com/windows/optimizing-with-microsoft-c-60/184408398 | first = Scott Robert | last = Ladd }}&lt;/ref&gt;
* C/C++ 7.0 was released in 1992. Added built-in support for [[C++]] and [[Microsoft Foundation Classes|MFC]] (Microsoft Foundation Class Library) 1.0.&lt;ref&gt;Retrieved from http://support.microsoft.com/kb/196831.&lt;/ref&gt;
* {{anchor|vc1}}Visual C++ 1.0, which included MFC 2.0, was the first version of ‘Visual’ C++, released in February 1993. It was [[Cfront]] 2.1 compliant&lt;ref name="IWreview"&gt;{{cite news | title = Visual C++ is a strong development tool | newspaper = InfoWorld | date = June 21, 1993 | page = 94 | url = https://books.google.com/books?id=OjsEAAAAMBAJ }}&lt;/ref&gt; and available in two editions:&lt;ref name="Visual C++ adds Windows support"/&gt;
** Standard: replaced QuickC for Windows.
** Professional: replaced C/C++ 7.0. Included the ability to build both DOS and Windows applications, an [[optimizing compiler]], a source [[profiling (computer programming)|profiler]], and the Windows 3.1 SDK.&lt;ref name="IWreview"/&gt; The [[Phar Lap (company)|Phar Lap]] 286 DOS Extender Lite was also included.&lt;ref&gt;{{cite news | title = Rival DOS Extenders debut at show | newspaper = InfoWorld | date = March 1, 1993 | page = 18 | url = https://books.google.com/books?id=fzwEAAAAMBAJ }}&lt;/ref&gt;
* Visual C++ 1.5 was released in December 1993, included MFC 2.5, and added [[Object Linking and Embedding|OLE]] 2.0 and [[Open Database Connectivity|ODBC]] support to MFC.&lt;ref&gt;{{cite news | title = Visual C++ 1.5 integrates OLE, ODBC | newspaper = InfoWorld | date = November 8, 1993 | page = 5 | url = https://books.google.com/books?id=8ToEAAAAMBAJ }}&lt;/ref&gt; It was the first version of Visual C++ that came only on [[CD-ROM]].
** Visual C++ 1.51 and 1.52 were available as part of a subscription service.
** Visual C++ 1.52b is similar to 1.52, but does not include the Control Development Kit.
** Visual C++ 1.52c was a patched version of 1.5. It is the last, and arguably most popular, development platform for [[Microsoft Windows]] 3.x. It is available through [[Microsoft Developer Network]].

=== Strictly 32-bit versions ===

* {{anchor|vc1_32}}Visual C++ 1.0 (original name: Visual C++ 32-bit Edition) was the first version for [[Flat memory model#Flat_memory_model|32-bit]] development for the [[Intel 386]] architecture.&lt;ref&gt;{{cite news | title = Microsoft set to prerelease 32-bit Visual C++ | newspaper = InfoWorld | date = July 19, 1993 | page = 12 | url = https://books.google.com/books?id=mTsEAAAAMBAJ }}&lt;/ref&gt; Although released when [[Intel 286|16-bit]] version 1.5 was available, it did not include support for OLE2 and ODBC. It was also available in a bundle called Visual C++ 16/32-bit Suite, which included Visual C++ 1.5.&lt;ref&gt;{{cite news | title = C++ IDEs evolve | newspaper = InfoWorld | date = April 4, 1994 | page = 79 | url = https://books.google.com/books?id=FTsEAAAAMBAJ }}&lt;/ref&gt;
* {{anchor|vc2}}Visual C++ 2.0, which included MFC 3.0, was the first version to be 32-bit only. In many ways, this version was ahead of its time, since [[Windows 95]], then codenamed "Chicago", was not yet released, and [[Windows NT]] had only a small market share. Microsoft included and updated Visual C++ 1.5 as part of the 2.x releases up to 2.1, which included Visual C++ 1.52, and both 16-bit and 32-bit version of the Control Development Kit (CDK) were included. Visual C++ 2.x also supported [[Win32s]] development. It is available through [[Microsoft Developer Network]]. There was a Visual C++ 2.0 RISC Edition for [[MIPS architecture|MIPS]] and [[DEC Alpha|Alpha]] processors, as well as a cross-platform edition for the [[Macintosh]] ([[68000]] instruction set).&lt;ref&gt;{{cite web|url=http://accu.org/index.php/journals/1771|title=Microsoft Visual C++ Strategy}}&lt;/ref&gt;
** Visual C++ 2.1 and 2.2 were updates for 2.0 available through subscription.
* {{anchor|vc4}}Visual C++ 4.0, released on 1995-12-11,&lt;ref name="Obsolete Products"&gt;{{cite web|url=http://support.microsoft.com/gp/lifeobsoleteproducts |title=Obsolete Products |url-status=dead |archiveurl=https://web.archive.org/web/20050814234847/http://support.microsoft.com/gp/lifeobsoleteproducts |archivedate=2005-08-14 }}&lt;/ref&gt; introduced the Developer Studio IDE. Its then-novel tiled layout of non-overlapping panels—navigation panel, combination editor/source level debugger panel, and console output panel&lt;ref&gt;{{cite book |last=Toth |first=Viktor |title=Visual C++ 4.0 unleashed |url=https://books.google.com/?id=93o_AQAAIAAJ&amp;q=visual+c%2B%2B+4.0+unleashed&amp;dq=visual+c%2B%2B+4.0+unleashed |accessdate=26 July 2013 |year=1996 |publisher=[[SAMS Publishing]] |location=Indianapolis |isbn= 9780672308741 |chapter=1 |chapterurl=http://doc.sumy.ua/prog/unleash4/vcu01fi.htm}}&lt;/ref&gt;—continues through the [[Microsoft Visual Studio|Visual Studio]] product line (as of 2013). Visual C++ 4.0 included MFC 4.0, was designed for Windows 95 and Windows NT. To allow support of legacy (Windows 3.x/DOS) projects, 4.0 came bundled with the Visual C++ 1.52 installation CD. Updates available through subscription included Visual C++ 4.1, which came with the Microsoft Game SDK (later released separately as the DirectX SDK), and Visual C++ 4.2. Version number 3.0 was skipped to achieve version number parity between Visual C++ 4.0 and MFC 4.0.&lt;ref&gt;{{cite web|url=http://blogs.msdn.com/ricom/archive/2009/10/07/my-history-of-visual-studio-part-3.aspx|title=History of Visual Studio (Part 3)}}&lt;/ref&gt;
* {{anchor|vc42}}Visual C++ 4.2 did not support Windows 3.x ([[Win32s]]) development.&lt;ref&gt;{{cite web|url=http://msdn.microsoft.com/en-us/library/aa697418(VS.71).aspx|title=Major Changes from Visual C++ 4.0 to 4.2 |access-date=2018-04-18 |archive-url=https://web.archive.org/web/20100228175137/http://msdn.microsoft.com/en-us/library/aa697418(VS.71).aspx |archive-date=2010-02-28}}&lt;/ref&gt; This was the final version with a cross-platform edition for the [[Macintosh]] available and it differed from the 2.x version in that it also allowed compilation for the [[PowerPC]] instruction set.
* {{anchor|vc5}}Visual C++ 5.0, which included MFC 4.21 and was released 1997-04-28,&lt;ref name="Obsolete Products"/&gt; was a major upgrade from 4.2.&lt;ref&gt;{{cite web|url=http://msdn.microsoft.com/en-us/library/aa697419(VS.71).aspx|title=Major Changes from Visual C++ 4.2 to 5.0}}&lt;/ref&gt; Available in four editions: Learning,&lt;ref&gt;{{cite web|url=http://www.microsoft.com/products/prodref/199_ov.htm|title=Microsoft Visual C++ 5.0 Learning Edition|archiveurl=https://web.archive.org/web/19990427114135/http://www.microsoft.com/products/prodref/199_ov.htm|archivedate=April 27, 1999}}&lt;/ref&gt; Professional,&lt;ref&gt;{{cite web|url=http://www.microsoft.com/products/prodref/197_ov.htm|title=Microsoft Visual C++ 5.0 Professional Edition|archiveurl=https://web.archive.org/web/19990427101205/http://www.microsoft.com/products/prodref/197_ov.htm|archivedate=April 27, 1999}}&lt;/ref&gt; Enterprise,&lt;ref&gt;{{cite web|url=http://www.microsoft.com/products/prodref/198_ov.htm|title=Microsoft Visual C++ 5.0 Enterprise Edition|archiveurl=https://web.archive.org/web/19990417134138/http://www.microsoft.com/products/prodref/198_ov.htm|archivedate=April 17, 1999}}&lt;/ref&gt; and RISC.&lt;ref&gt;{{cite web|url=http://www.microsoft.com/products/prodref/501_ov.htm|title=Microsoft Visual C++ 5.0 RISC Edition|archiveurl=https://web.archive.org/web/19990429121236/http://www.microsoft.com/products/prodref/501_ov.htm|archivedate=April 29, 1999}}&lt;/ref&gt;
* {{anchor|vc6}}Visual C++ 6.0 (commonly known as VC6), which included MFC 6.0, was released in 1998.&lt;ref name="doj"&gt;{{cite news |url=https://www.justice.gov/opa/press-release/file/1092091/download |title=Criminal Complaint |date=June 8, 2018 |first=Nathan P. |last=Shields |publisher=[[United States Department of Justice]] |page=128 |quote=This alone is not a dispositive link, as Visual C++ 6.0, released in 1998, still has proponents mostly because it does not require the installation of Microsoft’s .NET framework in order to run, as later versions of Visual C++ do.}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://msdn.microsoft.com/en-us/library/aa729389(VS.71).aspx|title=Major Changes from Visual C++ 5.0 to 6.0|archiveurl=https://web.archive.org/web/20080914202003/http://msdn.microsoft.com/en-us/library/aa729389(VS.71).aspx|archivedate=September 14, 2008}}&lt;/ref&gt; The release was somewhat controversial since it did not include an expected update to MFC. Visual C++ 6.0 is still quite popular and often used to maintain legacy projects. There are, however, issues with this version under Windows XP, especially under the debugging mode (for example, the values of static variables do not display). The debugging issues can be solved with a patch called the "Visual C++ 6.0 Processor Pack".&lt;ref&gt;This page stresses that ''Users must also be running Windows 98, Windows NT 4.0, or Windows 2000.'' Retrieved from http://msdn2.microsoft.com/en-us/vstudio/aa718349.aspx.&lt;/ref&gt; Version number: 12.00.8804
* {{anchor|vc7}}Visual C++ .NET 2002 (also known as Visual C++ 7.0), which included MFC 7.0, was released in 2002 with support for link time code generation and debugging runtime checks, .NET 1.0, and [[Visual C Sharp|Visual C#]] and [[Managed Extensions for C++|Managed C++]]. The new user interface used many of the hot keys and conventions of [[Visual Basic]], which accounted for some of its unpopularity among C++ developers.{{Citation needed|date=May 2010}} Version number: 13.00.9466
* {{anchor|vc71}}Visual C++ .NET 2003 (also known as Visual C++ 7.1), which included MFC 7.1, was released in 2003 along with .NET 1.1 and was a major upgrade to Visual C++ .NET 2002. It was considered a patch to Visual C++ .NET 2002. Accordingly, the English language upgrade version of Visual Studio .NET 2003 shipped for minimal cost to owners of the English-language version of Visual Studio .NET 2002. This was the last version to support Windows 95 and NT 4.0 as a target.{{Citation needed|date=May 2010}} Version number: 13.10.3077
* eMbedded Visual C++&lt;ref&gt;Douglas Boling :''Programming Microsoft Windows CE .NET, Third Edition'' Microsoft Press; 3rd edition (June 25, 2003) Paperback: 1264 pages {{ISBN|978-0735618848}} - [http://examples.oreilly.de/english_examples/9780735618848/cd_contents/Readme.txt Companion CD with Microsoft eMbedded Visual C++ 4.0 Service Pack 2] {{webarchive|url=https://archive.today/20130211131045/http://examples.oreilly.de/english_examples/9780735618848/cd_contents/Readme.txt |date=2013-02-11 }}&lt;/ref&gt; in various versions was used to develop for some versions of the [[Windows CE]] operating system. Initially it replaced a development environment consisting of tools added onto Visual C++ 6.0. eMbedded Visual C++ was replaced as a separate development environment by [[Microsoft Visual Studio|Microsoft Visual Studio 2005]].

=== 32-bit and 64-bit versions ===

* {{anchor|vc8}}Visual C++ 2005 (also known as Visual C++ 8.0), which included MFC 8.0, was released in November 2005. This version supports .NET 2.0 and includes a new version of C++ targeted to the .NET framework ([[C++/CLI]]) with the purpose of replacing the previous version ([[Managed C++]]). Managed C++ for CLI is still available via compiler options, though. It also introduced [[OpenMP]]. With Visual C++ 2005, Microsoft also introduced [[Team Foundation Server]]. Visual C++ 8.0 has problems compiling MFC AppWizard projects that were created using Visual Studio 6.0, so maintenance of legacy projects can be continued with the original IDE if rewriting is not feasible. Visual C++ 2005 is the last version able to target [[Windows 98]] and [[Windows Me]].&lt;ref&gt;[http://msdn.microsoft.com/en-us/library/6sehtctf(v=VS.90).aspx How to: Modify WINVER and _WIN32_WINNT]&lt;/ref&gt;&lt;ref&gt;[http://msdn.microsoft.com/en-us/library/bb531344(v=VS.90).aspx Breaking Changes]&lt;/ref&gt; SP1 version (14.00.50727.762) is also available in [[Microsoft Windows SDK|Microsoft Windows SDK Update for Windows Vista]].
* {{anchor|vc9}}Visual C++ 2008 (also known as Visual C++ 9.0) was released in November 2007. This version supports .NET 3.5. Managed C++ for CLI is still available via compiler options. By default, all applications compiled against the Visual C++ 2008 Runtimes (static and dynamic linking) will only work under Windows 2000 and later.&lt;ref&gt;[http://msdn.microsoft.com/en-us/library/ws0swas0(VS.100).aspx Windows Platforms (CRT)]&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://msdn.microsoft.com/en-us/library/bb531344.aspx?ppud=4|title=Visual C++ 2008 Breaking Changes}}&lt;/ref&gt; A feature pack released for VC9, later included in SP1, added support for C++ [[C++ Technical Report 1|TR1]] library extensions. SP1 version (15.00.30729.01) is also available in [[Microsoft Windows SDK|Microsoft Windows SDK for Windows 7]].
* Some versions of Visual C++ supported [[Itanium 2]].
* {{anchor|vc10}}Visual C++ 2010 (also known as Visual C++ 10.0) was released on April 12, 2010. It uses a [[SQL Server Compact]] database to store information about the source code, including [[IntelliSense]] information, for better IntelliSense and code-completion support.&lt;ref name="cpp10"&gt;{{cite web | title = IntelliSense, part 2: The Future | url = http://blogs.msdn.com/vcblog/archive/2008/02/29/intellisense-part-2-the-future.aspx | author = Visual C++ Team Blog | accessdate =March 12, 2008}}&lt;/ref&gt; However, Visual C++ 2010 does not support Intellisense for C++/CLI.&lt;ref&gt;{{cite web | url = http://blogs.msdn.com/b/vcblog/archive/2011/03/03/10136696.aspx | title = Why IntelliSense is not supported for C++/CLI in Visual Studio 2010 | accessdate =March 13, 2011}}&lt;/ref&gt; This version adds a C++ parallel computing library called the [[Parallel Patterns Library]], partial support for [[C++11]], significantly improved IntelliSense based on the [[Edison Design Group]] front end,&lt;ref&gt;{{cite web | title = Rebuilding Intellisense | url = http://blogs.msdn.com/b/vcblog/archive/2009/05/27/rebuilding-intellisense.aspx | author = Visual C++ Team Blog }}&lt;/ref&gt; and performance improvements to both the compiler and generated code.&lt;ref&gt;{{cite web | title = Visual C++ Code Generation in Visual Studio 2010 | url = http://blogs.msdn.com/vcblog/archive/2009/11/02/visual-c-code-generation-in-visual-studio-2010.aspx | author = Visual C++ Team Blog}}&lt;/ref&gt; This version is built on .NET 4.0, but supports compiling to [[machine code]]. The partial C++11 support mainly consists of six compiler features:&lt;ref&gt;{{cite web | url = http://blogs.msdn.com/vcblog/archive/2010/04/06/c-0x-core-language-features-in-vc10-the-table.aspx | title = C++0x Core Language Features In VC10: The Table}}&lt;/ref&gt; lambdas, rvalue references, auto, decltype, static_assert, and nullptr. C++11 also supports library features (e.g., moving the TR1 components from std::tr1 namespace directly to std namespace). [[Variadic template]]s were also considered, but delayed until some future version due to having a lower priority, which stemmed from the fact that, unlike other costly-to-implement features (lambda, rvalue references), variadic templates would benefit only a minority of library writers rather than the majority of compiler end users.&lt;ref&gt;{{cite web | title = Stephan T. Lavavej: Everything you ever wanted to know about nullptr | url = http://channel9.msdn.com/shows/Going+Deep/Stephan-T-Lavavej-Everything-you-ever-wanted-to-know-about-nullptr/}}&lt;/ref&gt; By default, all applications compiled against Visual C++ 2010 Runtimes only work on Windows XP SP2 and later. The RTM version (16.00.30319) is also available in [[Microsoft Windows SDK|Windows SDK for Windows 7 and .NET Framework 4]] (WinSDK v7.1).&lt;ref&gt;{{cite web | title = Released: Windows SDK for Windows 7 and .NET Framework 4 | url = http://blogs.msdn.com/b/windowssdk/archive/2010/05/25/released-windows-sdk-for-windows-7-and-net-framework-4.aspx | author = Microsoft Windows SDK Blog}}&lt;/ref&gt; SP1 version (16.00.40219) is available as part of Visual Studio 2010 Service Pack 1 or through the Microsoft Visual C++ 2010 Service Pack 1 Compiler Update for the Windows SDK 7.1.&lt;ref&gt;[http://support.microsoft.com/kb/2519277/en-us FIX: Visual C++ compilers are removed when you upgrade Visual Studio 2010 Professional or Visual Studio 2010 Express to Visual Studio 2010 SP1 if Windows SDK v7.1 is installed]&lt;/ref&gt;
* {{anchor|vc11}}Visual C++ 2012 (also known as Visual C++ 11.0) was released on August 15, 2012. It features improved C++11 support, and support for [[Windows Runtime]] development.&lt;ref&gt;{{cite web |url=https://msdn.microsoft.com/en-us/library/vstudio/hh409293(v=vs.110).aspx |title=What's New for Visual C++ in Visual Studio 2012 |author=&lt;!--Staff writer(s); no by-line.--&gt; |publisher=Microsoft |work=[[Microsoft Developer Network]] |accessdate=September 20, 2015}}&lt;/ref&gt;
* {{anchor|vc12}}Visual C++ 2013 (also known as Visual C++ 12.0) was released on October 17, 2013.  It features further C++11 and [[C99]] support, and introduces a [[Representational state transfer|REST]] SDK.&lt;ref&gt;{{cite web |url=https://msdn.microsoft.com/en-us/library/vstudio/hh409293(v=vs.120).aspx |title=What's New for Visual C++ in Visual Studio 2013 |author=&lt;!--Staff writer(s); no by-line.--&gt; |publisher=Miicrosoft |work=[[Microsoft Developer Network]] |accessdate=September 20, 2015}}&lt;/ref&gt;
* {{anchor|vc14}}Visual C++ 2015 (also known as Visual C++ 14.0) was released on July 20, 2015.&lt;ref&gt;{{cite web|url=http://blogs.msdn.com/b/vcblog/archive/2015/07/20/visual-studio-2015-rtm-now-available.aspx|title=Visual Studio 2015 RTM Now Available|author=Eric Battalio|date=July 20, 2015|publisher=Microsoft|work=Visual C++ Team Blog}}&lt;/ref&gt; It features improved C++11/14/17 support.&lt;ref&gt;{{cite web|url=http://blogs.msdn.com/b/vcblog/archive/2015/06/19/c-11-14-17-features-in-vs-2015-rtm.aspx|title=C++11/14/17 Features In VS 2015 RTM|author=Stephan T. Lavavej|date=June 19, 2015|publisher=Microsoft|work=Visual C++ Team Blog}}&lt;/ref&gt; Without any announcement from Microsoft, Visual Studio 2015 Update 2 started generating telemetry calls in compiled binaries. After some users contacted Microsoft about this problem, Microsoft said they would remove these telemetry calls when compiling with the future Visual Studio 2015 Update 3.&lt;ref&gt;[https://www.infoq.com/news/2016/06/visual-cpp-telemetry Reviewing Microsoft's Automatic Insertion of Telemetry into C++ Binaries]&lt;/ref&gt;&lt;ref&gt;{{Cite web|url=https://www.reddit.com/r/cpp/comments/4ibauu/visual_studio_adding_telemetry_function_calls_to/d30dmvu|title=Visual Studio adding telemetry function calls to binary? • /r/cpp|website=reddit|access-date=2016-08-17}}&lt;/ref&gt; The function in question was removed from the Visual C++ CRT static libraries in Visual Studio 2015 Update 3.{{Citation needed|date=August 2016}}
* {{anchor|vc14}}Visual C++ 2017 (also known as Visual C++ 14.1) was released on March 7, 2017.
* {{anchor|vc16}}Visual C++ 2019 (also known as Visual C++ 14.2) was released on April 2, 2019.

=== Internal version numbering ===

The predefined macro &lt;code&gt;_MSC_VER&lt;/code&gt; indicates the major and minor version numbers of the Visual C++ compiler. The macro's value is an integer literal in which the last two digits indicate the minor version number and the preceding digits indicate the major version number.

From Visual Studio 2017, &lt;code&gt;_MSC_VER&lt;/code&gt; is [https://blogs.msdn.microsoft.com/vcblog/2016/10/05/visual-c-compiler-version/ incremented monotonically at every Visual C++ toolset update]. Thus, for example, the version of MSVC++ 14.11 that ships with Visual Studio 2017 version 15.3.0 sets &lt;code&gt;_MSC_VER&lt;/code&gt; to &lt;code&gt;1911&lt;/code&gt;. Microsoft recommends using the &lt;code&gt;&amp;gt;=&lt;/code&gt; operator to test the value of &lt;code&gt;_MSC_VER&lt;/code&gt;.

Here are values of &lt;code&gt;_MSC_VER&lt;/code&gt; for various versions of the Visual C++ compiler:

&lt;syntaxhighlight lang="c++"&gt;
MSC    1.0   _MSC_VER == 100
MSC    2.0   _MSC_VER == 200
MSC    3.0   _MSC_VER == 300
MSC    4.0   _MSC_VER == 400
MSC    5.0   _MSC_VER == 500
MSC    6.0   _MSC_VER == 600
MSC    7.0   _MSC_VER == 700
MSVC++ 1.0   _MSC_VER == 800
MSVC++ 2.0   _MSC_VER == 900
MSVC++ 4.0   _MSC_VER == 1000 (Developer Studio 4.0)
MSVC++ 4.2   _MSC_VER == 1020 (Developer Studio 4.2)
MSVC++ 5.0   _MSC_VER == 1100 (Visual Studio 97 version 5.0)
MSVC++ 6.0   _MSC_VER == 1200 (Visual Studio 6.0 version 6.0)
MSVC++ 7.0   _MSC_VER == 1300 (Visual Studio .NET 2002 version 7.0)
MSVC++ 7.1   _MSC_VER == 1310 (Visual Studio .NET 2003 version 7.1)
MSVC++ 8.0   _MSC_VER == 1400 (Visual Studio 2005 version 8.0)
MSVC++ 9.0   _MSC_VER == 1500 (Visual Studio 2008 version 9.0)
MSVC++ 10.0  _MSC_VER == 1600 (Visual Studio 2010 version 10.0)
MSVC++ 11.0  _MSC_VER == 1700 (Visual Studio 2012 version 11.0)
MSVC++ 12.0  _MSC_VER == 1800 (Visual Studio 2013 version 12.0)
MSVC++ 14.0  _MSC_VER == 1900 (Visual Studio 2015 version 14.0)
MSVC++ 14.1  _MSC_VER == 1910 (Visual Studio 2017 version 15.0)
MSVC++ 14.11 _MSC_VER == 1911 (Visual Studio 2017 version 15.3)
MSVC++ 14.12 _MSC_VER == 1912 (Visual Studio 2017 version 15.5)
MSVC++ 14.13 _MSC_VER == 1913 (Visual Studio 2017 version 15.6)
MSVC++ 14.14 _MSC_VER == 1914 (Visual Studio 2017 version 15.7)
MSVC++ 14.15 _MSC_VER == 1915 (Visual Studio 2017 version 15.8)
MSVC++ 14.16 _MSC_VER == 1916 (Visual Studio 2017 version 15.9)
MSVC++ 14.2  _MSC_VER == 1920 (Visual Studio 2019 Version 16.0)
MSVC++ 14.21 _MSC_VER == 1921 (Visual Studio 2019 Version 16.1)
MSVC++ 14.22 _MSC_VER == 1922 (Visual Studio 2019 Version 16.2)
MSVC++ 14.23 _MSC_VER == 1923 (Visual Studio 2019 Version 16.3)
MSVC++ 14.24 _MSC_VER == 1924 (Visual Studio 2019 Version 16.4)
MSVC++ 14.25 _MSC_VER == 1925 (Visual Studio 2019 Version 16.5)
MSVC++ 14.26 _MSC_VER == 1926 (Visual Studio 2019 Version 16.6)
&lt;/syntaxhighlight&gt;

These version numbers refer to the major version number of the Visual C++ compilers and libraries, as can be seen from the installation directories.  It does not refer to the year in the name of the Visual Studio release. A thorough list is available.&lt;ref&gt;{{Cite web|title = Pre-defined Compiler Macros / Wiki / Compilers|url = https://sourceforge.net/p/predef/wiki/Compilers/#microsoft-visual-c|website = sourceforge.net|access-date = 2016-02-11}}&lt;/ref&gt;

== Compatibility ==

=== ABI ===

The Visual C++ compiler [[Application binary interface|ABI]] have historically changed between major compiler releases.&lt;ref&gt;Microsoft MSDN: [http://msdn.microsoft.com/en-us/library/bb531344.aspx Breaking Changes in Visual C++]&lt;/ref&gt; This is especially the case for STL containers, where container sizes have varied a lot between compiler releases.&lt;ref&gt;Microsoft MSDN: [http://msdn.microsoft.com/en-us/library/vstudio/hh438470.aspx Containers (Modern C++)]&lt;/ref&gt; Microsoft therefore recommends against using C++ interfaces at module boundaries when one wants to enable client code compiled using a different compiler version. Instead of C++, Microsoft recommends using [[C (programming language)|C]]&lt;ref&gt;Microsoft MSDN: [http://msdn.microsoft.com/en-us/library/vstudio/hh438475.aspx Portability At ABI Boundaries (Modern C++)]&lt;/ref&gt; or [[Component Object Model|COM]]&lt;ref&gt;Microsoft forum: [http://social.msdn.microsoft.com/Forums/en/vcgeneral/thread/86eda6a7-4d90-4e19-a9d4-6cbe22b661f4 Binary compatibility across Visual C++ versions] {{Webarchive|url=https://archive.today/20130216110824/http://social.msdn.microsoft.com/Forums/en/vcgeneral/thread/86eda6a7-4d90-4e19-a9d4-6cbe22b661f4 |date=2013-02-16 }}&lt;/ref&gt; interfaces, which are designed to have a stable ABI between compiler releases.

All 14.x MSVC releases have a stable ABI,&lt;ref&gt;docs.microsoft.com: [https://docs.microsoft.com/en-us/cpp/porting/binary-compat-2015-2017? C++ binary compatibility between Visual Studio 2015, 2017, and 2019]&lt;/ref&gt; and binaries built with these versions can be mixed in a forwards-compatible manner, noting the following restrictions:
* The toolset version used must be equal to or higher than the highest toolset version used to build any linked binaries.
* The MSVC Redistributable version must be equal to or higher than the toolset version used by any application component.
* Static libraries or object files compiled with /GL (Whole program optimisation) aren't binary compatible between versions and must use the exact same toolset.

=== C runtime libraries ===

Visual C++ ships with different versions of C runtime libraries.&lt;ref name="MSVCRuntime"&gt;[http://msdn.microsoft.com/en-us/library/abx4dbyh.aspx C Run-Time Libraries]&lt;/ref&gt; This means users can compile their code with any of the available libraries. However, this can cause some problems when using different components ([[Dynamic-link library|DLLs]], [[EXE]]s) in the same program. A typical example is a program using different [[Library (computing)|libraries]]. The user should use the same [[C standard library|C Run-Time]] for all the program's components unless the implications are understood. Microsoft recommends using the [[Thread (computer science)|multithreaded]], dynamic link library (/MD or /MDd compiler option) to avoid possible problems.&lt;ref name="MSVCRuntime" /&gt;

=== C ===

Although the product originated as an IDE for the [[C (programming language)|C]] programming language, for many years the compiler's support for that language conformed only to the original edition of the [[ANSI C|C standard]], dating from 1989, but not the [[C99]] revision of the standard. There had been no plans to support C99 even in 2011, more than a decade after its publication.&lt;ref&gt;{{cite web|url=https://connect.microsoft.com/VisualStudio/feedback/details/653336/c99-support|title=C99 support|work=Microsoft Connect|archive-url=https://web.archive.org/web/20160304185822/http://connect.microsoft.com/VisualStudio/feedback/details/653336/c99-support|archive-date=2016-03-04|url-status=dead|access-date=2015-09-21}}&lt;/ref&gt;

Visual C++ 2013 finally added support for various C99 features in its C mode (including designated initializers, compound literals, and the &lt;code&gt;_Bool&lt;/code&gt; type)&lt;ref&gt;{{cite web|title=What's New for Visual C++ in Visual Studio 2013|url=https://msdn.microsoft.com/en-us/library/hh409293(v=vs.120).aspx|work=Microsoft Developer Network|publisher=Microsoft}}&lt;/ref&gt;, though it was still not complete.&lt;ref&gt;{{cite web|url=http://blogs.msdn.com/b/vcblog/archive/2013/07/19/c99-library-support-in-visual-studio-2013.aspx|title=C99 library support in Visual Studio 2013|author=Pat Brenner|date=July 19, 2013|publisher=Microsoft|work=Visual C++ Team Blog}}&lt;/ref&gt; Visual C++ 2015 further improved the C99 support, with full support of the C99 Standard Library, except for features that require C99 language features not yet supported by the compiler.&lt;ref&gt;{{cite web|url=https://msdn.microsoft.com/en-us/library/hh409293(v=vs.140).aspx|title=What's New for Visual C++ in Visual Studio 2015|work=Microsoft Developer Network|publisher=Microsoft}}&lt;/ref&gt;

Most of the changes from the [[C11 (C standard revision)|C11]] revision of the standard are still not supported by Visual C++ 2017.&lt;ref&gt;{{cite web|url=https://docs.microsoft.com/en-us/cpp/build/walkthrough-compile-a-c-program-on-the-command-line|title=Walkthrough: Compile a C program on the command line|work=Visual C++ Documentation|publisher=Microsoft}}&lt;/ref&gt; For example, generic selections via the &lt;code&gt;_Generic&lt;/code&gt; keyword are not supported by the compiler and result in a syntax error.&lt;ref&gt;{{cite web|url=https://developercommunity.visualstudio.com/content/problem/250665/msvc-2017-does-not-support-generic-type-generic-ma.html|title=MSVC 2017 does not support _Generic (type generic macros) in C}}&lt;/ref&gt;

"Full C11 conformance is on our roadmap, and updating the preprocessor is just the first step in that process. The C11 _Generic feature is not actually part of the preprocessor, so it has not yet been implemented. When implemented I expect the feature to work independent of if the traditional or updated preprocessor logic is used."&lt;ref&gt;{{cite web|url=https://blogs.msdn.microsoft.com/vcblog/2018/07/06/msvc-preprocessor-progress-towards-conformance/ |title=MSVC Preprocessor Progress towards Conformance |date=July 6, 2018 |last=Luvsanbat |first=Bat-Ulzii |website=[[Microsoft Developer Network]] |archiveurl=https://web.archive.org/web/20190108124214/https://blogs.msdn.microsoft.com/vcblog/2018/07/06/msvc-preprocessor-progress-towards-conformance/ |archivedate=8 Jan 2019}}&lt;/ref&gt;

== References ==

{{reflist|30em}}

== External links ==

* {{Official website|https://docs.microsoft.com/en-us/cpp/}}
* [http://blogs.msdn.com/brianjo/archive/2004/08/08/211085.aspx Building Win32 Applications Using Visual C++ 2005 Express]
* [https://web.archive.org/web/20080424142149/http://msdn2.microsoft.com/en-us/library/hs24szh9.aspx Visual C++ Tools and Templates in Visual Studio Editions]
* [https://visualstudio.microsoft.com/visual-cpp-build-tools/ Visual C++ standalone build tools]
* [http://channel9.msdn.com/Shows/C9-GoingNative Microsoft's 'Going Native' Channel Nine show]
* [http://blogs.msdn.com/b/vcblog/archive/2015/09/25/rejuvenating-the-microsoft-c-c-compiler.aspx Rejuvenating the Microsoft C/C++ Compiler], September 2015

{{MS DevTools}}

[[Category:C compilers]]
[[Category:C++ compilers]]
[[Category:Integrated development environments]]
[[Category:Microsoft development tools]]
[[Category:Microsoft Visual Studio|C Plus Plus]]</text>
      <sha1>b1o4kqorfw91t6uyhy9i0821nbnqjzr</sha1>
    </revision>
  </page>
</mediawiki>
