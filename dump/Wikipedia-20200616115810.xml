<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <dbname>enwiki</dbname>
    <base>https://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.35.0-wmf.36</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Programming language theory</title>
    <ns>0</ns>
    <id>3882218</id>
    <revision>
      <id>949339416</id>
      <parentid>943931320</parentid>
      <timestamp>2020-04-05T22:36:20Z</timestamp>
      <contributor>
        <username>The Eloquent Peasant</username>
        <id>18054835</id>
      </contributor>
      <comment>Adding local [[Wikipedia:Short description|short description]]: "Branch of computer science", overriding Wikidata description "branch of computer science that deals with the design, implementation, analysis, characterization, and classification of programming languages and their individual features" ([[Wikipedia:Shortdesc helper|Shortdesc helper]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="15553" xml:space="preserve">{{short description|Branch of computer science}}
{{Redirect|Theory of programming|the branch of CS that deals with what problems can be solved|Theory of computation}}
{{More footnotes |date=October 2015}}
[[File:Lambda lc.svg|thumb|250px|The lowercase [[Greek alphabet|Greek]] letter λ ([[lambda]]) is an unofficial symbol of the field of programming language theory. This usage derives from the [[lambda calculus]], a [[model of computation]] introduced by [[Alonzo Church]] in the 1930s and widely used by programming language researchers. It graces the cover of the classic text ''[[Structure and Interpretation of Computer Programs]]'', and the title of the so-called [[Lambda Papers]], written by [[Gerald Jay Sussman]] and [[Guy Steele]], the developers of the [[Scheme (programming language)|Scheme programming language]].]]

'''Programming language theory''' ('''PLT''') is a branch of [[computer science]] that deals with the design, implementation, analysis, characterization, and classification of [[programming language]]s and their individual [[Programming language#Elements|features]].  It falls within the discipline of [[computer science]], both depending on and affecting [[mathematics]], [[software engineering]], [[linguistics]] and even [[cognitive science]].  It is a well-recognized branch of computer science, and an active research area, with results published in numerous [[Academic journal|journals]] dedicated to PLT, as well as in general computer science and engineering publications.

== History ==

In some ways, the history of programming language theory predates even the development of programming languages themselves.  The [[lambda calculus]], developed by [[Alonzo Church]] and [[Stephen Cole Kleene]] in the 1930s, is considered by some to be the world's first programming language, even though it was intended to [[Model of computation|''model'']] computation rather than being a means for programmers to [[Computer programming|''describe'']] algorithms to a computer system.  Many modern [[functional programming language]]s have been described as providing a "thin veneer" over the lambda calculus,&lt;ref&gt;http://www.c2.com/cgi/wiki?ModelsOfComputation&lt;/ref&gt; and many are easily described in terms of it.

The first programming language to be invented was [[Plankalkül]], which was designed by [[Konrad Zuse]] in the 1940s, but not publicly known until 1972 (and not implemented until 1998).  The first widely known and successful [[high-level programming language]] was [[Fortran]], developed from 1954 to 1957 by a team of [[IBM]] researchers led by [[John Backus]].  The success of FORTRAN led to the formation of a committee of scientists to develop a "universal" computer language; the result of their effort was [[ALGOL 58]].  Separately, [[John McCarthy (computer scientist)|John McCarthy]] of [[MIT]] developed the [[Lisp programming language]] (based on the lambda calculus), the first language with origins in academia to be successful.  With the success of these initial efforts, programming languages became an active topic of research in the 1960s and beyond.

Some other key events in the history of programming language theory since then:

=== 1950s ===
* [[Noam Chomsky]] developed the [[Chomsky hierarchy]] in the field of [[linguistics]]; a discovery which has directly impacted programming language theory and other branches of computer science.

=== 1960s ===
* The [[Simula]] language was developed by [[Ole-Johan Dahl]] and [[Kristen Nygaard]]; it is widely considered to be the first example of an [[object-oriented programming language]]; Simula also introduced the concept of [[coroutine]]s.
* In 1964, [[Peter Landin]] is the first to realize [[Alonzo Church|Church]]'s [[lambda calculus]] can be used to model programming languages. He introduces the [[SECD machine]] which "interprets" lambda expressions.
* In 1965, Landin introduces the [[J operator]], essentially a form of [[continuation]].
* In 1966, Landin introduces [[ISWIM]], an abstract computer [[programming language]] in his article ''The Next 700 Programming Languages''. It is influential in the design of languages leading to the [[Haskell (programming language)|Haskell]] programming language.
* In 1966, [[Corrado Böhm]] introduced the programming language [[CUCH]] (Curry-Church).&lt;ref&gt;[[Corrado Böhm|C. Böhm]] and W. Gross (1996). Introduction to the CUCH. In E. R. Caianiello (ed.), ''Automata Theory'', p. 35-64/&lt;/ref&gt;
* In 1967, [[Christopher Strachey]] publishes his influential set of lecture notes ''[[Fundamental Concepts in Programming Languages]]'', introducing the terminology ''[[Value (computer science)|R-values]]'', ''[[Value (computer science)|L-values]]'', ''[[parametric polymorphism]]'', and ''[[ad hoc polymorphism]]''.
* In 1969, [[J. Roger Hindley]] publishes ''The Principal Type-Scheme of an Object in Combinatory Logic'', later generalized into the [[Hindley&amp;ndash;Milner]] [[type inference]] algorithm.
* In 1969, [[Tony Hoare]] introduces the [[Hoare logic]], a form of [[axiomatic semantics]].
* In 1969, [[William Alvin Howard]] observed that a "high-level" [[proof calculus|proof system]], referred to as [[natural deduction]], can be directly interpreted in its [[intuitionistic]] version as a typed variant of the [[model of computation]] known as [[lambda calculus]]. This became known as the [[Curry–Howard correspondence]].

=== 1970s ===
* In 1970, [[Dana Scott]] first publishes his work on [[denotational semantics]].
* In 1972, [[logic programming]] and [[Prolog]] were developed thus allowing computer programs to be expressed as mathematical logic.
* A team of scientists at [[Xerox PARC]] led by [[Alan Kay]] develop [[Smalltalk]], an object-oriented language widely known for its innovative development environment.
* In 1974, [[John C. Reynolds]] discovers [[System F]]. It had already been discovered in 1971 by the mathematical logician [[Jean-Yves Girard]].
* From 1975, [[Gerald Jay Sussman]] and [[Guy Steele]] develop the [[Scheme (programming language)|Scheme programming language]], a Lisp dialect incorporating [[lexical scoping]], a unified namespace, and elements from the [[actor model]] including first-class [[continuation]]s.
* Backus, at the 1977 [[ACM Turing Award]] lecture, assailed the current state of industrial languages and proposed a new class of programming languages now known as [[function-level programming]] languages.
* In 1977, [[Gordon Plotkin]] introduces [[Programming Computable Functions]], an abstract typed functional language.
* In 1978, [[Robin Milner]] introduces the [[Hindley–Milner type inference algorithm]] for the [[ML programming language]]. [[Type theory]] became applied as a discipline to programming languages, this application has led to tremendous advances in type theory over the years.

=== 1980s ===
* In 1981, [[Gordon Plotkin]] publishes his paper on [[structured operational semantics]].
* In 1988, [[Gilles Kahn]] published his paper on [[natural semantics]].
* There emerged [[process calculus|process calculi]], such as the [[Calculus of Communicating Systems]] of [[Robin Milner]], and the [[Communicating sequential processes]] model of [[C. A. R. Hoare]], as well as similar models of concurrency such as the [[actor model]] of [[Carl Hewitt]].
* In 1985, the release of [[Miranda (programming language)|Miranda]] sparks an academic interest in lazy-evaluated pure functional programming languages. A committee was formed to define an open standard resulting in the release of the Haskell 1.0 standard in 1990.
* [[Bertrand Meyer]] created the methodology [[Design by contract]] and incorporated it into the [[Eiffel (programming language)|Eiffel programming language]].

=== 1990s ===
* [[Gregor Kiczales]], Jim Des Rivieres and [[Daniel G. Bobrow]] published the book ''[[The Art of the Metaobject Protocol]]''.
* [[Eugenio Moggi]] and [[Philip Wadler]] introduced the use of [[Monads in functional programming|monads]] for structuring programs written in [[functional programming language]]s.

== Sub-disciplines and related fields ==

There are several fields of study which either lie within programming language theory, or which have a profound influence on it; many of these have considerable overlap. In addition, PLT makes use of many other branches of [[mathematics]], including [[computability theory]], [[category theory]], and [[set theory]].

=== Formal semantics ===
{{main|Formal semantics of programming languages}}
Formal semantics is the formal specification of the behaviour of computer programs and programming languages. Three common approaches to describe the semantics or "meaning" of a computer program are [[denotational semantics]], [[operational semantics]] and [[axiomatic semantics]].

=== Type theory ===
{{main|Type theory}}
Type theory is the study of [[type system]]s; which are "a tractable syntactic method for proving the absence of certain program behaviors by classifying phrases according to the kinds of values they compute".&lt;ref&gt;Benjamin C. Pierce. 2002. [https://books.google.com/books?hl=en&amp;lr=&amp;id=ti6zoAC9Ph8C&amp;oi=fnd&amp;pg=PR13&amp;dq=%22Types+and+Programming+Languages%22&amp;ots=ECKdtHl1-D&amp;sig=tZ7etBjsYEd6_jCsHmN3cCItvjA#v=onepage&amp;q=%22Types%20and%20Programming%20Languages%22&amp;f=false Types and Programming Languages]. MIT Press, Cambridge, Massachusetts, USA.&lt;/ref&gt; Many programming languages are distinguished by the characteristics of their type systems.

=== Program analysis and transformation ===
{{main|Program analysis|Program transformation}}
Program analysis is the general problem of examining a program and determining key characteristics (such as the absence of classes of [[Software bug|program errors]]). Program transformation is the process of transforming a program in one form (language) to another form.

=== Comparative programming language analysis ===
Comparative programming language analysis seeks to classify programming languages into different types based on their characteristics; broad categories of programming languages are often known as [[programming paradigm]]s.

=== Generic and metaprogramming ===
[[Metaprogramming]] is the generation of higher-order programs which, when executed, produce programs (possibly in a different language, or in a subset of the original language) as a result.

=== Domain-specific languages ===
[[Domain-specific language]]s are languages constructed to efficiently solve problems of a particular part of domain.

=== Compiler construction ===
{{main|Compiler construction}}
[[Compiler]] theory is the theory of writing ''compilers'' (or more generally, ''translators''); programs which translate a program written in one language into another form.  The actions of a compiler are traditionally broken up into ''syntax analysis'' ([[Lexical_analysis#Scanner|scan]]ning and [[parsing]]), ''semantic analysis'' (determining what a program should do), ''[[Compiler optimization|optimization]]'' (improving the performance of a program as indicated by some metric; typically execution speed) and ''[[Code generation (compiler)|code generation]]'' (generation and output of an equivalent program in some target language; often the [[instruction set]] of a CPU).

=== Run-time systems ===
[[Run-time system|Runtime systems]] refers to the development of programming language [[runtime environment]]s and their components, including [[virtual machine]]s, [[Garbage collection (computer science)|garbage collection]], and [[foreign function interface]]s.

== Journals, publications, and conferences ==

Conferences are the primary venue for presenting research in programming languages. The most well known conferences include the ''[[Symposium on Principles of Programming Languages]]'' (POPL), [[Conference on Programming Language Design and Implementation|''Programming Language Design and Implementation'']] (PLDI), the ''[[International Conference on Functional Programming]]'' (ICFP), ''the [[OOPSLA|International Conference on Object Oriented Programming, Systems, Languages and Applications]]'' (OOPSLA) and ''the [[International Conference on Architectural Support for Programming Languages and Operating Systems]]'' (ASPLOS)''.'' 

Notable journals that publish PLT research include the ''[[ACM Transactions on Programming Languages and Systems]]'' (TOPLAS), ''[[Journal of Functional Programming]]'' (JFP), ''[[Journal of Functional Programming|Journal of Functional and Logic Programming]]'', and ''[[Higher-Order and Symbolic Computation]]''.

== See also ==
* [[SIGPLAN]]
* [[Timeline of programming languages]]
* [[Very high-level programming language]]

== References ==
{{reflist}}

== Further reading ==
{{see also|Programming language#Further reading|Semantics of programming languages#Further reading}}
* [[Martín Abadi|Abadi, Martín]] and [[Luca Cardelli|Cardelli, Luca]]. ''A Theory of Objects''. Springer-Verlag.
* [[Michael J. C. Gordon]]. ''Programming Language Theory and Its Implementation''. Prentice Hall.
* [[Carl Gunter (computer scintist)|Gunter, Carl]] and [[John C. Mitchell|Mitchell, John C.]] (eds.). ''Theoretical Aspects of Object Oriented Programming Languages: Types, Semantics, and Language Design''. MIT Press.
* [[Robert Harper (computer scientist)|Harper, Robert]]. ''[https://web.archive.org/web/20070627041059/https://www.cs.cmu.edu/~rwh/plbook/book.pdf Practical Foundations for Programming Languages]''. Draft version.
* [[Donald Knuth|Knuth, Donald E.]] (2003). ''[http://www-cs-faculty.stanford.edu/~uno/cl.html Selected Papers on Computer Languages]''. Stanford, California: Center for the Study of Language and Information.
* [[John C. Mitchell|Mitchell, John C.]]. ''Foundations for Programming Languages''.
* [[John C. Mitchell|Mitchell, John C.]]. ''Introduction to Programming Language Theory''.
* [[Peter. W. O'Hearn|O'Hearn, Peter. W.]] and [[Robert. D. Tennent|Tennent, Robert. D.]] (1997). ''[https://web.archive.org/web/20110719175135/http://www.eecs.qmul.ac.uk/~ohearn/Algol/algol.html Algol-like Languages]''. Progress in Theoretical Computer Science. Birkhauser, Boston.
* [[Benjamin C. Pierce|Pierce, Benjamin C.]] (2002). ''[http://www.cis.upenn.edu/~bcpierce/tapl/main.html Types and Programming Languages]''. MIT Press.
* Pierce, Benjamin C. ''Advanced Topics in Types and Programming Languages''.
* Pierce, Benjamin C. ''et al.'' (2010). ''[http://www.cis.upenn.edu/~bcpierce/sf/ Software Foundations]''.

==External links==
{{Commonscat}}
*[http://lambda-the-ultimate.org/policies#Purpose Lambda the Ultimate], a community weblog for professional discussion and repository of documents on programming language theory.
*[http://www.cis.upenn.edu/~bcpierce/courses/670Fall04/GreatWorksInPL.shtml Great Works in Programming Languages]. Collected by [[Benjamin C. Pierce]] ([[University of Pennsylvania]]).
*[https://www.cs.cmu.edu/~crary/819-f09/ Classic Papers in Programming Languages and Logic]. Collected by [[Karl Crary]] ([[Carnegie Mellon University]]).
*[https://www.cs.cmu.edu/afs/cs.cmu.edu/user/mleone/web/language-research.html Programming Language Research]. Directory by [[Mark Leone]].
*[http://www.cs.uu.nl/wiki/Techno/ProgrammingLanguageTheoryTextsOnline Programming Language Theory Texts Online]. At [[Utrecht University]].
*[http://turing100.acm.org/lambda_calculus_timeline.pdf λ-Calculus: Then &amp; Now] by [[Dana S. Scott]] for the ACM Turing Centenary Celebration
*[http://plgrand.blogspot.com/ Grand Challenges in Programming Languages]. Panel session at [[POPL]] 2009.

[[Category:Programming language theory| ]]</text>
      <sha1>g3nwk4gxcemdxadpvqgn73o2u5bzwqz</sha1>
    </revision>
  </page>
</mediawiki>
