<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <dbname>enwiki</dbname>
    <base>https://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.35.0-wmf.36</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Programming language</title>
    <ns>0</ns>
    <id>23015</id>
    <revision>
      <id>961402693</id>
      <parentid>961402305</parentid>
      <timestamp>2020-06-08T08:04:04Z</timestamp>
      <contributor>
        <username>Kpgjhpjm</username>
        <id>33695565</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contribs/Masoud ahhmad|Masoud ahhmad]] ([[User talk:Masoud ahhmad|talk]]) to last version by Kpgjhpjm</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="79862" xml:space="preserve">{{pp-pc1}}
{{short description|Language for communicating instructions to a machine}}
{{Use dmy dates|date=April 2012}}
[[File:C Hello World Program.png|thumb|right|402px|The [[source code]] for a simple computer program written in the [[C (programming language)|C programming language]]. When [[compiled]] and [[Execution (computing)|run]], it will give the output "[["Hello, World!" program|Hello, world!]]".]]

A '''programming language''' is a [[formal language]] comprising a [[Instruction set architecture|set of instructions]] that produce various kinds of [[Input/output|output]]. Programming languages are used in [[computer programming]] to implement [[algorithm]]s.

Most programming languages consist of [[Machine instruction|instructions]] for [[computer]]s. There are programmable machines that use a set of [[domain-specific language|specific instructions]], rather than [[General-purpose language|general programming languages]]. Early ones preceded the [[History of computing hardware|invention of the digital computer]], the first probably being the automatic flute player described in the 9th century by the [[Banū Mūsā|brothers Musa]] in [[Baghdad]], during the [[Islamic Golden Age]].&lt;ref&gt;{{cite journal | last = Koetsier | first = Teun | title = On the prehistory of programmable machines; musical automata, looms, calculators |journal= Mechanism and Machine Theory |volume=36 |issue=5 |date=May 2001 | pages = 589–603 |doi=10.1016/S0094-114X(01)00005-2}}&lt;/ref&gt; Since the early 1800s, programs have been used to direct the behavior of machines such as [[Jacquard loom]]s, [[music box]]es and [[player piano]]s.&lt;ref&gt;Ettinger, James (2004) ''Jacquard's Web'', Oxford University Press&lt;/ref&gt; The programs for these machines (such as a player piano's scrolls) did not produce different behavior in response to different inputs or conditions.

Thousands of different programming languages have been created, and more are being created every year. Many programming languages are written in an [[imperative programming|imperative]] form (i.e., as a sequence of operations to perform) while other languages use the [[declarative programming|declarative]] form (i.e. the desired result is specified, not how to achieve it).

The description of a programming language is usually split into the two components of [[Syntax (programming languages)|syntax]] (form) and [[semantics (computer science)|semantics]] (meaning). Some languages are defined by a specification document (for example, the [[C (programming language)|C]] programming language is specified by an [[International Organization for Standardization|ISO]] Standard) while other languages (such as [[Perl]]) have a dominant [[Programming language implementation|implementation]] that is treated as a [[reference implementation|reference]]. Some languages have both, with the basic language defined by a standard and extensions taken from the dominant implementation being common.

==Definitions==
A programming language is a notation for writing [[computer program|programs]], which are specifications of a computation or [[algorithm]].&lt;ref name="Aaby 2004"&gt;{{cite book|last=Aaby|first=Anthony|title=Introduction to Programming Languages|year=2004|url=http://www.emu.edu.tr/aelci/Courses/D-318/D-318-Files/plbook/intro.htm|url-status=dead|archiveurl=https://web.archive.org/web/20121108043216/http://www.emu.edu.tr/aelci/Courses/D-318/D-318-Files/plbook/intro.htm|archivedate=8 November 2012|df=dmy-all|access-date=29 September 2012}}&lt;/ref&gt; Some authors restrict the term "programming language" to those languages that can express all possible algorithms.&lt;ref name="Aaby 2004"/&gt;&lt;ref&gt;In mathematical terms, this means the programming language is [[Turing completeness|Turing-complete]] {{cite book|last=MacLennan|first=Bruce J.|title=Principles of Programming Languages|page=1|publisher=Oxford University Press|year=1987|isbn=978-0-19-511306-8}}&lt;/ref&gt; Traits often considered important for what constitutes a programming language include:

; Function and target
: A ''computer programming language'' is a [[formal language|language]] used to write [[computer program]]s, which involves a [[computer]] performing some kind of computation&lt;ref name=sigplan&gt;{{cite web|author=[[Association for Computing Machinery|ACM]] SIGPLAN|title=Bylaws of the Special Interest Group on Programming Languages of the Association for Computing Machinery|url=http://www.acm.org/sigs/sigplan/sigplan_bylaws.htm|accessdate=19 June 2006|year=2003|url-status=live|archiveurl=https://web.archive.org/web/20060622110145/http://www.acm.org/sigs/sigplan/sigplan_bylaws.htm|archivedate=22 June 2006|df=dmy-all}}, "The scope of SIGPLAN is the theory, design, implementation, description, and application of computer programming languages – languages that permit the specification of a variety of different computations, thereby providing the user with significant control (immediate or delayed) over the computer's operation."&lt;/ref&gt; or [[algorithm]] and possibly control external devices such as [[printer (computing)|printers]], [[disk drive]]s, [[robot]]s,&lt;ref name="robots"&gt;{{cite web |url=http://www.cs.brown.edu/people/tld/courses/cs148/02/programming.html |title=Programming Robots |accessdate=23 September 2006 |last=Dean |first=Tom |year=2002 |work=Building Intelligent Robots |publisher=Brown University Department of Computer Science |url-status=live |archiveurl=https://web.archive.org/web/20061029045949/http://www.cs.brown.edu/people/tld/courses/cs148/02/programming.html |archivedate=29 October 2006 |df=dmy-all }}&lt;/ref&gt; and so on. For example, [[PostScript]] programs are frequently created by another program to control a computer printer or display. More generally, a programming language may describe computation on some, possibly abstract, machine. It is generally accepted that a complete specification for a programming language includes a description, possibly idealized, of a machine or processor for that language.&lt;ref name=nara2&gt;R. Narasimahan, Programming Languages and Computers: A Unified Metatheory, pp. 189—247 in Franz Alt, Morris Rubinoff (eds.) Advances in computers, Volume 8, Academic Press, 1994, {{ISBN|0-12-012108-5}}, p.193 : "a complete specification of a programming language must, by definition, include a specification of a processor—idealized, if you will—for that language." [the source cites many references to support this statement]&lt;/ref&gt; In most practical contexts, a programming language involves a computer; consequently, programming languages are usually defined and studied this way.&lt;ref&gt;{{cite book|last=Ben Ari|first=Mordechai|title=Understanding Programming Languages|publisher=John Wiley and Sons| year=1996|quote=Programs and languages can be defined as purely formal mathematical objects. However, more people are interested in programs than in other mathematical objects such as groups, precisely because it is possible to use the program—the sequence of symbols—to control the execution of a computer. While we highly recommend the study of the theory of programming, this text will generally limit itself to the study of programs as they are executed on a computer.}}&lt;/ref&gt; Programming languages differ from [[natural language]]s in that natural languages are only used for interaction between people, while programming languages also allow humans to communicate instructions to machines.
; Abstractions
: Programming languages usually contain [[abstraction (computer science)|abstractions]] for defining and manipulating [[data structure]]s or controlling the [[control flow|flow of execution]]. The practical necessity that a programming language support adequate abstractions is expressed by the [[abstraction principle (programming)|abstraction principle]].&lt;ref&gt;David A. Schmidt, ''The structure of typed programming languages'', MIT Press, 1994, {{ISBN|0-262-19349-3}}, p. 32&lt;/ref&gt; This principle is sometimes formulated as a recommendation to the programmer to make proper use of such abstractions.&lt;ref&gt;{{cite book|last=Pierce|first=Benjamin|title=Types and Programming Languages|url=https://archive.org/details/typesprogramming00pier_207|url-access=limited|publisher=MIT Press|year=2002|isbn=978-0-262-16209-8|page=[https://archive.org/details/typesprogramming00pier_207/page/n362 339]}}&lt;/ref&gt;
; Expressive power
: The [[theory of computation]] classifies languages by the computations they are capable of expressing. All [[Turing completeness|Turing complete]] languages can implement the same set of [[algorithm]]s. [[SQL-92|ANSI/ISO SQL-92]] and [[Charity (programming language)|Charity]] are examples of languages that are not Turing complete, yet are often called programming languages.&lt;ref&gt;{{cite web|author=Digital Equipment Corporation|title=Information Technology – Database Language SQL (Proposed revised text of DIS 9075)|url=http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt|work=ISO/IEC 9075:1992, Database Language SQL|accessdate=29 June 2006|url-status=live|archiveurl=https://web.archive.org/web/20060621035823/http://www.contrib.andrew.cmu.edu/%7Eshadow/sql/sql1992.txt|archivedate=21 June 2006|df=dmy-all}}&lt;/ref&gt;&lt;ref&gt;{{cite web|author=The Charity Development Group|title=The CHARITY Home Page|url=http://pll.cpsc.ucalgary.ca/charity1/www/home.html|date=December 1996|accessdate=29 June 2006|url-status=live|archiveurl=https://web.archive.org/web/20060718010551/http://pll.cpsc.ucalgary.ca/charity1/www/home.html|archivedate=18 July 2006|df=dmy-all}}, "Charity is a categorical programming language...", "All Charity computations terminate."&lt;/ref&gt;

[[Markup languages]] like [[XML]], [[HTML]], or [[troff]], which define [[structured data]], are not usually considered programming languages.&lt;ref&gt;[http://www.w3.org/XML/1999/XML-in-10-points.html XML in 10 points] {{webarchive|url=https://web.archive.org/web/20090906083110/http://www.w3.org/XML/1999/XML-in-10-points.html |date=6 September 2009 }} [[W3C]], 1999, "XML is not a programming language."&lt;/ref&gt;&lt;ref&gt;{{cite book|last=Powell|first=Thomas|title=HTML &amp; XHTML: the complete reference|publisher=McGraw-Hill|year=2003|isbn=978-0-07-222942-4|page=25|quote=HTML is not a programming language.}}&lt;/ref&gt;&lt;ref&gt;{{cite book|last1=Dykes|first1=Lucinda|first2=Ed|last2=Tittel|title=XML For Dummies |url=https://archive.org/details/html4fordummies00titt_2|url-access=registration|edition=4th |publisher=Wiley|year=2005|isbn=978-0-7645-8845-7|page=[https://archive.org/details/html4fordummies00titt_2/page/20 20]|quote=...it's a markup language, not a programming language.}}&lt;/ref&gt; Programming languages may, however, share the syntax with markup languages if a computational semantics is defined. [[XSLT]], for example, is a [[Turing completeness|Turing complete]] language entirely using XML syntax.&lt;ref&gt;{{cite web|url=http://www.ibm.com/developerworks/library/x-xslt/|title=What kind of language is XSLT?|publisher=IBM.com|accessdate=3 December 2010|url-status=live|archiveurl=https://web.archive.org/web/20110511192712/http://www.ibm.com/developerworks/library/x-xslt/|archivedate=11 May 2011|df=dmy-all|date=2005-04-20}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://msdn.microsoft.com/en-us/library/ms767587(VS.85).aspx|title=XSLT is a Programming Language|publisher=Msdn.microsoft.com|accessdate=3 December 2010|url-status=live|archiveurl=https://web.archive.org/web/20110203015119/http://msdn.microsoft.com/en-us/library/ms767587(VS.85).aspx|archivedate=3 February 2011|df=dmy-all}}&lt;/ref&gt;&lt;ref&gt;{{cite book|last=Scott|first=Michael|title=Programming Language Pragmatics|url=https://archive.org/details/programminglangu00scot_912|url-access=limited|publisher=[[Morgan Kaufmann]]|year=2006|isbn=978-0-12-633951-2|page=[https://archive.org/details/programminglangu00scot_912/page/n834 802]|quote=XSLT, though highly specialized to the transformation of XML, is a Turing-complete programming language.}}&lt;/ref&gt; Moreover, [[LaTeX]], which is mostly used for structuring documents, also contains a Turing complete subset.&lt;ref name="Oetiker et Al., 2017"&gt;{{cite web|last1=Oetiker|first1=Tobias|last2=Partl|first2=Hubert|last3=Hyna|first3=Irene|last4=Schlegl|first4=Elisabeth|title=The Not So Short Introduction to LATEX 2ε|url=https://tobi.oetiker.ch/lshort/lshort.pdf|website=tobi.oetiker.ch|accessdate=April 16, 2017|pages=1–157|format=Version 5.06|date=June 20, 2016|url-status=live|archiveurl=https://web.archive.org/web/20170314015536/https://tobi.oetiker.ch/lshort/lshort.pdf|archivedate=14 March 2017|df=dmy-all}}&lt;/ref&gt;&lt;ref&gt;{{cite book|last=Syropoulos|first=Apostolos|author2=Antonis Tsolomitis |author3=Nick Sofroniou |title=Digital typography using LaTeX|url=https://archive.org/details/digitaltypograph00syro_587|url-access=limited|publisher=Springer-Verlag|year=2003|isbn=978-0-387-95217-8|page=[https://archive.org/details/digitaltypograph00syro_587/page/n237 213]|quote=TeX is not only an excellent typesetting engine but also a real programming language.}}&lt;/ref&gt;

The term ''computer language'' is sometimes used interchangeably with programming language.&lt;ref&gt;Robert A. Edmunds, The Prentice-Hall standard glossary of computer terminology, Prentice-Hall, 1985, p. 91&lt;/ref&gt; However, the usage of both terms varies among authors, including the exact scope of each. One usage describes programming languages as a subset of computer languages.&lt;ref&gt;Pascal Lando, Anne Lapujade, Gilles Kassel, and Frédéric Fürst, ''[http://home.mis.u-picardie.fr/~site-ic/site/IMG/pdf/ICSOFT2007_final.pdf Towards a General Ontology of Computer Programs]'' {{webarchive|url=https://web.archive.org/web/20150707093557/http://home.mis.u-picardie.fr/~site-ic/site/IMG/pdf/ICSOFT2007_final.pdf |date=7 July 2015 }}, [http://dblp.uni-trier.de/db/conf/icsoft/icsoft2007-1.html ICSOFT 2007] {{webarchive|url=https://web.archive.org/web/20100427063709/http://dblp.uni-trier.de/db/conf/icsoft/icsoft2007-1.html |date=27 April 2010 }}, pp. 163–170&lt;/ref&gt; Similarly, languages used in computing that have a different goal than expressing computer programs are generically designated computer languages. For instance, markup languages are sometimes referred to as computer languages to emphasize that they are not meant to be used for programming.&lt;ref&gt;S.K. Bajpai, ''Introduction To Computers And C Programming'', New Age International, 2007, {{ISBN|81-224-1379-X}}, p. 346&lt;/ref&gt;

Another usage regards programming languages as theoretical constructs for programming abstract machines, and computer languages as the subset thereof that runs on physical computers, which have finite hardware resources.&lt;ref&gt;R. Narasimahan, Programming Languages and Computers: A Unified Metatheory, pp. 189—247 in Franz Alt, Morris Rubinoff (eds.) Advances in computers, Volume 8, Academic Press, 1994, {{ISBN|0-12-012108-5}}, p.215: "[...] the model [...] for computer languages differs from that [...] for programming languages in only two respects. In a computer language, there are only finitely many names—or registers—which can assume only finitely many values—or states—and these states are not further distinguished in terms of any other attributes. [author's footnote:] This may sound like a truism but its implications are far reaching. For example, it would imply that any model for programming languages, by fixing certain of its parameters or features, should be reducible in a natural way to a model for computer languages."&lt;/ref&gt; [[John C. Reynolds]] emphasizes that [[formal specification]] languages are just as much programming languages as are the languages intended for execution. He also argues that textual and even graphical input formats that affect the behavior of a computer are programming languages, despite the fact they are commonly not Turing-complete, and remarks that ignorance of programming language concepts is the reason for many flaws in input formats.&lt;ref&gt;John C. Reynolds, "Some thoughts on teaching programming and programming languages", ''[[SIGPLAN]] Notices'', Volume 43, Issue 11, November 2008, p.109&lt;/ref&gt;

==History==
{{main|History of programming languages}}

===Early developments===
Very early computers, such as [[Colossus computer|Colossus]], were programmed without the help of a [[stored program]], by modifying their circuitry or setting banks of physical controls.

Slightly later, programs could be written in [[machine language]], where the programmer writes each instruction in a numeric form the hardware can execute directly. For example, the instruction to add the value in two memory location might consist of 3 numbers: an "opcode" that selects the "add" operation, and two memory locations. The programs, in decimal or binary form, were read in from [[punched card]]s, paper tape, [[Magnetic tape data storage|magnetic tape]] or toggled in on switches on the [[front panel]] of the computer.  Machine languages were later termed ''[[first-generation programming language]]s'' (1GL).

The next step was development of so-called ''[[second-generation programming language]]s'' (2GL) or [[assembly language]]s, which were still closely tied to the [[instruction set architecture]] of the specific computer. These served to make the program much more human-readable and relieved the programmer of tedious and error-prone address calculations.

The first ''[[high-level programming language]]s'', or ''[[third-generation programming language]]s'' (3GL), were written in the 1950s. An early high-level programming language to be designed for a computer was [[Plankalkül]], developed for the German [[Z3 (computer)|Z3]] by [[Konrad Zuse]] between 1943 and 1945. However, it was not implemented until 1998 and 2000.&lt;ref&gt;
[[Raúl Rojas|Rojas, Raúl]], et al. (2000). "Plankalkül: The First High-Level Programming Language and its Implementation". Institut für Informatik, Freie Universität Berlin, Technical Report B-3/2000. [http://www.zib.de/zuse/Inhalt/Programme/Plankalkuel/Plankalkuel-Report/Plankalkuel-Report.htm (full text)] {{webarchive|url=https://web.archive.org/web/20141018204625/http://www.zib.de/zuse/Inhalt/Programme/Plankalkuel/Plankalkuel-Report/Plankalkuel-Report.htm |date=18 October 2014 }}&lt;/ref&gt;

[[John Mauchly]]'s [[Short Code (computer language)|Short Code]], proposed in 1949, was one of the first high-level languages ever developed for an [[electronic computer]].&lt;ref name=Sebesta&gt;Sebesta, W.S Concepts of Programming languages. 2006;M6 14:18 pp.44. {{ISBN|0-321-33025-0}}&lt;/ref&gt; Unlike [[machine code]], Short Code statements represented mathematical expressions in understandable form. However, the program had to be translated into machine code every time it ran, making the process much slower than running the equivalent machine code.

&lt;!-- [[WP:NFCC]] violation: [[File:Manchester Mark2.jpg|thumb|300px|The [[Manchester Mark 1]] ran programs written in [[Autocode]] from 1952.]] --&gt;
At the [[University of Manchester]], [[Alick Glennie]] developed [[Autocode]] in the early 1950s. As a [[high-level programming language|programming language]], it used a [[compiler]] to automatically convert the language into machine code. The first code and compiler was developed in 1952 for the [[Manchester Mark 1|Mark 1]] computer at the University of Manchester and is considered to be the first [[compiler|compiled]] high-level programming language.&lt;ref&gt;{{Cite journal |last=Knuth|first=Donald E.|last2=Pardo|first2=Luis Trabb|title=Early development of programming languages|journal=Encyclopedia of Computer Science and Technology|volume=7|pages=419–493|postscript=&lt;!--None--&gt;}}&lt;/ref&gt;&lt;ref&gt;{{cite book|url=https://books.google.com/books?id=kpYX_lNI0VMC|title=Digitized: The Science of Computers and how it Shapes Our World|author=Peter J. Bentley|year=2012|publisher=Oxford University Press|page=87|isbn=9780199693795|url-status=live|archiveurl=https://web.archive.org/web/20160829191955/https://books.google.com/books?id=kpYX_lNI0VMC|archivedate=29 August 2016|df=dmy-all}}&lt;/ref&gt;

The second autocode was developed for the Mark 1 by [[Tony Brooker|R. A. Brooker]] in 1954 and was called the "Mark 1 Autocode". Brooker also developed an autocode for the [[Ferranti Mercury]] in the 1950s in conjunction with the University of Manchester. The version for the [[EDSAC|EDSAC 2]] was devised by [[David Hartley (computer scientist)|D. F. Hartley]] of [[University of Cambridge Mathematical Laboratory]] in 1961. Known as EDSAC 2 Autocode, it was a straight development from Mercury Autocode adapted for local circumstances and was noted for its object code optimisation and source-language diagnostics which were advanced for the time. A contemporary but separate thread of development, [[Atlas Autocode]] was developed for the University of Manchester [[Atlas Computer (Manchester)|Atlas 1]] machine.

In 1954, [[FORTRAN]] was invented at IBM by [[John Backus]]. It was the first widely used [[high-level language|high-level general purpose programming language]] to have a functional implementation, as opposed to just a design on paper.&lt;ref&gt;{{cite web |author= |url=http://www.nbcnews.com/id/17704662 |title=Fortran creator John Backus dies - Tech and gadgets- NBC News |publisher=NBC News |date=2007-03-20 |accessdate=2010-04-25 |df=dmy-all }}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=http://www.math.grin.edu/~rebelsky/Courses/CS302/99S/Outlines/outline.02.html |title=CSC-302 99S : Class 02: A Brief History of Programming Languages |publisher=Math.grin.edu |accessdate=2010-04-25 |url-status=live |archiveurl=https://web.archive.org/web/20100715042920/http://www.math.grin.edu/~rebelsky/Courses/CS302/99S/Outlines/outline.02.html |archivedate=15 July 2010 |df=dmy-all }}&lt;/ref&gt; It is still a popular language for [[high-performance computing]]&lt;ref name=hpc&gt;{{cite journal|url=http://queue.acm.org/detail.cfm?id=1820518|author=Eugene Loh|title=The Ideal HPC Programming Language|journal=Queue|date=18 June 2010|volume=8|issue=6|url-status=live|archiveurl=https://web.archive.org/web/20160304015345/http://queue.acm.org/detail.cfm?id=1820518|archivedate=4 March 2016|df=dmy-all}}&lt;/ref&gt; and is used for programs that benchmark and rank the world's [[TOP500|fastest supercomputers]].&lt;ref&gt;{{cite web |title = HPL – A Portable Implementation of the High-Performance Linpack Benchmark for Distributed-Memory Computers |accessdate = 2015-02-21 |url = http://www.netlib.org/benchmark/hpl |url-status=live |archiveurl = https://web.archive.org/web/20150215031500/http://www.netlib.org/benchmark/hpl/ |archivedate = 15 February 2015 |df = dmy-all }}&lt;/ref&gt;

Another early programming language was devised by [[Grace Hopper]] in the US, called [[FLOW-MATIC]]. It was developed for the [[UNIVAC I]] at [[Remington Rand]] during the period from 1955 until 1959. Hopper found that business data processing customers were uncomfortable with mathematical notation, and in early 1955, she and her team wrote a specification for an [[English language|English]] programming language and implemented a prototype.&lt;ref&gt;Hopper (1978) p.&amp;nbsp;16.&lt;/ref&gt; The FLOW-MATIC compiler became publicly available in early 1958 and was substantially complete in 1959.&lt;ref&gt;Sammet (1969) p.&amp;nbsp;316&lt;/ref&gt; FLOW-MATIC was a major influence in the design of [[COBOL]], since only it and its direct descendant [[AIMACO]] were in actual use at the time.&lt;ref&gt;Sammet (1978) p.&amp;nbsp;204.&lt;/ref&gt;

===Refinement===
The increased use of high-level languages introduced a requirement for ''[[low-level programming language]]s'' or ''[[system programming language]]s''. These languages, to varying degrees, provide facilities between assembly languages and high-level languages. They can be used to perform tasks which require direct access to hardware facilities but still provide higher-level control structures and error-checking.
   
The period from the 1960s to the late 1970s brought the development of the major language paradigms now in use:
* [[APL (programming language)|APL]] introduced ''[[array programming]]'' and influenced [[functional programming]].&lt;ref&gt;Richard L. Wexelblat: ''History of Programming Languages'', Academic Press, 1981, chapter XIV.&lt;/ref&gt;
* [[ALGOL]] refined both ''structured procedural programming'' and the discipline of [[programming language specification|language specification]]; the "Revised Report on the Algorithmic Language [[ALGOL 60]]" became a model for how later language specifications were written.
* [[Lisp (programming language)|Lisp]], implemented in 1958, was the first dynamically typed ''[[functional programming]]'' language.
* In the 1960s, [[Simula]] was the first language designed to support ''[[object-oriented programming]]''; in the mid-1970s, [[Smalltalk]] followed with the first "purely" object-oriented language.
* [[C (programming language)|C]] was developed between 1969 and 1973 as a system programming language for the [[Unix]] operating system and remains popular.&lt;ref&gt;{{cite web|url=http://www.cs.berkeley.edu/~flab/languages.html|author=François Labelle|title=Programming Language Usage Graph|work=[[SourceForge]]|accessdate=21 June 2006|url-status=live|archiveurl=https://web.archive.org/web/20060617055109/http://www.cs.berkeley.edu/%7Eflab/languages.html|archivedate=17 June 2006|df=dmy-all}}. This comparison analyzes trends in number of projects hosted by a popular community programming repository. During most years of the comparison, C leads by a considerable margin; in 2006, Java overtakes C, but the combination of C/C++ still leads considerably.&lt;/ref&gt;
* [[Prolog]], designed in 1972, was the first ''[[logic programming]]'' language.
* In 1978, [[ML (programming language)|ML]] built a polymorphic type system on top of [[Lisp (programming language)|Lisp]], pioneering ''[[Type system|statically typed]] [[functional programming]]'' languages.
Each of these languages spawned descendants, and most modern programming languages count at least one of them in their ancestry.

The 1960s and 1970s also saw considerable debate over the merits of ''[[structured programming]]'', and whether programming languages should be designed to support it.&lt;ref&gt;{{cite journal|title=The Semicolon Wars|journal=American Scientist|first1=Brian|last1=Hayes|volume=94|issue=4|year=2006|pages=299–303|doi=10.1511/2006.60.299}}&lt;/ref&gt; [[Edsger W. Dijkstra|Edsger Dijkstra]], in a famous 1968 letter published in the [[Communications of the ACM]], argued that [[Goto|GOTO]] statements should be eliminated from all "higher level" programming languages.&lt;ref&gt;{{cite journal|last=Dijkstra|first=Edsger W.|authorlink=Edsger Dijkstra|title=Go To Statement Considered Harmful|journal=Communications of the ACM|volume=11|issue=3|date=March 1968|pages=147–148|url=http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF|accessdate=2014-05-22|doi=10.1145/362929.362947|url-status=live|archiveurl=https://web.archive.org/web/20140513014557/http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF|archivedate=13 May 2014|df=dmy-all}}&lt;/ref&gt;

===Consolidation and growth===
[[File:Bangalore India Tech books for sale IMG 5261.jpg|thumb|240px|right|A selection of textbooks that teach programming, in languages both popular and obscure. These are only a few of the thousands of programming languages and dialects that have been designed in history.]]

The 1980s were years of relative consolidation. [[C++]] combined object-oriented and systems programming. The United States government standardized [[Ada (programming language)|Ada]], a systems programming language derived from [[Pascal (programming language)|Pascal]] and intended for use by defense contractors. In Japan and elsewhere, vast sums were spent investigating so-called [[Fifth-generation programming language|"fifth-generation" languages]] that incorporated logic programming constructs.&lt;ref&gt;Tetsuro Fujise, Takashi Chikayama, Kazuaki Rokusawa, Akihiko Nakase (December 1994). "KLIC: A Portable Implementation of KL1" ''Proc. of FGCS '94, ICOT'' Tokyo, December 1994. {{cite web |url=http://www.icot.or.jp/ARCHIVE/HomePage-E.html |title=Archived copy |accessdate=2006-10-09 |url-status=dead |archiveurl=https://web.archive.org/web/20060925132105/http://www.icot.or.jp/ARCHIVE/HomePage-E.html |archivedate=25 September 2006 |df=dmy-all }} KLIC is a portable implementation of a concurrent logic programming language [[KL1]].&lt;/ref&gt; The functional languages community moved to standardize [[ML (programming language)|ML]] and Lisp. Rather than inventing new paradigms, all of these movements elaborated upon the ideas invented in the previous decades.

One important trend in language design for programming large-scale systems during the 1980s was an increased focus on the use of ''modules'' or large-scale organizational units of code. [[Modula-2]], Ada, and ML all developed notable module systems in the 1980s, which were often wedded to [[generic programming]] constructs.&lt;ref&gt;{{cite web|author=Jim Bender|url=http://readscheme.org/modules/|title=Mini-Bibliography on Modules for Functional Programming Languages|work=ReadScheme.org|accessdate=27 September 2006|date=15 March 2004|url-status=live|archiveurl=https://web.archive.org/web/20060924085057/http://readscheme.org/modules/|archivedate=24 September 2006|df=dmy-all}}&lt;/ref&gt;

The rapid growth of the [[Internet]] in the mid-1990s created opportunities for new languages. [[Perl]], originally a Unix scripting tool first released in 1987, became common in dynamic [[website]]s. [[Java (programming language)|Java]] came to be used for server-side programming, and bytecode virtual machines became popular again in commercial settings with their promise of "[[Write once, run anywhere]]" ([[UCSD Pascal]] had been popular for a time in the early 1980s). These developments were not fundamentally novel; rather, they were refinements of many existing languages and paradigms (although their syntax was often based on the C family of programming languages).

Programming language evolution continues, in both industry and research. Current directions include security and reliability verification, new kinds of modularity ([[mixin]]s, [[Delegation (programming)|delegates]], [[aspect-oriented programming|aspects]]), and database integration such as Microsoft's [[Language Integrated Query|LINQ]].

''[[Fourth-generation programming language]]s'' (4GL) are computer programming languages which aim to provide a higher level of abstraction of the internal computer hardware details than 3GLs. ''[[Fifth-generation programming language]]s'' (5GL) are programming languages based on solving problems using constraints given to the program, rather than using an [[algorithm]] written by a programmer.

==Elements==
All programming languages have some [[language primitive|primitive]] building blocks for the description of data and the processes or transformations applied to them (like the addition of two numbers or the selection of an item from a collection). These primitives are defined by syntactic and semantic rules which describe their structure and meaning respectively.

===Syntax===
{{Main|Syntax (programming languages)}}
[[File:Python add5 parse.png|thumb|367px|[[Parse tree]] of [[Python (programming language)|Python code]] with inset tokenization]]
[[File:Python add5 syntax.svg|thumb|292px|[[Syntax highlighting]] is often used to aid programmers in recognizing elements of source code. The language above is [[Python (programming language)|Python]].]]
A programming language's surface form is known as its [[syntax (programming languages)|syntax]]. Most programming languages are purely textual; they use sequences of text including words, numbers, and punctuation, much like written natural languages. On the other hand, there are some programming languages which are more [[visual programming language|graphical]] in nature, using visual relationships between symbols to specify a program.

The syntax of a language describes the possible combinations of symbols that form a syntactically correct program. The meaning given to a combination of symbols is handled by semantics (either [[Formal semantics of programming languages|formal]] or hard-coded in a [[Reference implementation (computing)|reference implementation]]). Since most languages are textual, this article discusses textual syntax.

Programming language syntax is usually defined using a combination of [[regular expression]]s (for [[lexical analysis|lexical]] structure) and [[Backus–Naur form]] (for [[context-free grammar|grammatical]] structure). Below is a simple grammar, based on [[Lisp (programming language)|Lisp]]:
&lt;syntaxhighlight lang="bnf"&gt;
expression ::= atom | list
atom       ::= number | symbol
number     ::= [+-]?['0'-'9']+
symbol     ::= ['A'-'Z''a'-'z'].*
list       ::= '(' expression* ')'
&lt;/syntaxhighlight&gt;

This grammar specifies the following:
* an ''expression'' is either an ''atom'' or a ''list'';
* an ''atom'' is either a ''number'' or a ''symbol'';
* a ''number'' is an unbroken sequence of one or more decimal digits, optionally preceded by a plus or minus sign;
* a ''symbol'' is a letter followed by zero or more of any characters (excluding whitespace); and
* a ''list'' is a matched pair of parentheses, with zero or more ''expressions'' inside it.

The following are examples of well-formed token sequences in this grammar: &lt;code&gt;12345&lt;/code&gt;, &lt;code&gt;()&lt;/code&gt; and &lt;code&gt;(a b c232 (1))&lt;/code&gt;.

Not all syntactically correct programs are semantically correct. Many syntactically correct programs are nonetheless ill-formed, per the language's rules; and may (depending on the language specification and the soundness of the implementation) result in an error on translation or execution. In some cases, such programs may exhibit [[undefined behavior]]. Even when a program is well-defined within a language, it may still have a meaning that is not intended by the person who wrote it.

Using [[natural language]] as an example, it may not be possible to assign a meaning to a grammatically correct sentence or the sentence may be false:
* "[[Colorless green ideas sleep furiously]]." is grammatically well-formed but has no generally accepted meaning.
* "John is a married bachelor." is grammatically [[well-formedness|well-formed]] but expresses a meaning that cannot be true.

The following [[C (programming language)|C language]] fragment is syntactically correct, but performs operations that are not semantically defined (the operation &lt;code&gt;*p &gt;&gt; 4&lt;/code&gt; has no meaning for a value having a complex type and &lt;code&gt;p-&gt;im&lt;/code&gt; is not defined because the value of &lt;code&gt;p&lt;/code&gt; is the [[null pointer]]):

&lt;syntaxhighlight lang="c"&gt;
complex *p = NULL;
complex abs_p = sqrt(*p &gt;&gt; 4 + p-&gt;im);
&lt;/syntaxhighlight&gt;

If the [[type declaration]] on the first line were omitted, the program would trigger an error on undefined variable "p" during compilation. However, the program would still be syntactically correct since type declarations provide only semantic information.

The grammar needed to specify a programming language can be classified by its position in the [[Chomsky hierarchy]]. The syntax of most programming languages can be specified using a Type-2 grammar, i.e., they are [[context-free grammar]]s.&lt;ref&gt;{{cite book|author=Michael Sipser|year=1996|title=Introduction to the Theory of Computation|publisher=PWS Publishing|isbn=978-0-534-94728-6 |authorlink=Michael Sipser|title-link=Introduction to the Theory of Computation}} Section 2.2: Pushdown Automata, pp.101–114.&lt;/ref&gt; Some languages, including Perl and Lisp, contain constructs that allow execution during the parsing phase. Languages that have constructs that allow the programmer to alter the behavior of the parser make syntax analysis an [[undecidable problem]], and generally blur the distinction between parsing and execution.&lt;ref&gt;Jeffrey Kegler, "[http://www.jeffreykegler.com/Home/perl-and-undecidability Perl and Undecidability] {{webarchive|url=https://web.archive.org/web/20090817183115/http://www.jeffreykegler.com/Home/perl-and-undecidability |date=17 August 2009 }}", ''The Perl Review''. Papers 2 and 3 prove, using respectively [[Rice's theorem]] and direct reduction to the [[halting problem]], that the parsing of Perl programs is in general undecidable.&lt;/ref&gt; In contrast to [[Lisp macro|Lisp's macro system]] and Perl's &lt;code&gt;BEGIN&lt;/code&gt; blocks, which may contain general computations, C macros are merely string replacements and do not require code execution.&lt;ref&gt;Marty Hall, 1995, [http://www.apl.jhu.edu/~hall/Lisp-Notes/Macros.html Lecture Notes: Macros] {{webarchive|url=https://web.archive.org/web/20130806054148/http://www.apl.jhu.edu/~hall/Lisp-Notes/Macros.html |date=6 August 2013 }}, [[PostScript]] [http://www.apl.jhu.edu/~hall/Lisp-Notes/Macros.ps version] {{webarchive|url=https://web.archive.org/web/20000817211709/http://www.apl.jhu.edu/~hall/Lisp-Notes/Macros.ps |date=17 August 2000 }}&lt;/ref&gt;

===Semantics===
The term [[Semantics#Computer science|''semantics'']] refers to the meaning of languages, as opposed to their form ([[#Syntax|syntax]]).

====Static semantics====
The static semantics defines restrictions on the structure of valid texts that are hard or impossible to express in standard syntactic formalisms.&lt;ref name="Aaby 2004"/&gt; For compiled languages, static semantics essentially include those semantic rules that can be checked at compile time. Examples include checking that every [[identifier]] is declared before it is used (in languages that require such declarations) or that the labels on the arms of a [[case statement]] are distinct.&lt;ref&gt;Michael Lee Scott, ''Programming language pragmatics'', Edition 2, Morgan Kaufmann, 2006, {{ISBN|0-12-633951-1}}, p. 18–19&lt;/ref&gt; Many important restrictions of this type, like checking that identifiers are used in the appropriate context (e.g. not adding an integer to a function name), or that [[subroutine]] calls have the appropriate number and type of arguments, can be enforced by defining them as rules in a [[logic]] called a [[type system]]. Other forms of [[static code analysis|static analyses]] like [[data flow analysis]] may also be part of static semantics. Newer programming languages like [[Java (programming language)|Java]] and [[C Sharp (programming language)|C#]] have [[definite assignment analysis]], a form of data flow analysis, as part of their static semantics.

====Dynamic semantics====
{{main|Semantics of programming languages}}
Once data has been specified, the machine must be instructed to perform operations on the data. For example, the semantics may define the [[evaluation strategy|strategy]] by which expressions are evaluated to values, or the manner in which [[control flow|control structures]] conditionally execute [[Statement (computer science)|statements]]. The ''dynamic semantics'' (also known as ''execution semantics'') of a language defines how and when the various constructs of a language should produce a program behavior. There are many ways of defining execution semantics. Natural language is often used to specify the execution semantics of languages commonly used in practice. A significant amount of academic research went into [[formal semantics of programming languages]], which allow execution semantics to be specified in a formal manner. Results from this field of research have seen limited application to programming language design and implementation outside academia.

===Type system===
{{Main|Data type|Type system|Type safety}}

A type system defines how a programming language classifies values and expressions into ''types'', how it can manipulate those types and how they interact. The goal of a type system is to verify and usually enforce a certain level of correctness in programs written in that language by detecting certain incorrect operations. Any [[Decidability (logic)|decidable]] type system involves a trade-off: while it rejects many incorrect programs, it can also prohibit some correct, albeit unusual programs. In order to bypass this downside, a number of languages have ''type loopholes'', usually unchecked [[Type conversion#Explicit type conversion|casts]] that may be used by the programmer to explicitly allow a normally disallowed operation between different types. In most typed languages, the type system is used only to [[type checking|type check]] programs, but a number of languages, usually functional ones, [[type inference|infer types]], relieving the programmer from the need to write type annotations. The formal design and study of type systems is known as ''[[type theory]]''.

====Typed versus untyped languages====
A language is ''typed'' if the specification of every operation defines types of data to which the operation is applicable.&lt;ref name="typing"&gt;{{cite web|url=http://www.acooke.org/comp-lang.html|author=Andrew Cooke|title=Introduction To Computer Languages|accessdate=13 July 2012|url-status=live|archiveurl=https://web.archive.org/web/20120815140215/http://www.acooke.org/comp-lang.html|archivedate=15 August 2012|df=dmy-all}}&lt;/ref&gt; For example, the data represented by &lt;code&gt;"this text between the quotes"&lt;/code&gt; is a [[String literal|string]], and in many programming languages dividing a number by a string has no meaning and will not be executed. The invalid operation may be detected when the program is compiled ("static" type checking) and will be rejected by the compiler with a compilation error message, or it may be detected while the program is running ("dynamic" type checking), resulting in a run-time [[Exception handling|exception]]. Many languages allow a function called an exception handler to handle this exception and, for example, always return "-1" as the result.

A special case of typed languages are the ''single-typed'' languages. These are often scripting or markup languages, such as [[REXX]] or [[Standard Generalized Markup Language|SGML]], and have only one data type{{dubious|date=March 2018}}–—most commonly character strings which are used for both symbolic and numeric data.

In contrast, an ''untyped language'', such as most [[assembly language]]s, allows any operation to be performed on any data, generally sequences of bits of various lengths.&lt;ref name="typing"/&gt; High-level untyped languages include [[BCPL]], [[Tcl]], and some varieties of [[Forth (programming language)|Forth]].

In practice, while few languages are considered typed from the [[type theory]] (verifying or rejecting all operations), most modern languages offer a degree of typing.&lt;ref name="typing"/&gt; Many production languages provide means to bypass or subvert the type system, trading type-safety for finer control over the program's execution (see [[Type conversion#Explicit type conversion|casting]]).

====Static versus dynamic typing====
In ''[[Type system|static typing]]'', all expressions have their types determined prior to when the program is executed, typically at compile-time. For example, 1 and (2+2) are integer expressions; they cannot be passed to a function that expects a string, or stored in a variable that is defined to hold dates.&lt;ref name="typing"/&gt;

Statically typed languages can be either ''[[Manifest typing|manifestly typed]]'' or ''[[Type inference|type-inferred]]''. In the first case, the programmer must explicitly write types at certain textual positions (for example, at variable [[declaration (computer science)|declarations]]). In the second case, the compiler ''infers'' the types of expressions and declarations based on context. Most mainstream statically typed languages, such as [[C++]], [[C Sharp (programming language)|C#]] and [[Java (programming language)|Java]], are manifestly typed. Complete type inference has traditionally been associated with less mainstream languages, such as [[Haskell (programming language)|Haskell]] and [[ML (programming language)|ML]]. However, many manifestly typed languages support partial type inference; for example, [[C++]], [[Java (programming language)|Java]] and [[C Sharp (programming language)|C#]] all infer types in certain limited cases.&lt;ref&gt;Specifically, instantiations of [[generic programming|generic]] types are inferred for certain expression forms. Type inference in Generic Java—the research language that provided the basis for Java 1.5's bounded [[polymorphism in object-oriented programming|parametric polymorphism]] extensions—is discussed in two informal manuscripts from the Types mailing list: [http://www.seas.upenn.edu/~sweirich/types/archive/1999-2003/msg00849.html Generic Java type inference is unsound] {{webarchive|url=https://web.archive.org/web/20070129073839/http://www.seas.upenn.edu/~sweirich/types/archive/1999-2003/msg00849.html |date=29 January 2007 }} ([[Alan Jeffrey]], 17 December 2001) and [http://www.seas.upenn.edu/~sweirich/types/archive/1999-2003/msg00921.html Sound Generic Java type inference] {{webarchive|url=https://web.archive.org/web/20070129073849/http://www.seas.upenn.edu/~sweirich/types/archive/1999-2003/msg00921.html |date=29 January 2007 }} ([[Martin Odersky]], 15 January 2002). C#'s type system is similar to Java's, and uses a similar partial type inference scheme.&lt;/ref&gt; Additionally, some programming languages allow for some types to be automatically converted to other types; for example, an int can be used where the program expects a float.

''[[Type system|Dynamic typing]]'', also called ''latent typing'', determines the type-safety of operations at run time; in other words, types are associated with ''run-time values'' rather than ''textual expressions''.&lt;ref name="typing"/&gt; As with type-inferred languages, dynamically typed languages do not require the programmer to write explicit type annotations on expressions. Among other things, this may permit a single variable to refer to values of different types at different points in the program execution. However, type [[Software bug|errors]] cannot be automatically detected until a piece of code is actually executed, potentially making [[debugging]] more difficult. [[Lisp (programming language)|Lisp]], [[Smalltalk]], [[Perl]], [[Python (programming language)|Python]], [[JavaScript]], and [[Ruby (programming language)|Ruby]] are all examples of dynamically typed languages.

====Weak and strong typing====
''[[Weak typing]]'' allows a value of one type to be treated as another, for example treating a [[String (computer science)|string]] as a number.&lt;ref name="typing"/&gt; This can occasionally be useful, but it can also allow some kinds of program faults to go undetected at [[compile time]] and even at [[Run time (program lifecycle phase)|run time]].

''[[Strongly typed programming language|Strong typing]]'' prevents these program faults. An attempt to perform an operation on the wrong type of value raises an error.&lt;ref name="typing"/&gt; Strongly typed languages are often termed ''type-safe'' or ''[[type safety|safe]]''.

An alternative definition for "weakly typed" refers to languages, such as [[Perl]] and [[JavaScript]], which permit a large number of implicit type conversions. In JavaScript, for example, the expression &lt;code&gt;2 * x&lt;/code&gt; implicitly converts &lt;code&gt;x&lt;/code&gt; to a number, and this conversion succeeds even if &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, an &lt;code&gt;Array&lt;/code&gt;, or a string of letters. Such implicit conversions are often useful, but they can mask programming errors.
''Strong'' and ''static'' are now generally considered orthogonal concepts, but usage in the literature differs. Some use the term ''strongly typed'' to mean ''strongly, statically typed'', or, even more confusingly, to mean simply ''statically typed''. Thus [[C (programming language)|C]] has been called both strongly typed and weakly, statically typed.&lt;ref&gt;{{cite web|url=http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-4.html|title=Revised Report on the Algorithmic Language Scheme|date=20 February 1998|accessdate=9 June 2006|url-status=live|archiveurl=https://web.archive.org/web/20060714212928/http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-4.html|archivedate=14 July 2006|df=dmy-all}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://citeseer.ist.psu.edu/cardelli85understanding.html|title=On Understanding Types, Data Abstraction, and Polymorphism|author=[[Luca Cardelli]] and [[Peter Wegner]]|work=Manuscript (1985)|accessdate=9 June 2006|url-status=live|archiveurl=https://web.archive.org/web/20060619072646/http://citeseer.ist.psu.edu/cardelli85understanding.html|archivedate=19 June 2006|df=dmy-all}}&lt;/ref&gt;

It may seem odd to some professional programmers that C could be "weakly, statically typed". However, notice that the use of the generic pointer, the '''void*''' pointer, does allow for casting of pointers to other pointers without needing to do an explicit cast. This is extremely similar to somehow casting an array of bytes to any kind of datatype in C without using an explicit cast, such as &lt;code&gt;(int)&lt;/code&gt; or &lt;code&gt;(char)&lt;/code&gt;.

===Standard library and run-time system===
{{main|Standard library}}

Most programming languages have an associated core [[Library (computing)|library]] (sometimes known as the 'standard library', especially if it is included as part of the published language standard), which is conventionally made available by all implementations of the language. Core libraries typically include definitions for commonly used algorithms, data structures, and mechanisms for input and output.

The line between a language and its core library differs from language to language. In some cases, the language designers may treat the library as a separate entity from the language. However, a language's core library is often treated as part of the language by its users, and some language specifications even require that this library be made available in all implementations. Indeed, some languages are designed so that the meanings of certain syntactic constructs cannot even be described without referring to the core library. For example, in [[Java (programming language)|Java]], a string literal is defined as an instance of the &lt;code&gt;java.lang.String&lt;/code&gt; class; similarly, in [[Smalltalk]], an [[anonymous function]] expression (a "block") constructs an instance of the library's &lt;code&gt;BlockContext&lt;/code&gt; class. Conversely, [[Scheme (programming language)|Scheme]] contains multiple coherent subsets that suffice to construct the rest of the language as library macros, and so the language designers do not even bother to say which portions of the language must be implemented as language constructs, and which must be implemented as parts of a library.

==Design and implementation==
Programming languages share properties with natural languages related to their purpose as vehicles for communication, having a syntactic form separate from its semantics, and showing ''language families'' of related languages branching one from another.&lt;ref name="Fischer"&gt;Steven R. Fischer, ''A history of language'', Reaktion Books, 2003, {{ISBN|1-86189-080-X}}, p. 205&lt;/ref&gt;&lt;ref name="levenez"&gt;{{cite web|author=Éric Lévénez|title=Computer Languages History|year=2011|url=http://www.levenez.com/lang/|url-status=live|archiveurl=https://web.archive.org/web/20060107162045/http://www.levenez.com/lang/|archivedate=7 January 2006|df=dmy-all}}&lt;/ref&gt; But as artificial constructs, they also differ in fundamental ways from languages that have evolved through usage. A significant difference is that a programming language can be fully described and studied in its entirety, since it has a precise and finite definition.&lt;ref&gt;{{cite web|url=http://www.cs.cornell.edu/info/Projects/Nuprl/cs611/fall94notes/cn2/subsection3_1_3.html|author=Jing Huang|title=Artificial Language vs. Natural Language|url-status=live|archiveurl=https://web.archive.org/web/20090903084542/http://www.cs.cornell.edu/info/Projects/Nuprl/cs611/fall94notes/cn2/subsection3_1_3.html|archivedate=3 September 2009|df=dmy-all}}&lt;/ref&gt; By contrast, natural languages have changing meanings given by their users in different communities. While [[constructed languages]] are also artificial languages designed from the ground up with a specific purpose, they lack the precise and complete semantic definition that a programming language has.

Many programming languages have been designed from scratch, altered to meet new needs, and combined with other languages. Many have eventually fallen into disuse. Although there have been attempts to design one "universal" programming language that serves all purposes, all of them have failed to be generally accepted as filling this role.&lt;ref&gt;IBM in first publishing PL/I, for example, rather ambitiously titled its manual ''The universal programming language PL/I'' (IBM Library; 1966). The title reflected IBM's goals for unlimited subsetting capability: "PL/I is designed in such a way that one can isolate subsets from it satisfying the requirements of particular applications." ({{cite web|url=http://www.encyclopediaofmath.org/index.php?title=PL/I&amp;oldid=19175|title=PL/I|work=Encyclopedia of Mathematics|accessdate=29 June 2006|url-status=live|archiveurl=https://web.archive.org/web/20120426010947/http://www.encyclopediaofmath.org/index.php?title=PL%2FI&amp;oldid=19175|archivedate=26 April 2012|df=dmy-all}}). [[Ada (programming language)|Ada]] and [[UNCOL]] had similar early goals.&lt;/ref&gt; The need for diverse programming languages arises from the diversity of contexts in which languages are used:
* Programs range from tiny scripts written by individual hobbyists to huge systems written by hundreds of [[programmer]]s.
* Programmers range in expertise from novices who need simplicity above all else, to experts who may be comfortable with considerable complexity.
* Programs must balance speed, size, and simplicity on systems ranging from [[microcontroller]]s to [[supercomputer]]s.
* Programs may be written once and not change for generations, or they may undergo continual modification.
* Programmers may simply differ in their tastes: they may be accustomed to discussing problems and expressing them in a particular language.

One common trend in the development of programming languages has been to add more ability to solve problems using a higher level of [[Abstraction (computer science)|abstraction]]. The earliest programming languages were tied very closely to the underlying hardware of the computer. As new programming languages have developed, features have been added that let programmers express ideas that are more remote from simple translation into underlying hardware instructions. Because programmers are less tied to the complexity of the computer, their programs can do more computing with less effort from the programmer. This lets them write more functionality per time unit.&lt;ref&gt;Frederick P. Brooks, Jr.: ''The Mythical Man-Month'', Addison-Wesley, 1982, pp. 93–94&lt;/ref&gt;

{{anchor|English-like programming languages}}
[[Natural language programming]] has been proposed as a way to eliminate the need for a specialized language for programming. However, this goal remains distant and its benefits are open to debate. [[Edsger W. Dijkstra]] took the position that the use of a formal language is essential to prevent the introduction of meaningless constructs, and dismissed [[natural language programming]] as "foolish".&lt;ref&gt;Dijkstra, Edsger W. [http://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD667.html On the foolishness of "natural language programming."] {{webarchive|url=https://web.archive.org/web/20080120201526/http://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD667.html |date=20 January 2008 }} EWD667.&lt;/ref&gt; [[Alan Perlis]] was similarly dismissive of the idea.&lt;ref&gt;{{cite web|last=Perlis|first=Alan|url=http://www-pu.informatik.uni-tuebingen.de/users/klaeren/epigrams.html|title=Epigrams on Programming|work=SIGPLAN Notices Vol. 17, No. 9|date=September 1982|pages=7–13|url-status=live|archiveurl=https://web.archive.org/web/19990117034445/http://www-pu.informatik.uni-tuebingen.de/users/klaeren/epigrams.html|archivedate=17 January 1999|df=dmy-all}}&lt;/ref&gt; Hybrid approaches have been taken in [[Structured English]] and [[SQL]].

A language's designers and users must construct a number of artifacts that govern and enable the practice of programming. The most important of these artifacts are the language ''specification'' and ''implementation''.

===Specification===
{{Main|Programming language specification}}

The specification of a programming language is an artifact that the language [[programmer|users]] and the [[programming language implementation|implementors]] can use to agree upon whether a piece of [[source code]] is a valid [[computer program|program]] in that language, and if so what its behavior shall be.

A programming language specification can take several forms, including the following:
* An explicit definition of the syntax, static semantics, and execution semantics of the language. While syntax is commonly specified using a formal grammar, semantic definitions may be written in [[natural language]] (e.g., as in the [[C (programming language)|C language]]), or a [[formal semantics of programming languages|formal semantics]] (e.g., as in [[Standard ML]]&lt;ref&gt;{{cite book|last=Milner|first=R.|authorlink=Robin Milner |author2=[[Mads Tofte|M. Tofte]] |author3=[[Robert Harper (computer scientist)|R. Harper]] |author4=D. MacQueen |title=The Definition of Standard ML (Revised)|publisher=MIT Press|year=1997|isbn=978-0-262-63181-5}}&lt;/ref&gt; and [[Scheme (programming language)|Scheme]]&lt;ref&gt;{{cite web|first=Richard|last=Kelsey|author2=William Clinger|author3=Jonathan Rees|title=Section 7.2 Formal semantics|work=Revised&lt;sup&gt;5&lt;/sup&gt; Report on the Algorithmic Language Scheme|url=http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-10.html#%_sec_7.2|date=February 1998|accessdate=9 June 2006|url-status=live|archiveurl=https://web.archive.org/web/20060706081110/http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-10.html#%_sec_7.2|archivedate=6 July 2006|df=dmy-all}}&lt;/ref&gt; specifications).
* A description of the behavior of a [[compiler|translator]] for the language (e.g., the [[C++]] and [[Fortran]] specifications). The syntax and semantics of the language have to be inferred from this description, which may be written in natural or a formal language.
* A [[reference implementation|''reference'' or ''model'' implementation]], sometimes [[Meta-circular evaluator|written in the language being specified]] (e.g., [[Prolog]] or [[REXX|ANSI REXX]]&lt;ref&gt;[[American National Standards Institute|ANSI]] – Programming Language Rexx, X3-274.1996&lt;/ref&gt;). The syntax and semantics of the language are explicit in the behavior of the reference implementation.

===Implementation===
{{Main|Programming language implementation}}

An ''implementation'' of a programming language provides a way to write programs in that language and execute them on one or more configurations of hardware and software. There are, broadly, two approaches to programming language implementation: ''[[compiler|compilation]]'' and ''[[interpreter (computing)|interpretation]]''. It is generally possible to implement a language using either technique.

The output of a [[compiler]] may be executed by hardware or a program called an interpreter. In some implementations that make use of the interpreter approach there is no distinct boundary between compiling and interpreting. For instance, some implementations of [[BASIC]] compile and then execute the source a line at a time.

Programs that are executed directly on the hardware usually run much faster than those that are interpreted in software.&lt;ref&gt;{{Cite book|title=Code complete|last=Steve|first=McConnell|isbn=0735619670|edition=Second|location=Redmond, Washington|oclc=54974573|pages=[https://archive.org/details/codecomplete0000mcco/page/590 590, 600]|url=https://archive.org/details/codecomplete0000mcco/page/590}}&lt;/ref&gt;{{better source|date=March 2019}}

One technique for improving the performance of interpreted programs is [[just-in-time compilation]]. Here the [[virtual machine]], just before execution, translates the blocks of [[bytecode]] which are going to be used to machine code, for direct execution on the hardware.

==Proprietary languages==
{{Unreferenced section|date=July 2015}}

Although most of the most commonly used programming languages have fully open specifications and implementations, many programming languages exist only as proprietary programming languages with the implementation available only from a single vendor, which may claim that such a proprietary language is their intellectual property. Proprietary programming languages are commonly [[domain specific language]]s or internal [[scripting language]]s for a single product; some proprietary languages are used only internally within a vendor, while others are available to external users.

Some programming languages exist on the border between proprietary and open; for example, [[Oracle Corporation]] asserts proprietary rights to some aspects of the [[Java programming language]],&lt;ref&gt;See: [[Oracle America, Inc. v. Google, Inc.]]&lt;/ref&gt; and [[Microsoft]]'s [[C Sharp (programming language)|C#]] programming language, which has open implementations of most parts of the system, also has [[Common Language Runtime]] (CLR) as a closed environment.&lt;ref&gt;{{Cite news|url=https://www.computerscience.org/resources/computer-programming-languages/|title=Guide to Programming Languages {{!}} ComputerScience.org|work=ComputerScience.org|access-date=2018-05-13|language=en-US}}&lt;/ref&gt;

Many proprietary languages are widely used, in spite of their proprietary nature; examples include [[MATLAB]], [[VBScript]], and [[Wolfram Language]].  Some languages may make the transition from closed to open; for example, [[Erlang (programming language)|Erlang]] was originally an Ericsson's internal programming language.&lt;ref&gt;{{Cite web|url=https://www.ibm.com/developerworks/library/os-erlang1/index.html|title=The basics|date=2011-05-10|website=www.ibm.com|language=en|access-date=2018-05-13}}&lt;/ref&gt;

==Use==
Thousands of different programming languages have been created, mainly in the computing field.&lt;ref&gt;{{cite web|accessdate=1 June 2009|url=http://hopl.murdoch.edu.au/|title=HOPL: an interactive Roster of Programming Languages|publisher=[[Murdoch University]]|location=Australia|quote=This site lists 8512 languages.|url-status=dead|archiveurl=https://web.archive.org/web/20110220044217/http://hopl.murdoch.edu.au/|archivedate=20 February 2011|df=dmy-all}}&lt;/ref&gt;
Individual software projects commonly use five programming languages or more.&lt;ref&gt;{{cite conference|first1=Philip|conference=Proceedings of the 19th International Conference on Evaluation and Assessment in Software Engineering – EASE '15|last1=Mayer|first2=Alexander|last2=Bauer|publisher=ACM|date=2015|location=New York, NY, USA|isbn=978-1-4503-3350-4|pages=4:1–4:10|doi=10.1145/2745802.2745805|quote=Results: We found (a) a mean number of 5 languages per project with a clearly dominant main general-purpose language and 5 often-used DSL types, (b) a significant influence of the size, number of commits, and the main language on the number of languages as well as no significant influence of age and number of contributors, and (c) three language ecosystems grouped around XML, Shell/Make, and HTML/CSS. Conclusions: Multi-language programming seems to be common in open-source projects and is a factor which must be dealt with in tooling and when assessing development and maintenance of such software systems.|title=An empirical analysis of the utilization of multiple programming languages in open source projects|doi-access=free}}&lt;/ref&gt;

Programming languages differ from most other forms of human expression in that they require a greater degree of precision and completeness. When using a natural language to communicate with other people, human authors and speakers can be ambiguous and make small errors, and still expect their intent to be understood. However, figuratively speaking, computers "do exactly what they are told to do", and cannot "understand" what code the programmer intended to write. The combination of the language definition, a program, and the program's inputs must fully specify the external behavior that occurs when the program is executed, within the domain of control of that program. On the other hand, ideas about an algorithm can be communicated to humans without the precision required for execution by using [[pseudocode]], which interleaves natural language with code written in a programming language.

A programming language provides a structured mechanism for defining pieces of data, and the operations or transformations that may be carried out automatically on that data. A [[programmer]] uses the [[Abstraction (computer science)|abstractions]] present in the language to represent the concepts involved in a computation. These concepts are represented as a collection of the simplest elements available (called [[language primitive|primitives]]).&lt;ref&gt;{{cite web|url=http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html|title=Structure and Interpretation of Computer Programs|author=Abelson, Sussman, and Sussman|accessdate=3 March 2009|url-status=dead|archiveurl=https://web.archive.org/web/20090226050622/http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html|archivedate=26 February 2009|df=dmy-all}}&lt;/ref&gt; ''[[Computer Programming|Programming]]'' is the process by which programmers combine these primitives to compose new programs, or adapt existing ones to new uses or a changing environment.

Programs for a computer might be [[Execution (computing)|executed]] in a [[Batch processing|batch process]] without human interaction, or a user might type [[Command (computing)|commands]] in an [[Session (computer science)|interactive session]] of an [[Interpreter (computing)|interpreter]]. In this case the "commands" are simply programs, whose execution is chained together. When a language can run its commands through an interpreter (such as a [[Unix shell]] or other [[command-line interface]]), without compiling, it is called a [[scripting language]].&lt;ref&gt;{{cite web
 |url         = http://www.mactech.com/articles/mactech/Vol.15/15.09/ScriptingLanguages/index.html
 |title       = Scripting Languages
 |year        = 1999
 |accessdate  = November 17, 2014
 |author      = Brown Vicki
 |website     = mactech.com
 |url-status     = live
 |archiveurl  = https://web.archive.org/web/20171202235828/http://www.mactech.com/articles/mactech/Vol.15/15.09/ScriptingLanguages/index.html
 |archivedate = 2 December 2017
 |df          = dmy-all
}}&lt;/ref&gt;

===Measuring language usage===
{{Main|Measuring programming language popularity}}

Determining which is the most widely used programming language is difficult since the definition of usage varies by context. One language may occupy the greater number of programmer hours, a different one has more lines of code, and a third may consume the most CPU time. Some languages are very popular for particular kinds of applications. For example, [[COBOL]] is still strong in the corporate data center, often on large [[Mainframe computer|mainframes]];&lt;ref&gt;{{cite web
 |url         = http://www.computerworld.com.au/article/319269/cobol_turns_50/
 |title       = COBOL turns 50
 |date        = 2009-09-21
 |accessdate  = 2013-10-19
 |author      = Georgina Swan
 |publisher   = computerworld.com.au
 |url-status     = live
 |archiveurl  = https://web.archive.org/web/20131019181128/http://www.computerworld.com.au/article/319269/cobol_turns_50/
 |archivedate = 19 October 2013
 |df          = dmy-all
}}&lt;/ref&gt;&lt;ref&gt;{{cite web
 |url         = http://www.developer.com/lang/other/7-myths-of-cobol-debunked.html
 |title       = 7 Myths of COBOL Debunked
 |date        = 2012-05-03
 |accessdate  = 2013-10-19
 |author      = Ed Airey
 |publisher   = developer.com
 |url-status     = live
 |archiveurl  = https://web.archive.org/web/20131019171802/http://www.developer.com/lang/other/7-myths-of-cobol-debunked.html
 |archivedate = 19 October 2013
 |df          = dmy-all
}}&lt;/ref&gt; [[Fortran]] in scientific and engineering applications; [[Ada (programming language)|Ada]] in aerospace, transportation, military, real-time and embedded applications; and [[C (programming language)|C]] in embedded applications and operating systems. Other languages are regularly used to write many different kinds of applications.

Various methods of measuring language popularity, each subject to a different bias over what is measured, have been proposed:
* counting the number of job advertisements that mention the language&lt;ref&gt;{{cite web |author=Nicholas Enticknap |url=http://www.computerweekly.com/Articles/2007/09/11/226631/sslcomputer-weekly-it-salary-survey-finance-boom-drives-it-job.htm |title=SSL/Computer Weekly IT salary survey: finance boom drives IT job growth |publisher=Computerweekly.com |accessdate=2013-06-14 |url-status=live |archiveurl=https://web.archive.org/web/20111026035734/http://www.computerweekly.com/Articles/2007/09/11/226631/SSLComputer-Weekly-IT-salary-survey-finance-boom-drives-IT-job.htm |archivedate=26 October 2011 |df=dmy-all }}&lt;/ref&gt;
* the number of books sold that teach or describe the language&lt;ref&gt;{{cite web|url=http://radar.oreilly.com/archives/2006/08/programming_language_trends_1.html|title=Counting programming languages by book sales|publisher=Radar.oreilly.com|date=2 August 2006|accessdate=3 December 2010|url-status=dead|archiveurl=https://web.archive.org/web/20080517023127/http://radar.oreilly.com/archives/2006/08/programming_language_trends_1.html|archivedate=17 May 2008|df=dmy-all}}&lt;/ref&gt;
* estimates of the number of existing lines of code written in the language{{spaced ndash}} which may underestimate languages not often found in public searches&lt;ref&gt;Bieman, J.M.; Murdock, V., Finding code on the World Wide Web: a preliminary investigation, Proceedings First IEEE International Workshop on Source Code Analysis and Manipulation, 2001&lt;/ref&gt;
* counts of language references (i.e., to the name of the language) found using a web search engine.

Combining and averaging information from various internet sites, stackify.com reported the ten most popular programming languages as (in descending order by overall popularity): [[Java (programming language)|Java]], [[C (programming language)|C]], [[C++]], [[Python (programming language)|Python]], [[C Sharp (programming language)|C#]], [[JavaScript]], [[Visual Basic .NET|VB .NET]], [[R (programming language)|R]], [[PHP]], and [[MATLAB]].&lt;ref&gt;{{cite web |url=https://stackify.com/popular-programming-languages-2018/ |title=Most Popular and Influential Programming Languages of 2018 |publisher=stackify.com |date=2017-12-18 |accessdate=2018-08-29}}&lt;/ref&gt;

==Dialects, flavors and implementations==
A '''dialect''' of a programming language or a [[data exchange language]] is a (relatively small) variation or extension of the language that does not change its intrinsic nature. With languages such as [[Scheme (programming language)|Scheme]] and [[Forth (programming language)|Forth]], standards may be considered insufficient, inadequate or illegitimate by implementors, so often they will deviate from the standard, making a new [[dialect]]. In other cases, a dialect is created for use in a [[domain-specific language]], often a subset. In the [[Common Lisp|Lisp]] world, most languages that use basic [[S-expression]] syntax and Lisp-like semantics are considered Lisp dialects, although they vary wildly, as do, say, [[Racket (programming language)|Racket]] and [[Clojure]]. As it is common for one language to have several dialects, it can become quite difficult for an inexperienced programmer to find the right documentation. The [[BASIC programming language]] has [[List of BASIC dialects|many dialects]].

The explosion of Forth dialects led to the saying "If you've seen one Forth... you've seen ''one'' Forth."

==Taxonomies==
{{details|Categorical list of programming languages}}
There is no overarching classification scheme for programming languages. A given programming language does not usually have a single ancestor language. Languages commonly arise by combining the elements of several predecessor languages with new ideas in circulation at the time. Ideas that originate in one language will diffuse throughout a family of related languages, and then leap suddenly across familial gaps to appear in an entirely different family.

The task is further complicated by the fact that languages can be classified along multiple axes. For example, Java is both an object-oriented language (because it encourages object-oriented organization) and a concurrent language (because it contains built-in constructs for running multiple [[Thread (computer science)|threads]] in parallel). [[Python (programming language)|Python]] is an object-oriented [[scripting language]].

In broad strokes, programming languages divide into ''[[programming paradigm]]s'' and a classification by ''intended domain of use,'' with [[general-purpose programming language]]s distinguished from [[domain-specific programming language]]s. Traditionally, programming languages have been regarded as describing computation in terms of imperative sentences, i.e. issuing commands. These are generally called [[imperative programming]] languages. A great deal of research in programming languages has been aimed at blurring the distinction between a program as a set of instructions and a program as an assertion about the desired answer, which is the main feature of [[declarative programming]].&lt;ref&gt;Carl A. Gunter, ''Semantics of Programming Languages: Structures and Techniques'', MIT Press, 1992, {{ISBN|0-262-57095-5}}, p. 1&lt;/ref&gt; More refined paradigms include [[procedural programming]], [[object-oriented programming]], [[functional programming]], and [[logic programming]]; some languages are hybrids of paradigms or multi-paradigmatic. An [[assembly language]] is not so much a paradigm as a direct model of an underlying machine architecture. By purpose, programming languages might be considered general purpose, [[system programming language]]s, scripting languages, domain-specific languages, or concurrent/distributed languages (or a combination of these).&lt;ref&gt;{{cite web|url=http://tunes.org/wiki/programming_20languages.html|title=TUNES: Programming Languages|url-status=live|archiveurl=https://web.archive.org/web/20071020203251/http://tunes.org/wiki/programming_20languages.html|archivedate=20 October 2007|df=dmy-all}}&lt;/ref&gt; Some general purpose languages were designed largely with educational goals.&lt;ref&gt;{{cite book|last=Wirth|first=Niklaus|authorlink=Niklaus Wirth|title=Recollections about the development of Pascal|journal=Proc. 2nd ACM SIGPLAN Conference on History of Programming Languages|volume=28|issue=3|pages=333–342|year=1993|url=http://portal.acm.org/citation.cfm?id=155378|accessdate=30 June 2006|doi=10.1145/154766.155378|isbn=978-0-89791-570-0|citeseerx=10.1.1.475.6989}}&lt;/ref&gt;

A programming language may also be classified by factors unrelated to programming paradigm. For instance, most programming languages use [[English language]] keywords, while [[Non-English-based programming languages|a minority do not]]. Other languages may be classified as being [[Esoteric programming language|deliberately esoteric]] or not.

==See also==
{{Portal|Computer programming}}

{{Div col}}
* [[Comparison of programming languages (basic instructions)]]
* [[Comparison of programming languages]]
* [[Computer programming]]
* [[Computer science]] and [[Outline of computer science]]
* [[Domain-specific language]] 
* [[Domain-specific modelling]] 
* [[Educational programming language]]
* [[Esoteric programming language]]
* [[Extensible programming]]
* [[:Category:Extensible syntax programming languages]]
* [[Invariant based programming]]
* [[List of BASIC dialects]]
* [[Lists of programming languages]]
* [[List of programming language researchers]]
* [[Programming languages used in most popular websites]]
* [[Language-oriented programming]]
* [[Logic programming]]
* [[Literate programming]]
* [[Metaprogramming]]
** {{Section link|Ruby (programming language)|Metaprogramming}}
* [[Modeling language]]
* [[Programming language theory]]
* [[Pseudocode]]
* {{Section link|Rebol|Dialects}}
* [[Reflection (computer science)|Reflection]]
* [[Scientific programming language]]
* [[Scripting language]]
* [[Software engineering]] and [[List of software engineering topics]]
{{Div col end}}

==References==
{{Reflist|30em}}

==Further reading==
{{see also|History of programming languages#Further reading}}
{{refbegin|2}}
* {{cite book|last1=Abelson|first1=Harold|authorlink1=Harold Abelson|last2=Sussman|first2=Gerald Jay|authorlink2=Gerald Jay Sussman|title=Structure and Interpretation of Computer Programs|url=http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html|edition=2nd|year=1996|publisher=MIT Press|access-date=22 October 2011|archive-url=https://web.archive.org/web/20180309173822/https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html|archive-date=9 March 2018|url-status=dead|df=dmy-all}}
* [[Raphael Finkel]]: ''[https://web.archive.org/web/20141022141742/http://www.nondot.org/sabre/Mirrored/AdvProgLangDesign/ Advanced Programming Language Design]'', Addison Wesley 1995.
* [[Daniel P. Friedman]], [[Mitchell Wand]], [[Christopher T. Haynes]]: ''[[Essentials of Programming Languages]]'', The MIT Press 2001.
* Maurizio Gabbrielli and Simone Martini: "Programming Languages: Principles and Paradigms", Springer, 2010.
* [[David Gelernter]], [[Suresh Jagannathan]]: ''Programming Linguistics'', [[The MIT Press]] 1990.
* [[Ellis Horowitz]] (ed.): ''Programming Languages, a Grand Tour'' (3rd ed.), 1987.
* Ellis Horowitz: ''Fundamentals of Programming Languages'', 1989.
* [[Shriram Krishnamurthi]]: ''[[Programming Languages: Application and Interpretation]]'', [http://www.cs.brown.edu/~sk/Publications/Books/ProgLangs/ online publication].
* [[Bruce J. MacLennan]]: ''Principles of Programming Languages: Design, Evaluation, and Implementation'', [[Oxford University Press]] 1999.
* [[John C. Mitchell]]: ''Concepts in Programming Languages'', [[Cambridge University Press]] 2002.
* [[Benjamin C. Pierce]]: ''[[Types and Programming Languages]]'', The MIT Press 2002.
* [[Terrence W. Pratt]] and [[Marvin V. Zelkowitz]]: ''Programming Languages: Design and Implementation'' (4th ed.), Prentice Hall 2000.
* [[Peter H. Salus]]. ''Handbook of Programming Languages'' (4 vols.). Macmillan 1998.
* [[Ravi Sethi]]: ''Programming Languages: Concepts and Constructs'', 2nd ed., [[Addison-Wesley]] 1996.
* [[Michael L. Scott]]: ''Programming Language Pragmatics'', [[Morgan Kaufmann Publishers]] 2005.
* [[Robert W. Sebesta]]: ''Concepts of Programming Languages'', 9th ed., Addison Wesley 2009.
* [[Franklyn Turbak]] and [[David Gifford]] with [[Mark Sheldon]]: ''Design Concepts in Programming Languages'', The MIT Press 2009.
* [[Peter Van Roy]] and [[Seif Haridi]]. ''[[Concepts, Techniques, and Models of Computer Programming]]'', The MIT Press 2004.
* [[David A. Watt]]. ''Programming Language Concepts and Paradigms''. Prentice Hall 1990.
* David A. Watt and [[Muffy Thomas]]. ''Programming Language Syntax and Semantics''. Prentice Hall 1991.
* David A. Watt. ''Programming Language Processors''. Prentice Hall 1993.
* David A. Watt. ''Programming Language Design Concepts''. John Wiley &amp; Sons 2004.
{{refend}}

==External links==
{{Sister project links|wikt=programming language|commons=Category:Programming languages|v=Programming languages|q=Programming languages|s=no|b=Subject:Computer programming languages|d=Q9143|mw=no|m=no|species=no|n=Category:Computing|voy=no}}

{{Programming language}}
{{Programming languages}}
{{Computer language}}

{{Authority control}}

{{DEFAULTSORT:Programming Language}}
[[Category:Programming language classification]]
[[Category:Programming languages| ]]
[[Category:Notation]]</text>
      <sha1>bcx32s6ij2i4mn3q963ljm7p0e97p97</sha1>
    </revision>
  </page>
</mediawiki>
