<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <dbname>enwiki</dbname>
    <base>https://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.35.0-wmf.36</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Decimal128 floating-point format</title>
    <ns>0</ns>
    <id>23558705</id>
    <revision>
      <id>960608515</id>
      <parentid>942917923</parentid>
      <timestamp>2020-06-03T22:09:23Z</timestamp>
      <contributor>
        <username>Matthiaspaul</username>
        <id>13467261</id>
      </contributor>
      <comment>/* Densely packed decimal significand field */ +link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11486" xml:space="preserve">{{lowercase}}
{{floating-point}}
In [[computing]], '''decimal128''' is a [[decimal floating-point]] [[computer numbering format]] that occupies 16 bytes (128 bits) in computer memory.
It is intended for applications where it is necessary to emulate decimal rounding exactly, such as financial and tax computations.

Decimal128 supports 34 [[decimal digit]]s of [[significand]] and  an [[exponent]] range of −6143 to +6144, i.e. {{gaps|±0.000|000|000|000|000|000|000|000|000|000|000|e=-6143}} to {{gaps|±9.999|999|999|999|999|999|999|999|999|999|999|e=6144}}.  (Equivalently, {{gaps|±0|000|000|000|000|000|000|000|000|000|000|000|e=-6176}} to {{gaps|±9|999|999|999|999|999|999|999|999|999|999|999|e=6111}}.) Therefore, decimal128 has the greatest range of values compared with other IEEE basic floating point formats. Because the significand is not normalized, most values with less than 34 [[significant digits]] have multiple possible representations; {{gaps|1×10&lt;sup&gt;2&lt;/sup&gt;|&amp;#61;|0.1×10&lt;sup&gt;3&lt;/sup&gt;|&amp;#61;|0.01×10&lt;sup&gt;4&lt;/sup&gt;}}, etc.  Zero has {{gaps|12|288}} possible representations ({{gaps|24|576}} if you include both [[signed zero]]s).

Decimal128 floating point is a relatively new decimal floating-point format, formally introduced in the [[IEEE 754-2008|2008 version]]&lt;ref name="IEEE-754_2008"&gt;{{cite book |title=IEEE Standard for Floating-Point Arithmetic |author=IEEE Computer Society |date=2008-08-29 |publisher=[[IEEE]] |id=IEEE Std 754-2008 |doi=10.1109/IEEESTD.2008.4610935 |ref=CITEREFIEEE_7542008 |isbn=978-0-7381-5753-5}}&lt;/ref&gt; of [[IEEE 754]] as well as with [[ISO/IEC/IEEE 60559:2011]].&lt;ref name="ISO-60559_2011"&gt;{{cite journal |title=ISO/IEC/IEEE 60559:2011 |url=http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=57469 |date=2011 |access-date=2016-02-08}}&lt;/ref&gt;

== Representation of decimal128 values ==

{| class="wikitable"
|-
! Sign !! Combination !! Significand continuation
|-
! 1 bit !! 17 bits !! 110 bits
|-
| s || mmmmmmmmmmmmmmmmm || cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
|}

[[IEEE 754]] allows two alternative representation methods for decimal128 values.
The standard does not specify how to signify which representation is used,
for instance in a situation where decimal128 values are communicated between systems.

In one representation method, based on [[binary integer decimal]] (BID),
the significand is represented as binary coded positive integer.

The other, alternative, representation method is based on
[[densely packed decimal]] (DPD) for most of the
significand (except the most significant digit).

Both alternatives provide exactly the same range of representable numbers: 34 digits of significand and 3×2&lt;sup&gt;12&lt;/sup&gt; = {{gaps|12|288}} possible exponent values.

In both cases, the most significant 4 bits of the significand (which actually only have 10 possible values) are combined with the most significant 2 bits of the exponent (3 possible values) to use 30 of the 32 possible values of 5 bits in the combination field.  The remaining combinations encode [[infinity|infinities]] and [[NaN]]s.

{| class="wikitable"
|-
! Combination field !! Exponent !! Significand Msbits !! Other
|-
| 00mmmmmmmmmmmmmmm || 00xxxxxxxxxxxx || 0ccc || —
|-
| 01mmmmmmmmmmmmmmm || 01xxxxxxxxxxxx || 0ccc || —
|-
| 10mmmmmmmmmmmmmmm || 10xxxxxxxxxxxx || 0ccc || —
|-
| 1100mmmmmmmmmmmmm || 00xxxxxxxxxxxx || 100c || —
|-
| 1101mmmmmmmmmmmmm || 01xxxxxxxxxxxx || 100c || —
|-
| 1110mmmmmmmmmmmmm || 10xxxxxxxxxxxx || 100c || —
|-
| 11110mmmmmmmmmmmm || — || — || ±Infinity
|-
| 11111mmmmmmmmmmmm || — || — || NaN. Sign bit ignored. Sixth bit of the combination field determines if the NaN is signaling.
|}

In the case of Infinity and NaN, all other bits of the encoding are ignored.  Thus, it is possible to initialize an array to Infinities or NaNs by filling it with a single byte value.

=== Binary integer significand field ===
This format uses a binary significand from 0 to 10&lt;sup&gt;34&lt;/sup&gt;−1 = {{gaps|9|999|999|999|999|999|999|999|999|999|999|999}} = 1ED09BEAD87C0378D8E63FFFFFFFF&lt;sub&gt;16&lt;/sub&gt; = 
{{gaps|0111|1011010000|1001101111|1010101101|1000011111|0000000011|0111100011|0110001110|0110001111|1111111111|1111111111|1111111111&lt;sub&gt;2&lt;/sub&gt;}}.
The encoding can represent binary significands up to 10×2&lt;sup&gt;110&lt;/sup&gt;−1 = {{gaps|12|980|742|146|337|069|071|326|240|823|050|239}} but values larger than 10&lt;sup&gt;34&lt;/sup&gt;−1 are illegal (and the standard requires implementations to treat them as 0, if encountered on input).

As described above, the encoding varies depending on whether the most significant 4 bits of the significand are in the range 0 to 7 (0000&lt;sub&gt;2&lt;/sub&gt; to 0111&lt;sub&gt;2&lt;/sub&gt;), or higher (1000&lt;sub&gt;2&lt;/sub&gt; or 1001&lt;sub&gt;2&lt;/sub&gt;).

If the 2 bits after the sign bit are "00", "01", or "10", then the 
exponent field consists of the 14 bits following the sign bit, and the
significand is the remaining 113 bits, with an implicit leading 0 bit:

 &lt;code&gt; s 00eeeeeeeeeeee   (0)ttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt&lt;/code&gt;
 &lt;code&gt; s 01eeeeeeeeeeee   (0)ttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt&lt;/code&gt;
 &lt;code&gt; s 10eeeeeeeeeeee   (0)ttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt&lt;/code&gt;  

This includes [[subnormal numbers]] where the leading significand digit is 0.

If the 2 bits after the sign bit are "11", then the 14-bit exponent field is shifted 2 bits to the right (after both the sign bit and the "11" bits thereafter), and the represented significand is in the remaining 111 bits. In this case there is an implicit (that is, not stored) leading 3-bit sequence "100" in the true significand.

 &lt;code&gt; s 1100eeeeeeeeeeee (100)t tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt&lt;/code&gt;
 &lt;code&gt; s 1101eeeeeeeeeeee (100)t tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt&lt;/code&gt;
 &lt;code&gt; s 1110eeeeeeeeeeee (100)t tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt tttttttttt&lt;/code&gt;

The "11" 2-bit sequence after the sign bit indicates that there is an ''implicit'' "100" 3-bit
prefix to the significand. Compare having an implicit 1 in the significand of normal
values for the binary formats. The "00", "01", or "10" bits are part of the exponent field.

For the decimal128 format, all of these significands are out of the valid range (they begin with 2^113 &gt; 1.038×10&lt;sup&gt;34&lt;/sup&gt;), and are thus decoded as zero, but the pattern is same as [[decimal32]] and [[decimal64]].

In the above cases, the value represented is

: (−1)&lt;sup&gt;sign&lt;/sup&gt; × 10&lt;sup&gt;exponent−6176&lt;/sup&gt; × significand &lt;!-- Remember, significand is defined as an integer: 0 &lt;= significand &lt; 10^34 --&gt;

If the four bits after the sign bit are "1111" then the value is an infinity or a NaN, as described above:

 s 11110 xx...x    ±infinity
 s 11111 0x...x    a quiet NaN
 s 11111 1x...x    a signalling NaN

=== Densely packed decimal significand field ===
In this version, the significand is stored as a series of decimal digits.  The leading digit is between 0 and 9 (3 or 4 binary bits), and the rest of the significand uses the [[densely packed decimal]] (DPD) encoding.

Unlike the binary integer significand version, where the exponent changed position and came before the significand, this encoding combines the leading 2 bits of the exponent and the leading digit (3 or 4 bits) of the significand into the five bits that follow the sign bit.

This twelve bits after that are the exponent continuation field, providing the less-significant bits of the exponent.

The last 110 bits are the significand continuation field, consisting of eleven 10-bit ''[[declet (computing)|declet]]s''.&lt;ref name="Muller_2010"&gt;{{cite book |author-last1=Muller |author-first1=Jean-Michel |author-last2=Brisebarre |author-first2=Nicolas |author-last3=de Dinechin |author-first3=Florent |author-last4=Jeannerod |author-first4=Claude-Pierre |author-last5=Lefèvre |author-first5=Vincent |author-last6=Melquiond |author-first6=Guillaume |author-last7=Revol |author-first7=Nathalie |author-last8=Stehlé |author-first8=Damien |author-last9=Torres |author-first9=Serge |title=Handbook of Floating-Point Arithmetic |year=2010 |publisher=[[Birkhäuser]] |edition=1 |isbn=978-0-8176-4704-9&lt;!-- print --&gt; |doi=10.1007/978-0-8176-4705-6 |lccn=2009939668&lt;!-- |isbn=978-0-8176-4705-6 (online), ISBN 0-8176-4704-X (print) --&gt;|url=http://cds.cern.ch/record/1315760 }}&lt;/ref&gt; Each declet encodes three decimal digits&lt;ref name="Muller_2010"/&gt; using the DPD encoding.

If the first two bits after the sign bit are "00", "01", or "10", then those are
the leading bits of the exponent, and the three bits after that are interpreted as
the leading decimal digit (0 to 7):

 &lt;code&gt; s 00 TTT (00)eeeeeeeeeeee (0TTT)[tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt]&lt;/code&gt;
 &lt;code&gt; s 01 TTT (01)eeeeeeeeeeee (0TTT)[tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt]&lt;/code&gt;
 &lt;code&gt; s 10 TTT (10)eeeeeeeeeeee (0TTT)[tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt]&lt;/code&gt;
 
If the first two bits after the sign bit are "11", then the 
second two bits are the leading bits of the exponent, and the last bit is
prefixed with "100" to form the leading decimal digit (8 or 9):

 &lt;code&gt; s 1100 T (00)eeeeeeeeeeee (100T)[tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt]&lt;/code&gt;
 &lt;code&gt; s 1101 T (01)eeeeeeeeeeee (100T)[tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt]&lt;/code&gt;
 &lt;code&gt; s 1110 T (10)eeeeeeeeeeee (100T)[tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt][tttttttttt]&lt;/code&gt;
 
The remaining two combinations (11110 and 11111) of the 5-bit field
are used to represent ±infinity and NaNs, respectively.

The DPD/3BCD transcoding for the declets is given by the following table.
b9...b0 are the bits of the DPD, and d2...d0 are the three BCD digits.

{{Densely packed decimal}}

The 8 decimal values whose digits are all 8s or 9s have four codings each.
The bits marked x in the table above are [[don't care|ignored]] on input, but will always be 0 in computed results.
(The 8×3 = 24 non-standard encodings fill in the gap between 10&lt;sup&gt;3&lt;/sup&gt;=1000 and 2&lt;sup&gt;10&lt;/sup&gt;=1024.)

In the above cases, with the ''true significand'' as the sequence of decimal digits decoded, the value represented is

:&lt;math&gt;(-1)^\text{signbit}\times 10^{\text{exponentbits}_2-6176_{10}}\times \text{truesignificand}_{10}&lt;/math&gt;

== See also ==
* [[ISO/IEC 10967]], Language Independent Arithmetic
* [[Primitive data type]]

== References ==
{{reflist}}

[[Category:Computer arithmetic]]
[[Category:Data types]]
[[Category:Floating point types]]</text>
      <sha1>5nwbxvg3f30pohzo2pkjcv9yakp4ufk</sha1>
    </revision>
  </page>
</mediawiki>
